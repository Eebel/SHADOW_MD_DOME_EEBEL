
EebelBodyMaster.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000146  00800100  00007934  000079c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00007934  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000293  00800246  00800246  00007b0e  2**0
                  ALLOC
  3 .stab         0000a278  00000000  00000000  00007b10  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003327  00000000  00000000  00011d88  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000150af  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000001e0  00000000  00000000  000150c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000b22  00000000  00000000  000152a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000012c  00000000  00000000  00015dc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000005ed  00000000  00000000  00015eee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ba 0c 	jmp	0x1974	; 0x1974 <__ctors_end>
       4:	0c 94 d7 0c 	jmp	0x19ae	; 0x19ae <__bad_interrupt>
       8:	0c 94 d7 0c 	jmp	0x19ae	; 0x19ae <__bad_interrupt>
       c:	0c 94 d7 0c 	jmp	0x19ae	; 0x19ae <__bad_interrupt>
      10:	0c 94 d7 0c 	jmp	0x19ae	; 0x19ae <__bad_interrupt>
      14:	0c 94 d7 0c 	jmp	0x19ae	; 0x19ae <__bad_interrupt>
      18:	0c 94 d7 0c 	jmp	0x19ae	; 0x19ae <__bad_interrupt>
      1c:	0c 94 d7 0c 	jmp	0x19ae	; 0x19ae <__bad_interrupt>
      20:	0c 94 d7 0c 	jmp	0x19ae	; 0x19ae <__bad_interrupt>
      24:	0c 94 d7 0c 	jmp	0x19ae	; 0x19ae <__bad_interrupt>
      28:	0c 94 b5 2f 	jmp	0x5f6a	; 0x5f6a <__vector_10>
      2c:	0c 94 d7 0c 	jmp	0x19ae	; 0x19ae <__bad_interrupt>
      30:	0c 94 d7 0c 	jmp	0x19ae	; 0x19ae <__bad_interrupt>
      34:	0c 94 78 2e 	jmp	0x5cf0	; 0x5cf0 <__vector_13>
      38:	0c 94 ff 23 	jmp	0x47fe	; 0x47fe <__vector_14>
      3c:	0c 94 d7 0c 	jmp	0x19ae	; 0x19ae <__bad_interrupt>
      40:	0c 94 d7 0c 	jmp	0x19ae	; 0x19ae <__bad_interrupt>
      44:	0c 94 d7 0c 	jmp	0x19ae	; 0x19ae <__bad_interrupt>
      48:	0c 94 d4 2a 	jmp	0x55a8	; 0x55a8 <__vector_18>
      4c:	0c 94 0e 2b 	jmp	0x561c	; 0x561c <__vector_19>
      50:	0c 94 d7 0c 	jmp	0x19ae	; 0x19ae <__bad_interrupt>
      54:	0c 94 d7 0c 	jmp	0x19ae	; 0x19ae <__bad_interrupt>
      58:	0c 94 d7 0c 	jmp	0x19ae	; 0x19ae <__bad_interrupt>
      5c:	0c 94 d7 0c 	jmp	0x19ae	; 0x19ae <__bad_interrupt>
      60:	0c 94 d7 0c 	jmp	0x19ae	; 0x19ae <__bad_interrupt>
      64:	0c 94 d7 0c 	jmp	0x19ae	; 0x19ae <__bad_interrupt>
      68:	c2 0e       	add	r12, r18
      6a:	72 0d       	add	r23, r2
      6c:	ac 0e       	add	r10, r28
      6e:	72 0d       	add	r23, r2
      70:	72 0d       	add	r23, r2
      72:	72 0d       	add	r23, r2
      74:	72 0d       	add	r23, r2
      76:	72 0d       	add	r23, r2
      78:	72 0d       	add	r23, r2
      7a:	72 0d       	add	r23, r2
      7c:	72 0d       	add	r23, r2
      7e:	72 0d       	add	r23, r2
      80:	72 0d       	add	r23, r2
      82:	72 0d       	add	r23, r2
      84:	72 0d       	add	r23, r2
      86:	72 0d       	add	r23, r2
      88:	72 0d       	add	r23, r2
      8a:	72 0d       	add	r23, r2
      8c:	72 0d       	add	r23, r2
      8e:	72 0d       	add	r23, r2
      90:	72 0d       	add	r23, r2
      92:	72 0d       	add	r23, r2
      94:	72 0d       	add	r23, r2
      96:	72 0d       	add	r23, r2
      98:	8c 0e       	add	r8, r28
      9a:	6c 0e       	add	r6, r28
      9c:	72 0d       	add	r23, r2
      9e:	7e 0d       	add	r23, r14
      a0:	72 0d       	add	r23, r2
      a2:	72 0d       	add	r23, r2
      a4:	72 0d       	add	r23, r2
      a6:	72 0d       	add	r23, r2
      a8:	72 0d       	add	r23, r2
      aa:	4c 0e       	add	r4, r28
      ac:	3b 0e       	add	r3, r27
      ae:	72 0d       	add	r23, r2
      b0:	30 0e       	add	r3, r16
      b2:	72 0d       	add	r23, r2
      b4:	72 0d       	add	r23, r2
      b6:	28 0e       	add	r2, r24
      b8:	0e 0e       	add	r0, r30
      ba:	72 0d       	add	r23, r2
      bc:	72 0d       	add	r23, r2
      be:	72 0d       	add	r23, r2
      c0:	fd 0d       	add	r31, r13
      c2:	72 0d       	add	r23, r2
      c4:	72 0d       	add	r23, r2
      c6:	72 0d       	add	r23, r2
      c8:	72 0d       	add	r23, r2
      ca:	72 0d       	add	r23, r2
      cc:	72 0d       	add	r23, r2
      ce:	72 0d       	add	r23, r2
      d0:	72 0d       	add	r23, r2
      d2:	72 0d       	add	r23, r2
      d4:	72 0d       	add	r23, r2
      d6:	72 0d       	add	r23, r2
      d8:	dd 0d       	add	r29, r13
      da:	72 0d       	add	r23, r2
      dc:	72 0d       	add	r23, r2
      de:	d3 0d       	add	r29, r3
      e0:	72 0d       	add	r23, r2
      e2:	72 0d       	add	r23, r2
      e4:	72 0d       	add	r23, r2
      e6:	72 0d       	add	r23, r2
      e8:	72 0d       	add	r23, r2
      ea:	72 0d       	add	r23, r2
      ec:	c8 0d       	add	r28, r8
      ee:	72 0d       	add	r23, r2
      f0:	72 0d       	add	r23, r2
      f2:	bd 0d       	add	r27, r13
      f4:	72 0d       	add	r23, r2
      f6:	72 0d       	add	r23, r2
      f8:	af 0d       	add	r26, r15
      fa:	be 1b       	sub	r27, r30
      fc:	67 1b       	sub	r22, r23
      fe:	35 1b       	sub	r19, r21
     100:	e9 1a       	sub	r14, r25
     102:	b7 1a       	sub	r11, r23
     104:	6e 1a       	sub	r6, r30
     106:	0a 1a       	sub	r0, r26
     108:	c3 19       	sub	r28, r3
     10a:	78 19       	sub	r23, r8
     10c:	10 19       	sub	r17, r0
     10e:	bb 18       	sub	r11, r11
     110:	66 18       	sub	r6, r6
     112:	53 18       	sub	r5, r3
     114:	fe 17       	cp	r31, r30
     116:	a5 17       	cp	r26, r21
     118:	55 17       	cp	r21, r21
     11a:	a2 16       	cp	r10, r18
     11c:	a2 16       	cp	r10, r18
     11e:	a2 16       	cp	r10, r18
     120:	a2 16       	cp	r10, r18
     122:	a2 16       	cp	r10, r18
     124:	a2 16       	cp	r10, r18
     126:	a2 16       	cp	r10, r18
     128:	a2 16       	cp	r10, r18
     12a:	a2 16       	cp	r10, r18
     12c:	a2 16       	cp	r10, r18
     12e:	a2 16       	cp	r10, r18
     130:	a2 16       	cp	r10, r18
     132:	a2 16       	cp	r10, r18
     134:	a2 16       	cp	r10, r18
     136:	a2 16       	cp	r10, r18
     138:	a2 16       	cp	r10, r18
     13a:	a2 16       	cp	r10, r18
     13c:	a2 16       	cp	r10, r18
     13e:	a2 16       	cp	r10, r18
     140:	a2 16       	cp	r10, r18
     142:	a2 16       	cp	r10, r18
     144:	a2 16       	cp	r10, r18
     146:	a2 16       	cp	r10, r18
     148:	a2 16       	cp	r10, r18
     14a:	a2 16       	cp	r10, r18
     14c:	a2 16       	cp	r10, r18
     14e:	a2 16       	cp	r10, r18
     150:	a2 16       	cp	r10, r18
     152:	a2 16       	cp	r10, r18
     154:	a2 16       	cp	r10, r18
     156:	a2 16       	cp	r10, r18
     158:	a2 16       	cp	r10, r18
     15a:	a2 16       	cp	r10, r18
     15c:	a2 16       	cp	r10, r18
     15e:	a2 16       	cp	r10, r18
     160:	40 17       	cp	r20, r16
     162:	2d 17       	cp	r18, r29
     164:	1a 17       	cp	r17, r26
     166:	07 17       	cp	r16, r23
     168:	f2 16       	cp	r15, r18
     16a:	de 16       	cp	r13, r30
     16c:	cc 16       	cp	r12, r28
     16e:	9d 1d       	adc	r25, r13
     170:	43 1d       	adc	r20, r3
     172:	43 1d       	adc	r20, r3
     174:	91 1d       	adc	r25, r1
     176:	88 1d       	adc	r24, r8
     178:	83 1d       	adc	r24, r3
     17a:	43 1d       	adc	r20, r3
     17c:	43 1d       	adc	r20, r3
     17e:	43 1d       	adc	r20, r3
     180:	7a 1d       	adc	r23, r10
     182:	43 1d       	adc	r20, r3
     184:	43 1d       	adc	r20, r3
     186:	43 1d       	adc	r20, r3
     188:	43 1d       	adc	r20, r3
     18a:	43 1d       	adc	r20, r3
     18c:	43 1d       	adc	r20, r3
     18e:	43 1d       	adc	r20, r3
     190:	43 1d       	adc	r20, r3
     192:	43 1d       	adc	r20, r3
     194:	43 1d       	adc	r20, r3
     196:	43 1d       	adc	r20, r3
     198:	43 1d       	adc	r20, r3
     19a:	43 1d       	adc	r20, r3
     19c:	43 1d       	adc	r20, r3
     19e:	43 1d       	adc	r20, r3
     1a0:	6f 1d       	adc	r22, r15
     1a2:	43 1d       	adc	r20, r3
     1a4:	43 1d       	adc	r20, r3
     1a6:	43 1d       	adc	r20, r3
     1a8:	43 1d       	adc	r20, r3
     1aa:	43 1d       	adc	r20, r3
     1ac:	60 1d       	adc	r22, r0

000001ae <__trampolines_end>:
     1ae:	49 6e       	ori	r20, 0xE9	; 233
     1b0:	76 61       	ori	r23, 0x16	; 22
     1b2:	6c 69       	ori	r22, 0x9C	; 156
     1b4:	64 20       	and	r6, r4
     1b6:	4d 50       	subi	r20, 0x0D	; 13
     1b8:	33 54       	subi	r19, 0x43	; 67
     1ba:	72 69       	ori	r23, 0x92	; 146
     1bc:	67 67       	ori	r22, 0x77	; 119
     1be:	65 72       	andi	r22, 0x25	; 37
     1c0:	20 53       	subi	r18, 0x30	; 48
     1c2:	6f 75       	andi	r22, 0x5F	; 95
     1c4:	6e 64       	ori	r22, 0x4E	; 78
     1c6:	20 43       	sbci	r18, 0x30	; 48
     1c8:	6f 6d       	ori	r22, 0xDF	; 223
     1ca:	6d 61       	ori	r22, 0x1D	; 29
     1cc:	6e 64       	ori	r22, 0x4E	; 78
	...

000001cf <strSeqMarchingAnts>:
     1cf:	28 4d 61 72 63 68 69 6e 67 20 41 6e 74 73 20 50     (Marching Ants P
     1df:	61 6e 65 6c 73 29 20 0d 0a 00                       anels) ...

000001e9 <strSeqRythmicPanels>:
     1e9:	28 52 79 74 68 6d 69 63 20 50 61 6e 65 6c 73 29     (Rythmic Panels)
     1f9:	20 0d 0a 00                                          ...

000001fd <strSeqScreamNoPanels>:
     1fd:	28 53 63 72 65 61 6d 20 4e 6f 20 50 61 6e 65 6c     (Scream No Panel
     20d:	73 29 20 0d 0a 00                                   s) ...

00000213 <strSeqExcited>:
     213:	28 53 65 74 20 74 6f 20 45 78 63 69 74 65 64 29     (Set to Excited)
     223:	20 0d 0a 00                                          ...

00000227 <strSeqAwake>:
     227:	28 53 65 74 20 74 6f 20 41 77 61 6b 65 29 20 0d     (Set to Awake) .
     237:	0a 00                                               ..

00000239 <strSeqTopRC>:
     239:	28 41 6c 6c 20 70 69 65 20 70 61 6e 65 6c 73 20     (All pie panels 
     249:	74 6f 20 52 43 29 20 0d 0a 00                       to RC) ...

00000253 <strSeqWideAwake>:
     253:	28 53 65 74 20 74 6f 20 57 69 64 65 20 41 77 61     (Set to Wide Awa
     263:	6b 65 29 20 0d 0a 00                                ke) ...

0000026a <strSeqQuiet>:
     26a:	28 53 65 74 20 74 6f 20 51 75 69 65 74 29 20 0d     (Set to Quiet) .
     27a:	0a 00                                               ..

0000027c <strSeqDisco>:
     27c:	28 44 69 73 63 6f 20 44 61 6e 63 65 29 20 0d 0a     (Disco Dance) ..
	...

0000028d <strSeqLeia>:
     28d:	28 4c 65 69 61 20 4d 65 73 73 61 67 65 29 20 0d     (Leia Message) .
     29d:	0a 00                                               ..

0000029f <strSeqCantinaDance>:
     29f:	28 43 61 6e 74 69 6e 61 20 44 61 6e 63 65 29 20     (Cantina Dance) 
     2af:	0d 0a 00                                            ...

000002b2 <strSeqShortCircuit>:
     2b2:	28 53 68 6f 72 74 20 43 69 72 63 75 69 74 29 20     (Short Circuit) 
     2c2:	0d 0a 00                                            ...

000002c5 <strSeqCantinaMarchingAnts>:
     2c5:	28 43 61 6e 74 69 6e 61 20 4d 61 72 63 68 69 6e     (Cantina Marchin
     2d5:	67 20 41 6e 74 73 29 20 0d 0a 00                    g Ants) ...

000002e0 <strSeqOpenCloseWave>:
     2e0:	28 4f 70 65 6e 20 43 6c 6f 73 65 20 57 61 76 65     (Open Close Wave
     2f0:	29 20 0d 0a 00                                      ) ...

000002f5 <strSeqFastWave>:
     2f5:	28 46 61 73 74 20 57 61 76 65 29 20 0d 0a 00        (Fast Wave) ...

00000304 <strSeqWave>:
     304:	28 57 61 76 65 29 20 0d 0a 00                       (Wave) ...

0000030e <strSeqScream>:
     30e:	28 53 63 72 65 61 6d 29 20 0d 0a 00                 (Scream) ...

0000031a <strSeqCloseAll>:
     31a:	28 43 6c 6f 73 65 20 61 6c 6c 20 70 61 6e 65 6c     (Close all panel
     32a:	73 29 20 0d 0a 00                                   s) ...

00000330 <strPanelCmdErr>:
     330:	2a 2a 49 6e 76 61 6c 69 64 20 50 61 6e 65 6c 20     **Invalid Panel 
     340:	43 6f 6d 6d 61 6e 64 0d 0a 00                       Command...

0000034a <strI2CCmdErr>:
     34a:	2a 2a 49 6e 76 61 6c 69 64 20 49 32 43 20 43 6f     **Invalid I2C Co
     35a:	6d 6d 61 6e 64 0d 0a 00                             mmand...

00000362 <strAlt2Command>:
     362:	41 6c 74 32 20 63 6f 6d 6d 61 6e 64 2c 20 66 6f     Alt2 command, fo
     372:	72 77 61 72 64 20 74 6f 20 73 6c 61 76 65 0d 0a     rward to slave..
	...

00000383 <strAlt1Command>:
     383:	41 6c 74 31 20 63 6f 6d 6d 61 6e 64 2c 20 6f 75     Alt1 command, ou
     393:	74 70 75 74 20 74 6f 20 73 6f 75 6e 64 0d 0a 00     tput to sound...

000003a3 <strSoundCommand>:
     3a3:	53 6f 75 6e 64 20 63 6f 6d 6d 61 6e 64 0d 0a 00     Sound command...

000003b3 <strDisplayCommand>:
     3b3:	44 69 73 70 6c 61 79 20 63 6f 6d 6d 61 6e 64 0d     Display command.
     3c3:	0a 00                                               ..

000003c5 <strHPCommand>:
     3c5:	48 50 20 63 6f 6d 6d 61 6e 64 0d 0a 00              HP command...

000003d2 <strInitializing>:
     3d2:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 2e 2e 2e 0d     Initializing....
     3e2:	0a 00                                               ..

000003e4 <strStartCharErr>:
     3e4:	2a 2a 55 6e 72 65 63 6f 67 6e 69 7a 65 64 20 43     **Unrecognized C
     3f4:	6f 6d 6d 61 6e 64 20 53 74 61 72 74 20 43 68 61     ommand Start Cha
     404:	72 61 63 74 65 72 0d 0a 00                          racter...

0000040d <strSuart2OK>:
     40d:	0a 0d 73 75 61 72 74 32 20 43 6f 6d 6d 75 6e 69     ..suart2 Communi
     41d:	63 61 74 69 6f 6e 20 4f 4b 20 0a 0d 00              cation OK ...

0000042a <strSuart1OK>:
     42a:	0a 0d 73 75 61 72 74 31 20 43 6f 6d 6d 75 6e 69     ..suart1 Communi
     43a:	63 61 74 69 6f 6e 20 4f 4b 20 0a 0d 00              cation OK ...

00000447 <strEnterPrompt>:
     447:	45 6e 74 65 72 20 70 61 6e 65 6c 20 63 6f 6d 6d     Enter panel comm
     457:	61 6e 64 20 73 74 61 72 74 69 6e 67 20 77 69 74     and starting wit
     467:	68 20 27 3a 27 20 0a 0d 00                          h ':' ...

00000470 <strWelcome>:
     470:	0a 0d 4d 61 72 63 44 75 69 6e 6f 20 4d 61 73 74     ..MarcDuino Mast
     480:	65 72 20 76 31 2e 37 20 0a 0d 00                    er v1.7 ...

0000048b <strOK>:
     48b:	4f 4b 0a 0d 00                                      OK...

00000490 <panel_long_disco>:
     490:	0f 00 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07     ................
     4a0:	d0 07 d0 07 d0 07 0f 00 e8 03 d0 07 d0 07 d0 07     ................
     4b0:	d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 0f 00 d0 07     ................
     4c0:	e8 03 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07     ................
     4d0:	d0 07 0f 00 d0 07 d0 07 e8 03 d0 07 d0 07 d0 07     ................
     4e0:	d0 07 d0 07 d0 07 d0 07 0f 00 d0 07 d0 07 d0 07     ................
     4f0:	e8 03 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 0f 00     ................
     500:	d0 07 d0 07 d0 07 d0 07 e8 03 d0 07 d0 07 d0 07     ................
     510:	d0 07 d0 07 0f 00 d0 07 d0 07 d0 07 d0 07 d0 07     ................
     520:	e8 03 d0 07 d0 07 d0 07 d0 07 0f 00 d0 07 d0 07     ................
     530:	d0 07 d0 07 d0 07 d0 07 e8 03 d0 07 d0 07 d0 07     ................
     540:	0f 00 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07     ................
     550:	e8 03 d0 07 d0 07 0f 00 d0 07 d0 07 d0 07 d0 07     ................
     560:	d0 07 d0 07 d0 07 d0 07 e8 03 d0 07 0f 00 d0 07     ................
     570:	d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07     ................
     580:	e8 03 0f 00 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07     ................
     590:	d0 07 d0 07 d0 07 d0 07 0f 00 d0 07 d0 07 d0 07     ................
     5a0:	d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 e8 03 0f 00     ................
     5b0:	d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07     ................
     5c0:	e8 03 d0 07 0f 00 d0 07 d0 07 d0 07 d0 07 d0 07     ................
     5d0:	d0 07 d0 07 e8 03 d0 07 d0 07 0f 00 d0 07 d0 07     ................
     5e0:	d0 07 d0 07 d0 07 d0 07 e8 03 d0 07 d0 07 d0 07     ................
     5f0:	0f 00 d0 07 d0 07 d0 07 d0 07 d0 07 e8 03 d0 07     ................
     600:	d0 07 d0 07 d0 07 0f 00 d0 07 d0 07 d0 07 d0 07     ................
     610:	e8 03 d0 07 d0 07 d0 07 d0 07 d0 07 0f 00 d0 07     ................
     620:	d0 07 d0 07 e8 03 d0 07 d0 07 d0 07 d0 07 d0 07     ................
     630:	d0 07 0f 00 d0 07 d0 07 e8 03 d0 07 d0 07 d0 07     ................
     640:	d0 07 d0 07 d0 07 d0 07 0f 00 d0 07 e8 03 d0 07     ................
     650:	d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 0f 00     ................
     660:	e8 03 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07     ................
     670:	d0 07 d0 07 0f 00 d0 07 d0 07 d0 07 d0 07 d0 07     ................
     680:	d0 07 d0 07 d0 07 d0 07 d0 07 a0 8c ff ff ff ff     ................
     690:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     6a0:	98 08 ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     6b0:	ff ff ff ff ff ff 00 00 ff ff ff ff ff ff ff ff     ................
     6c0:	ff ff ff ff ff ff ff ff ff ff ff ff                 ............

000006cc <panel_init>:
     6cc:	64 00 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07     d...............
     6dc:	d0 07 d0 07 d0 07 00 00 ff ff ff ff ff ff ff ff     ................
     6ec:	ff ff ff ff ff ff ff ff ff ff ff ff                 ............

000006f8 <panel_dance>:
     6f8:	14 00 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07     ................
     708:	d0 07 d0 07 d0 07 2d 00 d0 07 d0 07 d0 07 d0 07     ......-.........
     718:	d0 07 d0 07 e8 03 d0 07 d0 07 d0 07 2d 00 d0 07     ............-...
     728:	d0 07 d0 07 d0 07 d0 07 d0 07 e8 03 e8 03 d0 07     ................
     738:	d0 07 2d 00 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07     ..-.............
     748:	e8 03 e8 03 e8 03 d0 07 2d 00 d0 07 d0 07 d0 07     ........-.......
     758:	d0 07 d0 07 d0 07 e8 03 e8 03 e8 03 e8 03 2d 00     ..............-.
     768:	d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 e8 03 e8 03     ................
     778:	e8 03 d0 07 2d 00 d0 07 d0 07 d0 07 d0 07 d0 07     ....-...........
     788:	d0 07 e8 03 e8 03 d0 07 d0 07 2d 00 d0 07 d0 07     ..........-.....
     798:	d0 07 d0 07 d0 07 d0 07 e8 03 d0 07 d0 07 d0 07     ................
     7a8:	2d 00 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07     -...............
     7b8:	d0 07 d0 07 d0 07 2d 00 e8 03 d0 07 d0 07 d0 07     ......-.........
     7c8:	d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 2d 00 e8 03     ............-...
     7d8:	e8 03 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07     ................
     7e8:	d0 07 2d 00 e8 03 e8 03 e8 03 d0 07 d0 07 d0 07     ..-.............
     7f8:	d0 07 d0 07 d0 07 d0 07 2d 00 e8 03 e8 03 e8 03     ........-.......
     808:	e8 03 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 2d 00     ..............-.
     818:	d0 07 e8 03 e8 03 e8 03 d0 07 d0 07 d0 07 d0 07     ................
     828:	d0 07 d0 07 2d 00 d0 07 d0 07 e8 03 e8 03 d0 07     ....-...........
     838:	d0 07 d0 07 d0 07 d0 07 d0 07 2d 00 d0 07 d0 07     ..........-.....
     848:	d0 07 e8 03 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07     ................
     858:	2d 00 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07     -...............
     868:	d0 07 d0 07 d0 07 2d 00 d0 07 d0 07 d0 07 d0 07     ......-.........
     878:	d0 07 d0 07 e8 03 d0 07 e8 03 d0 07 2d 00 d0 07     ............-...
     888:	d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07     ................
     898:	d0 07 2d 00 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07     ..-.............
     8a8:	d0 07 e8 03 d0 07 e8 03 2d 00 d0 07 d0 07 d0 07     ........-.......
     8b8:	d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 2d 00     ..............-.
     8c8:	d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 e8 03 e8 03     ................
     8d8:	e8 03 e8 03 2d 00 d0 07 d0 07 d0 07 d0 07 d0 07     ....-...........
     8e8:	d0 07 d0 07 e8 03 d0 07 e8 03 2d 00 d0 07 d0 07     ..........-.....
     8f8:	d0 07 d0 07 d0 07 d0 07 e8 03 d0 07 e8 03 d0 07     ................
     908:	2d 00 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07     -...............
     918:	d0 07 d0 07 d0 07 2d 00 d0 07 d0 07 d0 07 d0 07     ......-.........
     928:	e8 03 d0 07 d0 07 d0 07 d0 07 d0 07 2d 00 d0 07     ............-...
     938:	d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07     ................
     948:	d0 07 2d 00 d0 07 d0 07 d0 07 d0 07 d0 07 e8 03     ..-.............
     958:	d0 07 d0 07 d0 07 d0 07 2d 00 d0 07 d0 07 d0 07     ........-.......
     968:	d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 2d 00     ..............-.
     978:	e8 03 e8 03 e8 03 e8 03 e8 03 e8 03 d0 07 d0 07     ................
     988:	d0 07 d0 07 2d 00 d0 07 e8 03 e8 03 e8 03 e8 03     ....-...........
     998:	e8 03 d0 07 d0 07 d0 07 d0 07 2d 00 d0 07 d0 07     ..........-.....
     9a8:	d0 07 e8 03 e8 03 e8 03 d0 07 d0 07 d0 07 d0 07     ................
     9b8:	2d 00 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07     -...............
     9c8:	d0 07 d0 07 d0 07 2d 00 d0 07 e8 03 d0 07 e8 03     ......-.........
     9d8:	d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 2d 00 d0 07     ............-...
     9e8:	d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07     ................
     9f8:	d0 07 2d 00 e8 03 d0 07 e8 03 d0 07 d0 07 d0 07     ..-.............
     a08:	d0 07 d0 07 d0 07 d0 07 2d 00 d0 07 d0 07 d0 07     ........-.......
     a18:	d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 2d 00     ..............-.
     a28:	d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 e8 03     ................
     a38:	d0 07 e8 03 2d 00 d0 07 d0 07 d0 07 d0 07 d0 07     ....-...........
     a48:	d0 07 e8 03 d0 07 e8 03 d0 07 2d 00 d0 07 d0 07     ..........-.....
     a58:	d0 07 d0 07 d0 07 d0 07 d0 07 e8 03 d0 07 e8 03     ................
     a68:	2d 00 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07     -...............
     a78:	d0 07 d0 07 d0 07 2d 00 d0 07 d0 07 d0 07 d0 07     ......-.........
     a88:	d0 07 d0 07 e8 03 e8 03 e8 03 e8 03 2d 00 d0 07     ............-...
     a98:	d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 e8 03 d0 07     ................
     aa8:	e8 03 2d 00 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07     ..-.............
     ab8:	e8 03 d0 07 e8 03 d0 07 2d 00 d0 07 d0 07 d0 07     ........-.......
     ac8:	d0 07 d0 07 d0 07 d0 07 e8 03 d0 07 e8 03 2d 00     ..............-.
     ad8:	d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 e8 03 d0 07     ................
     ae8:	e8 03 d0 07 2d 00 d0 07 d0 07 d0 07 d0 07 d0 07     ....-...........
     af8:	d0 07 d0 07 e8 03 d0 07 e8 03 2d 00 e8 03 d0 07     ..........-.....
     b08:	e8 03 d0 07 e8 03 d0 07 e8 03 d0 07 e8 03 d0 07     ................
     b18:	2d 00 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07     -...............
     b28:	d0 07 d0 07 d0 07 2d 00 d0 07 d0 07 d0 07 d0 07     ......-.........
     b38:	d0 07 d0 07 e8 03 d0 07 e8 03 d0 07 2d 00 d0 07     ............-...
     b48:	d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 e8 03 d0 07     ................
     b58:	e8 03 2d 00 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07     ..-.............
     b68:	e8 03 d0 07 e8 03 d0 07 2d 00 d0 07 d0 07 d0 07     ........-.......
     b78:	d0 07 d0 07 d0 07 d0 07 e8 03 d0 07 e8 03 2d 00     ..............-.
     b88:	e8 03 d0 07 e8 03 d0 07 e8 03 d0 07 e8 03 d0 07     ................
     b98:	e8 03 d0 07 2d 00 d0 07 e8 03 d0 07 e8 03 d0 07     ....-...........
     ba8:	e8 03 d0 07 e8 03 d0 07 e8 03 2d 00 e8 03 d0 07     ..........-.....
     bb8:	e8 03 d0 07 e8 03 d0 07 e8 03 d0 07 e8 03 d0 07     ................
     bc8:	2d 00 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07     -...............
     bd8:	d0 07 d0 07 d0 07 2d 00 e8 03 e8 03 d0 07 d0 07     ......-.........
     be8:	d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 2d 00 d0 07     ............-...
     bf8:	d0 07 e8 03 e8 03 d0 07 d0 07 d0 07 d0 07 d0 07     ................
     c08:	d0 07 2d 00 d0 07 d0 07 d0 07 d0 07 e8 03 e8 03     ..-.............
     c18:	d0 07 d0 07 d0 07 d0 07 2d 00 d0 07 d0 07 d0 07     ........-.......
     c28:	d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 2d 00     ..............-.
     c38:	e8 03 e8 03 d0 07 d0 07 e8 03 e8 03 d0 07 d0 07     ................
     c48:	e8 03 e8 03 2d 00 d0 07 d0 07 e8 03 e8 03 d0 07     ....-...........
     c58:	d0 07 e8 03 e8 03 d0 07 d0 07 2d 00 e8 03 e8 03     ..........-.....
     c68:	d0 07 d0 07 e8 03 e8 03 d0 07 d0 07 e8 03 e8 03     ................
     c78:	2d 00 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07     -...............
     c88:	d0 07 d0 07 d0 07 2d 00 e8 03 d0 07 d0 07 d0 07     ......-.........
     c98:	d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 2d 00 d0 07     ............-...
     ca8:	d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07     ................
     cb8:	d0 07 2d 00 d0 07 e8 03 d0 07 d0 07 d0 07 d0 07     ..-.............
     cc8:	d0 07 d0 07 d0 07 d0 07 2d 00 d0 07 d0 07 d0 07     ........-.......
     cd8:	d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 2d 00     ..............-.
     ce8:	e8 03 e8 03 e8 03 d0 07 d0 07 d0 07 d0 07 d0 07     ................
     cf8:	d0 07 d0 07 2d 00 d0 07 e8 03 e8 03 d0 07 d0 07     ....-...........
     d08:	d0 07 d0 07 d0 07 d0 07 d0 07 2d 00 d0 07 d0 07     ..........-.....
     d18:	e8 03 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07     ................
     d28:	2d 00 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07     -...............
     d38:	d0 07 d0 07 d0 07 2d 00 d0 07 d0 07 d0 07 d0 07     ......-.........
     d48:	d0 07 d0 07 e8 03 d0 07 e8 03 d0 07 2d 00 d0 07     ............-...
     d58:	d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07     ................
     d68:	d0 07 2d 00 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07     ..-.............
     d78:	d0 07 e8 03 d0 07 e8 03 2d 00 d0 07 d0 07 d0 07     ........-.......
     d88:	d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 2d 00     ..............-.
     d98:	d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 e8 03 d0 07     ................
     da8:	e8 03 d0 07 2d 00 d0 07 d0 07 d0 07 d0 07 d0 07     ....-...........
     db8:	d0 07 d0 07 e8 03 d0 07 e8 03 2d 00 d0 07 d0 07     ..........-.....
     dc8:	d0 07 d0 07 d0 07 d0 07 e8 03 d0 07 e8 03 d0 07     ................
     dd8:	2d 00 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07     -...............
     de8:	d0 07 d0 07 d0 07 2d 00 e8 03 d0 07 e8 03 d0 07     ......-.........
     df8:	e8 03 d0 07 e8 03 d0 07 e8 03 d0 07 2d 00 d0 07     ............-...
     e08:	d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07     ................
     e18:	d0 07 2d 00 d0 07 e8 03 d0 07 e8 03 d0 07 e8 03     ..-.............
     e28:	d0 07 e8 03 d0 07 e8 03 2d 00 d0 07 d0 07 d0 07     ........-.......
     e38:	d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 2d 00     ..............-.
     e48:	e8 03 e8 03 e8 03 e8 03 e8 03 e8 03 e8 03 e8 03     ................
     e58:	e8 03 e8 03 2d 00 d0 07 d0 07 d0 07 d0 07 d0 07     ....-...........
     e68:	d0 07 e8 03 e8 03 e8 03 e8 03 2d 00 e8 03 e8 03     ..........-.....
     e78:	e8 03 e8 03 e8 03 e8 03 d0 07 d0 07 d0 07 d0 07     ................
     e88:	2d 00 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07     -...............
     e98:	d0 07 d0 07 d0 07 00 00 ff ff ff ff ff ff ff ff     ................
     ea8:	ff ff ff ff ff ff ff ff ff ff ff ff                 ............

00000eb4 <panel_marching_ants>:
     eb4:	14 00 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07     ................
     ec4:	d0 07 d0 07 d0 07 32 00 e8 03 d0 07 e8 03 d0 07     ......2.........
     ed4:	e8 03 d0 07 e8 03 d0 07 e8 03 d0 07 32 00 d0 07     ............2...
     ee4:	e8 03 d0 07 e8 03 d0 07 e8 03 d0 07 e8 03 d0 07     ................
     ef4:	e8 03 32 00 e8 03 d0 07 e8 03 d0 07 e8 03 d0 07     ..2.............
     f04:	e8 03 d0 07 e8 03 d0 07 32 00 d0 07 e8 03 d0 07     ........2.......
     f14:	e8 03 d0 07 e8 03 d0 07 e8 03 d0 07 e8 03 32 00     ..............2.
     f24:	e8 03 d0 07 e8 03 d0 07 e8 03 d0 07 e8 03 d0 07     ................
     f34:	e8 03 d0 07 32 00 d0 07 e8 03 d0 07 e8 03 d0 07     ....2...........
     f44:	e8 03 d0 07 e8 03 d0 07 e8 03 32 00 e8 03 d0 07     ..........2.....
     f54:	e8 03 d0 07 e8 03 d0 07 e8 03 d0 07 e8 03 d0 07     ................
     f64:	32 00 d0 07 e8 03 d0 07 e8 03 d0 07 e8 03 d0 07     2...............
     f74:	e8 03 d0 07 e8 03 32 00 e8 03 d0 07 e8 03 d0 07     ......2.........
     f84:	e8 03 d0 07 e8 03 d0 07 e8 03 d0 07 32 00 d0 07     ............2...
     f94:	e8 03 d0 07 e8 03 d0 07 e8 03 d0 07 e8 03 d0 07     ................
     fa4:	e8 03 32 00 e8 03 d0 07 e8 03 d0 07 e8 03 d0 07     ..2.............
     fb4:	e8 03 d0 07 e8 03 d0 07 32 00 d0 07 e8 03 d0 07     ........2.......
     fc4:	e8 03 d0 07 e8 03 d0 07 e8 03 d0 07 e8 03 32 00     ..............2.
     fd4:	e8 03 d0 07 e8 03 d0 07 e8 03 d0 07 e8 03 d0 07     ................
     fe4:	e8 03 d0 07 32 00 d0 07 e8 03 d0 07 e8 03 d0 07     ....2...........
     ff4:	e8 03 d0 07 e8 03 d0 07 e8 03 32 00 e8 03 d0 07     ..........2.....
    1004:	e8 03 d0 07 e8 03 d0 07 e8 03 d0 07 e8 03 d0 07     ................
    1014:	32 00 d0 07 e8 03 d0 07 e8 03 d0 07 e8 03 d0 07     2...............
    1024:	e8 03 d0 07 e8 03 32 00 e8 03 d0 07 e8 03 d0 07     ......2.........
    1034:	e8 03 d0 07 e8 03 d0 07 e8 03 d0 07 32 00 d0 07     ............2...
    1044:	e8 03 d0 07 e8 03 d0 07 e8 03 d0 07 e8 03 d0 07     ................
    1054:	e8 03 32 00 e8 03 d0 07 e8 03 d0 07 e8 03 d0 07     ..2.............
    1064:	e8 03 d0 07 e8 03 d0 07 32 00 d0 07 e8 03 d0 07     ........2.......
    1074:	e8 03 d0 07 e8 03 d0 07 e8 03 d0 07 e8 03 32 00     ..............2.
    1084:	e8 03 d0 07 e8 03 d0 07 e8 03 d0 07 e8 03 d0 07     ................
    1094:	e8 03 d0 07 32 00 d0 07 e8 03 d0 07 e8 03 d0 07     ....2...........
    10a4:	e8 03 d0 07 e8 03 d0 07 e8 03 32 00 e8 03 d0 07     ..........2.....
    10b4:	e8 03 d0 07 e8 03 d0 07 e8 03 d0 07 e8 03 d0 07     ................
    10c4:	32 00 d0 07 e8 03 d0 07 e8 03 d0 07 e8 03 d0 07     2...............
    10d4:	e8 03 d0 07 e8 03 32 00 e8 03 d0 07 e8 03 d0 07     ......2.........
    10e4:	e8 03 d0 07 e8 03 d0 07 e8 03 d0 07 32 00 d0 07     ............2...
    10f4:	e8 03 d0 07 e8 03 d0 07 e8 03 d0 07 e8 03 d0 07     ................
    1104:	e8 03 32 00 e8 03 d0 07 e8 03 d0 07 e8 03 d0 07     ..2.............
    1114:	e8 03 d0 07 e8 03 d0 07 32 00 d0 07 e8 03 d0 07     ........2.......
    1124:	e8 03 d0 07 e8 03 d0 07 e8 03 d0 07 e8 03 32 00     ..............2.
    1134:	e8 03 d0 07 e8 03 d0 07 e8 03 d0 07 e8 03 d0 07     ................
    1144:	e8 03 d0 07 32 00 d0 07 e8 03 d0 07 e8 03 d0 07     ....2...........
    1154:	e8 03 d0 07 e8 03 d0 07 e8 03 64 00 d0 07 d0 07     ..........d.....
    1164:	d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07     ................
    1174:	00 00 ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1184:	ff ff ff ff ff ff                                   ......

0000118a <panel_open_close_wave>:
    118a:	14 00 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07     ................
    119a:	d0 07 d0 07 d0 07 14 00 e8 03 d0 07 d0 07 d0 07     ................
    11aa:	d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 14 00 e8 03     ................
    11ba:	e8 03 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07     ................
    11ca:	d0 07 14 00 e8 03 e8 03 e8 03 d0 07 d0 07 d0 07     ................
    11da:	d0 07 d0 07 d0 07 d0 07 14 00 e8 03 e8 03 e8 03     ................
    11ea:	e8 03 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 14 00     ................
    11fa:	e8 03 e8 03 e8 03 e8 03 e8 03 d0 07 d0 07 d0 07     ................
    120a:	d0 07 d0 07 14 00 e8 03 e8 03 e8 03 e8 03 e8 03     ................
    121a:	e8 03 d0 07 d0 07 d0 07 d0 07 14 00 e8 03 e8 03     ................
    122a:	e8 03 e8 03 e8 03 e8 03 e8 03 d0 07 d0 07 d0 07     ................
    123a:	14 00 e8 03 e8 03 e8 03 e8 03 e8 03 e8 03 e8 03     ................
    124a:	e8 03 d0 07 d0 07 14 00 e8 03 e8 03 e8 03 e8 03     ................
    125a:	e8 03 e8 03 e8 03 e8 03 e8 03 d0 07 50 00 e8 03     ............P...
    126a:	e8 03 e8 03 e8 03 e8 03 e8 03 e8 03 e8 03 e8 03     ................
    127a:	e8 03 14 00 d0 07 e8 03 e8 03 e8 03 e8 03 e8 03     ................
    128a:	e8 03 e8 03 e8 03 e8 03 14 00 d0 07 d0 07 e8 03     ................
    129a:	e8 03 e8 03 e8 03 e8 03 e8 03 e8 03 e8 03 14 00     ................
    12aa:	d0 07 d0 07 d0 07 e8 03 e8 03 e8 03 e8 03 e8 03     ................
    12ba:	e8 03 e8 03 14 00 d0 07 d0 07 d0 07 d0 07 e8 03     ................
    12ca:	e8 03 e8 03 e8 03 e8 03 e8 03 14 00 d0 07 d0 07     ................
    12da:	d0 07 d0 07 d0 07 e8 03 e8 03 e8 03 e8 03 e8 03     ................
    12ea:	14 00 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 e8 03     ................
    12fa:	e8 03 e8 03 e8 03 14 00 d0 07 d0 07 d0 07 d0 07     ................
    130a:	d0 07 d0 07 d0 07 e8 03 e8 03 e8 03 14 00 d0 07     ................
    131a:	d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 e8 03     ................
    132a:	e8 03 14 00 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07     ................
    133a:	d0 07 d0 07 d0 07 e8 03 28 00 d0 07 d0 07 d0 07     ........(.......
    134a:	d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 00 00     ................
    135a:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    136a:	ff ff ff ff                                         ....

0000136e <panel_fast_wave>:
    136e:	0f 00 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07     ................
    137e:	d0 07 d0 07 d0 07 0f 00 e8 03 d0 07 d0 07 d0 07     ................
    138e:	d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 0f 00 d0 07     ................
    139e:	e8 03 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07     ................
    13ae:	d0 07 0f 00 d0 07 d0 07 e8 03 d0 07 d0 07 d0 07     ................
    13be:	d0 07 d0 07 d0 07 d0 07 0f 00 d0 07 d0 07 d0 07     ................
    13ce:	e8 03 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 0f 00     ................
    13de:	d0 07 d0 07 d0 07 d0 07 e8 03 d0 07 d0 07 d0 07     ................
    13ee:	d0 07 d0 07 0f 00 d0 07 d0 07 d0 07 d0 07 d0 07     ................
    13fe:	e8 03 d0 07 d0 07 d0 07 d0 07 0f 00 d0 07 d0 07     ................
    140e:	d0 07 d0 07 d0 07 d0 07 e8 03 d0 07 d0 07 d0 07     ................
    141e:	0f 00 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07     ................
    142e:	e8 03 d0 07 d0 07 0f 00 d0 07 d0 07 d0 07 d0 07     ................
    143e:	d0 07 d0 07 d0 07 d0 07 e8 03 d0 07 0f 00 d0 07     ................
    144e:	d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07     ................
    145e:	e8 03 0f 00 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07     ................
    146e:	d0 07 d0 07 d0 07 d0 07 0f 00 d0 07 d0 07 d0 07     ................
    147e:	d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 e8 03 0f 00     ................
    148e:	d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07     ................
    149e:	e8 03 d0 07 0f 00 d0 07 d0 07 d0 07 d0 07 d0 07     ................
    14ae:	d0 07 d0 07 e8 03 d0 07 d0 07 0f 00 d0 07 d0 07     ................
    14be:	d0 07 d0 07 d0 07 d0 07 e8 03 d0 07 d0 07 d0 07     ................
    14ce:	0f 00 d0 07 d0 07 d0 07 d0 07 d0 07 e8 03 d0 07     ................
    14de:	d0 07 d0 07 d0 07 0f 00 d0 07 d0 07 d0 07 d0 07     ................
    14ee:	e8 03 d0 07 d0 07 d0 07 d0 07 d0 07 0f 00 d0 07     ................
    14fe:	d0 07 d0 07 e8 03 d0 07 d0 07 d0 07 d0 07 d0 07     ................
    150e:	d0 07 0f 00 d0 07 d0 07 e8 03 d0 07 d0 07 d0 07     ................
    151e:	d0 07 d0 07 d0 07 d0 07 0f 00 d0 07 e8 03 d0 07     ................
    152e:	d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 0f 00     ................
    153e:	e8 03 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07     ................
    154e:	d0 07 d0 07 0f 00 d0 07 d0 07 d0 07 d0 07 d0 07     ................
    155e:	d0 07 d0 07 d0 07 d0 07 d0 07 00 00 ff ff ff ff     ................
    156e:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................

0000157e <panel_wave>:
    157e:	1e 00 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07     ................
    158e:	d0 07 d0 07 d0 07 1e 00 e8 03 d0 07 d0 07 d0 07     ................
    159e:	d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 1e 00 d0 07     ................
    15ae:	e8 03 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07     ................
    15be:	d0 07 1e 00 d0 07 d0 07 e8 03 d0 07 d0 07 d0 07     ................
    15ce:	d0 07 d0 07 d0 07 d0 07 1e 00 d0 07 d0 07 d0 07     ................
    15de:	e8 03 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 1e 00     ................
    15ee:	d0 07 d0 07 d0 07 d0 07 e8 03 d0 07 d0 07 d0 07     ................
    15fe:	d0 07 d0 07 1e 00 d0 07 d0 07 d0 07 d0 07 d0 07     ................
    160e:	e8 03 d0 07 d0 07 d0 07 d0 07 1e 00 d0 07 d0 07     ................
    161e:	d0 07 d0 07 d0 07 d0 07 e8 03 d0 07 d0 07 d0 07     ................
    162e:	1e 00 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07     ................
    163e:	e8 03 d0 07 d0 07 1e 00 d0 07 d0 07 d0 07 d0 07     ................
    164e:	d0 07 d0 07 d0 07 d0 07 e8 03 d0 07 1e 00 d0 07     ................
    165e:	d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07     ................
    166e:	e8 03 1e 00 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07     ................
    167e:	d0 07 d0 07 d0 07 d0 07 00 00 ff ff ff ff ff ff     ................
    168e:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff           ..............

0000169c <panel_maxstang_wiggle>:
    169c:	14 00 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07     ................
    16ac:	d0 07 d0 07 d0 07 32 00 e8 03 e8 03 e8 03 e8 03     ......2.........
    16bc:	e8 03 e8 03 e8 03 e8 03 e8 03 e8 03 0a 00 d0 07     ................
    16cc:	d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07     ................
    16dc:	d0 07 0a 00 e8 03 e8 03 e8 03 e8 03 e8 03 e8 03     ................
    16ec:	e8 03 e8 03 e8 03 e8 03 0a 00 d0 07 d0 07 d0 07     ................
    16fc:	d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 0a 00     ................
    170c:	e8 03 e8 03 e8 03 e8 03 e8 03 e8 03 e8 03 e8 03     ................
    171c:	e8 03 e8 03 0a 00 d0 07 d0 07 d0 07 d0 07 d0 07     ................
    172c:	d0 07 d0 07 d0 07 d0 07 d0 07 0a 00 e8 03 e8 03     ................
    173c:	e8 03 e8 03 e8 03 e8 03 e8 03 e8 03 e8 03 e8 03     ................
    174c:	32 00 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07     2...............
    175c:	d0 07 d0 07 d0 07 00 00 ff ff ff ff ff ff ff ff     ................
    176c:	ff ff ff ff ff ff ff ff ff ff ff ff                 ............

00001778 <panel_wave_bye>:
    1778:	14 00 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07     ................
    1788:	d0 07 d0 07 d0 07 4b 00 e8 03 e8 03 d0 07 d0 07     ......K.........
    1798:	d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 14 00 d0 07     ................
    17a8:	d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07     ................
    17b8:	d0 07 14 00 e8 03 e8 03 d0 07 d0 07 d0 07 d0 07     ................
    17c8:	d0 07 d0 07 d0 07 d0 07 14 00 d0 07 d0 07 d0 07     ................
    17d8:	d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 14 00     ................
    17e8:	e8 03 e8 03 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07     ................
    17f8:	d0 07 d0 07 4b 00 d0 07 d0 07 d0 07 d0 07 d0 07     ....K...........
    1808:	d0 07 d0 07 d0 07 d0 07 d0 07 00 00 ff ff ff ff     ................
    1818:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................

00001828 <panel_all_open_long>:
    1828:	14 00 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07     ................
    1838:	d0 07 d0 07 d0 07 e8 03 e8 03 e8 03 e8 03 e8 03     ................
    1848:	e8 03 e8 03 e8 03 e8 03 e8 03 e8 03 96 00 d0 07     ................
    1858:	d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07     ................
    1868:	d0 07 00 00 ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1878:	ff ff ff ff ff ff ff ff                             ........

00001880 <panel_all_open>:
    1880:	14 00 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07     ................
    1890:	d0 07 d0 07 d0 07 2c 01 e8 03 e8 03 e8 03 e8 03     ......,.........
    18a0:	e8 03 e8 03 e8 03 e8 03 e8 03 e8 03 96 00 d0 07     ................
    18b0:	d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07 d0 07     ................
    18c0:	d0 07 00 00 ff ff ff ff ff ff ff ff ff ff ff ff     ................
    18d0:	ff ff ff ff ff ff ff ff                             ........

000018d8 <suart_delay_table>:
    18d8:	00 c2 01 00 01 00 11 00 11 00 0c 00 00 e1 00 00     ................
    18e8:	0a 00 25 00 25 00 21 00 00 96 00 00 19 00 39 00     ..%.%.!.......9.
    18f8:	39 00 36 00 12 7a 00 00 1f 00 46 00 46 00 44 00     9.6..z....F.F.D.
    1908:	80 70 00 00 22 00 4d 00 4d 00 4a 00 00 4b 00 00     .p..".M.M.J..K..
    1918:	36 00 75 00 75 00 72 00 40 38 00 00 4a 00 9c 00     6.u.u.r.@8..J...
    1928:	9c 00 99 00 80 25 00 00 72 00 ec 00 ec 00 e9 00     .....%..r.......
    1938:	c0 12 00 00 e9 00 da 01 da 01 d7 01 60 09 00 00     ............`...
    1948:	d7 01 b6 03 b6 03 b3 03 b0 04 00 00 b3 03 6e 07     ..............n.
    1958:	6e 07 6b 07 2c 01 00 00 dc 0e c1 1d c1 1d be 1d     n.k.,...........

00001968 <__c.2268>:
    1968:	63 64 69 6e 6f 70 73 75 78 58 5b 00                 cdinopsuxX[.

00001974 <__ctors_end>:
    1974:	11 24       	eor	r1, r1
    1976:	1f be       	out	0x3f, r1	; 63
    1978:	cf ef       	ldi	r28, 0xFF	; 255
    197a:	d8 e0       	ldi	r29, 0x08	; 8
    197c:	de bf       	out	0x3e, r29	; 62
    197e:	cd bf       	out	0x3d, r28	; 61

00001980 <__do_copy_data>:
    1980:	12 e0       	ldi	r17, 0x02	; 2
    1982:	a0 e0       	ldi	r26, 0x00	; 0
    1984:	b1 e0       	ldi	r27, 0x01	; 1
    1986:	e4 e3       	ldi	r30, 0x34	; 52
    1988:	f9 e7       	ldi	r31, 0x79	; 121
    198a:	02 c0       	rjmp	.+4      	; 0x1990 <__do_copy_data+0x10>
    198c:	05 90       	lpm	r0, Z+
    198e:	0d 92       	st	X+, r0
    1990:	a6 34       	cpi	r26, 0x46	; 70
    1992:	b1 07       	cpc	r27, r17
    1994:	d9 f7       	brne	.-10     	; 0x198c <__do_copy_data+0xc>

00001996 <__do_clear_bss>:
    1996:	24 e0       	ldi	r18, 0x04	; 4
    1998:	a6 e4       	ldi	r26, 0x46	; 70
    199a:	b2 e0       	ldi	r27, 0x02	; 2
    199c:	01 c0       	rjmp	.+2      	; 0x19a0 <.do_clear_bss_start>

0000199e <.do_clear_bss_loop>:
    199e:	1d 92       	st	X+, r1

000019a0 <.do_clear_bss_start>:
    19a0:	a9 3d       	cpi	r26, 0xD9	; 217
    19a2:	b2 07       	cpc	r27, r18
    19a4:	e1 f7       	brne	.-8      	; 0x199e <.do_clear_bss_loop>
    19a6:	0e 94 c0 1d 	call	0x3b80	; 0x3b80 <main>
    19aa:	0c 94 98 3c 	jmp	0x7930	; 0x7930 <_exit>

000019ae <__bad_interrupt>:
    19ae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000019b2 <mp3_start_random>:
}


void mp3_start_random()
{
	mp3_random_timer=0;
    19b2:	10 92 98 02 	sts	0x0298, r1
    19b6:	10 92 97 02 	sts	0x0297, r1
	mp3_random_mode_flag=1;
    19ba:	81 e0       	ldi	r24, 0x01	; 1
    19bc:	80 93 48 02 	sts	0x0248, r24
    19c0:	08 95       	ret

000019c2 <mp3_stop_random>:
}

void mp3_stop_random()
{
	mp3_random_mode_flag=0;
    19c2:	10 92 48 02 	sts	0x0248, r1
	mp3_random_timer=0;
    19c6:	10 92 98 02 	sts	0x0298, r1
    19ca:	10 92 97 02 	sts	0x0297, r1
    19ce:	08 95       	ret

000019d0 <mp3_suspend_random>:
}

void mp3_suspend_random()
{
	mp3_random_timer=MP3_MAX_PAUSE_ON_RESUME;
    19d0:	80 eb       	ldi	r24, 0xB0	; 176
    19d2:	94 e0       	ldi	r25, 0x04	; 4
    19d4:	90 93 98 02 	sts	0x0298, r25
    19d8:	80 93 97 02 	sts	0x0297, r24
	saveflag=mp3_random_mode_flag;
    19dc:	80 91 48 02 	lds	r24, 0x0248
    19e0:	80 93 49 02 	sts	0x0249, r24
	mp3_random_mode_flag=0;
    19e4:	10 92 48 02 	sts	0x0248, r1
    19e8:	08 95       	ret

000019ea <mp3_resume_random>:
}

void mp3_resume_random()
{
	mp3_random_mode_flag=saveflag;
    19ea:	80 91 49 02 	lds	r24, 0x0249
    19ee:	80 93 48 02 	sts	0x0248, r24
    19f2:	08 95       	ret

000019f4 <mp3_init>:



// you need to wait 3 or 4 seconds after power up to call that one
void  mp3_init()
{
    19f4:	89 e0       	ldi	r24, 0x09	; 9
    19f6:	ea e4       	ldi	r30, 0x4A	; 74
    19f8:	f2 e0       	ldi	r31, 0x02	; 2
    19fa:	df 01       	movw	r26, r30
    19fc:	1d 92       	st	X+, r1
    19fe:	8a 95       	dec	r24
    1a00:	e9 f7       	brne	.-6      	; 0x19fc <mp3_init+0x8>
	mp3_setvolume(mp3_volume);
}

void mp3_volumemid()
{
	mp3_volume=MP3_VOLUME_MID;
    1a02:	82 e3       	ldi	r24, 0x32	; 50
    1a04:	80 93 08 01 	sts	0x0108, r24

// Sends the hardware command, assumes MP3 is connected to suart2 on the MarcDuino
void mp3_send_command_byte(char command)
{
	// sends a single byte at a time
	suart2_putc(command);
    1a08:	86 e7       	ldi	r24, 0x76	; 118
    1a0a:	0e 94 80 33 	call	0x6700	; 0x6700 <suart2_putc>
    1a0e:	82 e3       	ldi	r24, 0x32	; 50
    1a10:	0e 94 80 33 	call	0x6700	; 0x6700 <suart2_putc>
    1a14:	84 e7       	ldi	r24, 0x74	; 116
    1a16:	0e 94 80 33 	call	0x6700	; 0x6700 <suart2_putc>
    1a1a:	8f ef       	ldi	r24, 0xFF	; 255
    1a1c:	0e 94 80 33 	call	0x6700	; 0x6700 <suart2_putc>

	// play the startup sound (this function return immediately)
	mp3_playstartsound();

	// register our random timer with the realtime.c unit
	rt_add_timer(&mp3_random_timer);
    1a20:	87 e9       	ldi	r24, 0x97	; 151
    1a22:	92 e0       	ldi	r25, 0x02	; 2
    1a24:	0c 94 d0 22 	jmp	0x45a0	; 0x45a0 <rt_add_timer>

00001a28 <mp3_parse_command>:
}

void mp3_parse_command(char* commandstr)
{
    1a28:	cf 93       	push	r28
    1a2a:	df 93       	push	r29
    1a2c:	dc 01       	movw	r26, r24
	// M - Imperial March (bank 9 sound 3)
	//
	///////////////////////////////////////////////


	uint8_t len=strlen(commandstr);
    1a2e:	fc 01       	movw	r30, r24
    1a30:	01 90       	ld	r0, Z+
    1a32:	00 20       	and	r0, r0
    1a34:	e9 f7       	brne	.-6      	; 0x1a30 <mp3_parse_command+0x8>
    1a36:	31 97       	sbiw	r30, 0x01	; 1
    1a38:	e8 1b       	sub	r30, r24
    1a3a:	f9 0b       	sbc	r31, r25
	// check the start character
	if(commandstr[0]!=SOUND_START_CHAR)
    1a3c:	8c 91       	ld	r24, X
    1a3e:	84 32       	cpi	r24, 0x24	; 36
    1a40:	09 f0       	breq	.+2      	; 0x1a44 <mp3_parse_command+0x1c>
    1a42:	50 c0       	rjmp	.+160    	; 0x1ae4 <mp3_parse_command+0xbc>
	// M - Imperial March (bank 9 sound 3)
	//
	///////////////////////////////////////////////


	uint8_t len=strlen(commandstr);
    1a44:	9e 2f       	mov	r25, r30
		serial_puts_p(strSoundCmdError);
		return;
	}

	// should have between 2 and 4 characters
	if (len<2 || len>4)
    1a46:	e2 50       	subi	r30, 0x02	; 2
    1a48:	e3 30       	cpi	r30, 0x03	; 3
    1a4a:	08 f0       	brcs	.+2      	; 0x1a4e <mp3_parse_command+0x26>
    1a4c:	4b c0       	rjmp	.+150    	; 0x1ae4 <mp3_parse_command+0xbc>
	{
		serial_puts_p(strSoundCmdError);
		return;
	}

	char cmdch=commandstr[1];
    1a4e:	11 96       	adiw	r26, 0x01	; 1
    1a50:	8c 91       	ld	r24, X
    1a52:	11 97       	sbiw	r26, 0x01	; 1

	// if the command character is a digit, this is a sound play command
	if(isdigit(cmdch))
    1a54:	28 2f       	mov	r18, r24
    1a56:	30 e0       	ldi	r19, 0x00	; 0
    1a58:	20 53       	subi	r18, 0x30	; 48
    1a5a:	31 09       	sbc	r19, r1
    1a5c:	2a 30       	cpi	r18, 0x0A	; 10
    1a5e:	31 05       	cpc	r19, r1
    1a60:	d8 f5       	brcc	.+118    	; 0x1ad8 <mp3_parse_command+0xb0>
	mp3_random_mode_flag=1;
}

void mp3_stop_random()
{
	mp3_random_mode_flag=0;
    1a62:	10 92 48 02 	sts	0x0248, r1
	mp3_random_timer=0;
    1a66:	10 92 98 02 	sts	0x0298, r1
    1a6a:	10 92 97 02 	sts	0x0297, r1

	// if the command character is a digit, this is a sound play command
	if(isdigit(cmdch))
	{
		mp3_stop_random(); // any manual sound command stops random automatically
		uint8_t bank=(uint8_t)cmdch - 48; // cheap ASCII to number conversion
    1a6e:	c0 ed       	ldi	r28, 0xD0	; 208
    1a70:	c8 0f       	add	r28, r24
		uint8_t sound=0;
		if(len>2)
    1a72:	92 30       	cpi	r25, 0x02	; 2
    1a74:	09 f4       	brne	.+2      	; 0x1a78 <mp3_parse_command+0x50>
    1a76:	40 c0       	rjmp	.+128    	; 0x1af8 <mp3_parse_command+0xd0>
		{
			sound=atoi(commandstr+2);
    1a78:	cd 01       	movw	r24, r26
    1a7a:	02 96       	adiw	r24, 0x02	; 2
    1a7c:	0e 94 1b 36 	call	0x6c36	; 0x6c36 <atoi>
    1a80:	d8 2f       	mov	r29, r24
// Bank 0 can access any sound
void mp3_sound(uint8_t bank, uint8_t sound)
{
	uint8_t filenum;

	if(bank>MP3_MAX_BANKS) return;
    1a82:	ca 30       	cpi	r28, 0x0A	; 10
    1a84:	08 f0       	brcs	.+2      	; 0x1a88 <mp3_parse_command+0x60>
    1a86:	53 c0       	rjmp	.+166    	; 0x1b2e <mp3_parse_command+0x106>
	if(bank!=0 && sound>MP3_MAX_SOUNDS_PER_BANK) return;
    1a88:	cc 23       	and	r28, r28
    1a8a:	f1 f0       	breq	.+60     	; 0x1ac8 <mp3_parse_command+0xa0>
    1a8c:	da 31       	cpi	r29, 0x1A	; 26
    1a8e:	08 f0       	brcs	.+2      	; 0x1a92 <mp3_parse_command+0x6a>
    1a90:	4e c0       	rjmp	.+156    	; 0x1b2e <mp3_parse_command+0x106>
	if(bank==0) filenum=sound;

	else if(sound!=0)
	{
		// calculate actual file number on the MP3 memory card
		filenum = (bank-1)*MP3_MAX_SOUNDS_PER_BANK + sound;
    1a92:	2c 2f       	mov	r18, r28
    1a94:	30 e0       	ldi	r19, 0x00	; 0
	if(bank!=0 && sound>MP3_MAX_SOUNDS_PER_BANK) return;

	// if bank=0 play the sound number provided
	if(bank==0) filenum=sound;

	else if(sound!=0)
    1a96:	d1 11       	cpse	r29, r1
    1a98:	4d c0       	rjmp	.+154    	; 0x1b34 <mp3_parse_command+0x10c>
			mp3_bank_indexes[bank]= sound;
	}
	// sound "0", play first or next sound depending on bank
	else
	{
		if(bank<=MP3_BANK_CUTOFF)
    1a9a:	c5 30       	cpi	r28, 0x05	; 5
    1a9c:	70 f4       	brcc	.+28     	; 0x1aba <mp3_parse_command+0x92>
		{
			// advance index, rewind to first sound if at end
			if((++mp3_bank_indexes[bank]) > mp3_max_sounds[bank])
    1a9e:	f9 01       	movw	r30, r18
    1aa0:	e6 5b       	subi	r30, 0xB6	; 182
    1aa2:	fd 4f       	sbci	r31, 0xFD	; 253
    1aa4:	d0 81       	ld	r29, Z
    1aa6:	df 5f       	subi	r29, 0xFF	; 255
    1aa8:	d0 83       	st	Z, r29
    1aaa:	d9 01       	movw	r26, r18
    1aac:	af 5c       	subi	r26, 0xCF	; 207
    1aae:	be 4f       	sbci	r27, 0xFE	; 254
    1ab0:	8c 91       	ld	r24, X
    1ab2:	8d 17       	cp	r24, r29
    1ab4:	18 f4       	brcc	.+6      	; 0x1abc <mp3_parse_command+0x94>
				mp3_bank_indexes[bank]=1;
    1ab6:	81 e0       	ldi	r24, 0x01	; 1
    1ab8:	80 83       	st	Z, r24
    1aba:	d1 e0       	ldi	r29, 0x01	; 1
		else
		{
			// for banks that always play the first sound
			sound=1;
		}
		filenum = (bank-1)*MP3_MAX_SOUNDS_PER_BANK + sound;
    1abc:	21 50       	subi	r18, 0x01	; 1
    1abe:	31 09       	sbc	r19, r1
    1ac0:	89 e1       	ldi	r24, 0x19	; 25
    1ac2:	28 9f       	mul	r18, r24
    1ac4:	d0 0d       	add	r29, r0
    1ac6:	11 24       	eor	r1, r1

// Sends the hardware command, assumes MP3 is connected to suart2 on the MarcDuino
void mp3_send_command_byte(char command)
{
	// sends a single byte at a time
	suart2_putc(command);
    1ac8:	84 e7       	ldi	r24, 0x74	; 116
    1aca:	0e 94 80 33 	call	0x6700	; 0x6700 <suart2_putc>
    1ace:	8d 2f       	mov	r24, r29
			break;
		default:
			serial_puts_p(strSoundCmdError);
			break;
	}
}
    1ad0:	df 91       	pop	r29
    1ad2:	cf 91       	pop	r28

// Sends the hardware command, assumes MP3 is connected to suart2 on the MarcDuino
void mp3_send_command_byte(char command)
{
	// sends a single byte at a time
	suart2_putc(command);
    1ad4:	0c 94 80 33 	jmp	0x6700	; 0x6700 <suart2_putc>
		mp3_sound(bank, sound);
		return;
	}

	// the command is a character
	switch(cmdch)
    1ad8:	90 e0       	ldi	r25, 0x00	; 0
    1ada:	fc 01       	movw	r30, r24
    1adc:	bb 97       	sbiw	r30, 0x2b	; 43
    1ade:	e9 34       	cpi	r30, 0x49	; 73
    1ae0:	f1 05       	cpc	r31, r1
    1ae2:	30 f0       	brcs	.+12     	; 0x1af0 <mp3_parse_command+0xc8>
			//mp3_suspend_random();
			mp3_sound(8,3);
			//mp3_resume_random();
			break;
		default:
			serial_puts_p(strSoundCmdError);
    1ae4:	8e ea       	ldi	r24, 0xAE	; 174
    1ae6:	91 e0       	ldi	r25, 0x01	; 1
			break;
	}
}
    1ae8:	df 91       	pop	r29
    1aea:	cf 91       	pop	r28
			//mp3_suspend_random();
			mp3_sound(8,3);
			//mp3_resume_random();
			break;
		default:
			serial_puts_p(strSoundCmdError);
    1aec:	0c 94 d0 2b 	jmp	0x57a0	; 0x57a0 <serial_puts_p>
		mp3_sound(bank, sound);
		return;
	}

	// the command is a character
	switch(cmdch)
    1af0:	ec 5c       	subi	r30, 0xCC	; 204
    1af2:	ff 4f       	sbci	r31, 0xFF	; 255
    1af4:	0c 94 2c 35 	jmp	0x6a58	; 0x6a58 <__tablejump2__>
	// if the command character is a digit, this is a sound play command
	if(isdigit(cmdch))
	{
		mp3_stop_random(); // any manual sound command stops random automatically
		uint8_t bank=(uint8_t)cmdch - 48; // cheap ASCII to number conversion
		uint8_t sound=0;
    1af8:	d0 e0       	ldi	r29, 0x00	; 0
    1afa:	c3 cf       	rjmp	.-122    	; 0x1a82 <mp3_parse_command+0x5a>
	mp3_random_timer=0;
}

void mp3_suspend_random()
{
	mp3_random_timer=MP3_MAX_PAUSE_ON_RESUME;
    1afc:	80 eb       	ldi	r24, 0xB0	; 176
    1afe:	94 e0       	ldi	r25, 0x04	; 4
    1b00:	90 93 98 02 	sts	0x0298, r25
    1b04:	80 93 97 02 	sts	0x0297, r24
	saveflag=mp3_random_mode_flag;
    1b08:	80 91 48 02 	lds	r24, 0x0248
    1b0c:	80 93 49 02 	sts	0x0249, r24
	mp3_random_mode_flag=0;
    1b10:	10 92 48 02 	sts	0x0248, r1
		// also adjust last sound played index for the next sound command
		// make sure not to go past max sounds
		if(sound>mp3_max_sounds[bank])
			mp3_bank_indexes[bank]= mp3_max_sounds[bank];
		else
			mp3_bank_indexes[bank]= sound;
    1b14:	83 e0       	ldi	r24, 0x03	; 3
    1b16:	80 93 50 02 	sts	0x0250, r24

// Sends the hardware command, assumes MP3 is connected to suart2 on the MarcDuino
void mp3_send_command_byte(char command)
{
	// sends a single byte at a time
	suart2_putc(command);
    1b1a:	84 e7       	ldi	r24, 0x74	; 116
    1b1c:	0e 94 80 33 	call	0x6700	; 0x6700 <suart2_putc>
    1b20:	80 e8       	ldi	r24, 0x80	; 128
    1b22:	0e 94 80 33 	call	0x6700	; 0x6700 <suart2_putc>
	mp3_random_mode_flag=0;
}

void mp3_resume_random()
{
	mp3_random_mode_flag=saveflag;
    1b26:	80 91 49 02 	lds	r24, 0x0249
    1b2a:	80 93 48 02 	sts	0x0248, r24
			break;
		default:
			serial_puts_p(strSoundCmdError);
			break;
	}
}
    1b2e:	df 91       	pop	r29
    1b30:	cf 91       	pop	r28
    1b32:	08 95       	ret
	if(bank==0) filenum=sound;

	else if(sound!=0)
	{
		// calculate actual file number on the MP3 memory card
		filenum = (bank-1)*MP3_MAX_SOUNDS_PER_BANK + sound;
    1b34:	a9 01       	movw	r20, r18
    1b36:	41 50       	subi	r20, 0x01	; 1
    1b38:	51 09       	sbc	r21, r1
    1b3a:	9d 2f       	mov	r25, r29
    1b3c:	89 e1       	ldi	r24, 0x19	; 25
    1b3e:	48 9f       	mul	r20, r24
    1b40:	90 0d       	add	r25, r0
    1b42:	11 24       	eor	r1, r1
		// also adjust last sound played index for the next sound command
		// make sure not to go past max sounds
		if(sound>mp3_max_sounds[bank])
    1b44:	f9 01       	movw	r30, r18
    1b46:	ef 5c       	subi	r30, 0xCF	; 207
    1b48:	fe 4f       	sbci	r31, 0xFE	; 254
    1b4a:	80 81       	ld	r24, Z
			mp3_bank_indexes[bank]= mp3_max_sounds[bank];
    1b4c:	f9 01       	movw	r30, r18
    1b4e:	e6 5b       	subi	r30, 0xB6	; 182
    1b50:	fd 4f       	sbci	r31, 0xFD	; 253
	{
		// calculate actual file number on the MP3 memory card
		filenum = (bank-1)*MP3_MAX_SOUNDS_PER_BANK + sound;
		// also adjust last sound played index for the next sound command
		// make sure not to go past max sounds
		if(sound>mp3_max_sounds[bank])
    1b52:	8d 17       	cp	r24, r29
    1b54:	08 f0       	brcs	.+2      	; 0x1b58 <mp3_parse_command+0x130>
    1b56:	1f c1       	rjmp	.+574    	; 0x1d96 <mp3_parse_command+0x36e>
			mp3_bank_indexes[bank]= mp3_max_sounds[bank];
    1b58:	80 83       	st	Z, r24
	if(bank==0) filenum=sound;

	else if(sound!=0)
	{
		// calculate actual file number on the MP3 memory card
		filenum = (bank-1)*MP3_MAX_SOUNDS_PER_BANK + sound;
    1b5a:	d9 2f       	mov	r29, r25
    1b5c:	b5 cf       	rjmp	.-150    	; 0x1ac8 <mp3_parse_command+0xa0>
	mp3_random_mode_flag=1;
}

void mp3_stop_random()
{
	mp3_random_mode_flag=0;
    1b5e:	10 92 48 02 	sts	0x0248, r1
	mp3_random_timer=0;
    1b62:	10 92 98 02 	sts	0x0298, r1
    1b66:	10 92 97 02 	sts	0x0297, r1

// Sends the hardware command, assumes MP3 is connected to suart2 on the MarcDuino
void mp3_send_command_byte(char command)
{
	// sends a single byte at a time
	suart2_putc(command);
    1b6a:	84 e7       	ldi	r24, 0x74	; 116
    1b6c:	0e 94 80 33 	call	0x6700	; 0x6700 <suart2_putc>
    1b70:	8e ef       	ldi	r24, 0xFE	; 254
			break;
		default:
			serial_puts_p(strSoundCmdError);
			break;
	}
}
    1b72:	df 91       	pop	r29
    1b74:	cf 91       	pop	r28

// Sends the hardware command, assumes MP3 is connected to suart2 on the MarcDuino
void mp3_send_command_byte(char command)
{
	// sends a single byte at a time
	suart2_putc(command);
    1b76:	0c 94 80 33 	jmp	0x6700	; 0x6700 <suart2_putc>
	mp3_setvolume(mp3_volume);
}

void mp3_volumemin()
{
	mp3_volume=MP3_VOLUME_MIN;
    1b7a:	84 e6       	ldi	r24, 0x64	; 100
    1b7c:	80 93 08 01 	sts	0x0108, r24

// Sends the hardware command, assumes MP3 is connected to suart2 on the MarcDuino
void mp3_send_command_byte(char command)
{
	// sends a single byte at a time
	suart2_putc(command);
    1b80:	86 e7       	ldi	r24, 0x76	; 118
    1b82:	0e 94 80 33 	call	0x6700	; 0x6700 <suart2_putc>
    1b86:	84 e6       	ldi	r24, 0x64	; 100
			break;
		default:
			serial_puts_p(strSoundCmdError);
			break;
	}
}
    1b88:	df 91       	pop	r29
    1b8a:	cf 91       	pop	r28

// Sends the hardware command, assumes MP3 is connected to suart2 on the MarcDuino
void mp3_send_command_byte(char command)
{
	// sends a single byte at a time
	suart2_putc(command);
    1b8c:	0c 94 80 33 	jmp	0x6700	; 0x6700 <suart2_putc>
	mp3_setvolume(mp3_volume);
}

void mp3_volumemid()
{
	mp3_volume=MP3_VOLUME_MID;
    1b90:	82 e3       	ldi	r24, 0x32	; 50
    1b92:	80 93 08 01 	sts	0x0108, r24

// Sends the hardware command, assumes MP3 is connected to suart2 on the MarcDuino
void mp3_send_command_byte(char command)
{
	// sends a single byte at a time
	suart2_putc(command);
    1b96:	86 e7       	ldi	r24, 0x76	; 118
    1b98:	0e 94 80 33 	call	0x6700	; 0x6700 <suart2_putc>
    1b9c:	82 e3       	ldi	r24, 0x32	; 50
			break;
		default:
			serial_puts_p(strSoundCmdError);
			break;
	}
}
    1b9e:	df 91       	pop	r29
    1ba0:	cf 91       	pop	r28

// Sends the hardware command, assumes MP3 is connected to suart2 on the MarcDuino
void mp3_send_command_byte(char command)
{
	// sends a single byte at a time
	suart2_putc(command);
    1ba2:	0c 94 80 33 	jmp	0x6700	; 0x6700 <suart2_putc>

}

void mp3_volumemax()
{
	mp3_volume=MP3_VOLUME_MAX;
    1ba6:	10 92 08 01 	sts	0x0108, r1

// Sends the hardware command, assumes MP3 is connected to suart2 on the MarcDuino
void mp3_send_command_byte(char command)
{
	// sends a single byte at a time
	suart2_putc(command);
    1baa:	86 e7       	ldi	r24, 0x76	; 118
    1bac:	0e 94 80 33 	call	0x6700	; 0x6700 <suart2_putc>
    1bb0:	80 e0       	ldi	r24, 0x00	; 0
			break;
		default:
			serial_puts_p(strSoundCmdError);
			break;
	}
}
    1bb2:	df 91       	pop	r29
    1bb4:	cf 91       	pop	r28

// Sends the hardware command, assumes MP3 is connected to suart2 on the MarcDuino
void mp3_send_command_byte(char command)
{
	// sends a single byte at a time
	suart2_putc(command);
    1bb6:	0c 94 80 33 	jmp	0x6700	; 0x6700 <suart2_putc>
	mp3_random_timer=0;
}

void mp3_suspend_random()
{
	mp3_random_timer=MP3_MAX_PAUSE_ON_RESUME;
    1bba:	80 eb       	ldi	r24, 0xB0	; 176
    1bbc:	94 e0       	ldi	r25, 0x04	; 4
    1bbe:	90 93 98 02 	sts	0x0298, r25
    1bc2:	80 93 97 02 	sts	0x0297, r24
	saveflag=mp3_random_mode_flag;
    1bc6:	80 91 48 02 	lds	r24, 0x0248
    1bca:	80 93 49 02 	sts	0x0249, r24
	mp3_random_mode_flag=0;
    1bce:	10 92 48 02 	sts	0x0248, r1
		// also adjust last sound played index for the next sound command
		// make sure not to go past max sounds
		if(sound>mp3_max_sounds[bank])
			mp3_bank_indexes[bank]= mp3_max_sounds[bank];
		else
			mp3_bank_indexes[bank]= sound;
    1bd2:	81 e0       	ldi	r24, 0x01	; 1
    1bd4:	80 93 52 02 	sts	0x0252, r24

// Sends the hardware command, assumes MP3 is connected to suart2 on the MarcDuino
void mp3_send_command_byte(char command)
{
	// sends a single byte at a time
	suart2_putc(command);
    1bd8:	84 e7       	ldi	r24, 0x74	; 116
    1bda:	0e 94 80 33 	call	0x6700	; 0x6700 <suart2_putc>
    1bde:	80 eb       	ldi	r24, 0xB0	; 176
    1be0:	0e 94 80 33 	call	0x6700	; 0x6700 <suart2_putc>
			mp3_resume_random();
			break;
		case 'c':	// c - Beep cantina (bank 9 sound 1)
			mp3_suspend_random();
			mp3_sound(8,1);
			mp3_random_timer=2700; // extra long delay
    1be4:	8c e8       	ldi	r24, 0x8C	; 140
    1be6:	9a e0       	ldi	r25, 0x0A	; 10
    1be8:	90 93 98 02 	sts	0x0298, r25
    1bec:	80 93 97 02 	sts	0x0297, r24
	mp3_random_mode_flag=0;
}

void mp3_resume_random()
{
	mp3_random_mode_flag=saveflag;
    1bf0:	80 91 49 02 	lds	r24, 0x0249
    1bf4:	80 93 48 02 	sts	0x0248, r24
    1bf8:	9a cf       	rjmp	.-204    	; 0x1b2e <mp3_parse_command+0x106>
	mp3_random_mode_flag=1;
}

void mp3_stop_random()
{
	mp3_random_mode_flag=0;
    1bfa:	10 92 48 02 	sts	0x0248, r1
	mp3_random_timer=0;
    1bfe:	10 92 98 02 	sts	0x0298, r1
    1c02:	10 92 97 02 	sts	0x0297, r1
		// also adjust last sound played index for the next sound command
		// make sure not to go past max sounds
		if(sound>mp3_max_sounds[bank])
			mp3_bank_indexes[bank]= mp3_max_sounds[bank];
		else
			mp3_bank_indexes[bank]= sound;
    1c06:	82 e0       	ldi	r24, 0x02	; 2
    1c08:	80 93 52 02 	sts	0x0252, r24

// Sends the hardware command, assumes MP3 is connected to suart2 on the MarcDuino
void mp3_send_command_byte(char command)
{
	// sends a single byte at a time
	suart2_putc(command);
    1c0c:	84 e7       	ldi	r24, 0x74	; 116
    1c0e:	0e 94 80 33 	call	0x6700	; 0x6700 <suart2_putc>
    1c12:	81 eb       	ldi	r24, 0xB1	; 177
			break;
		default:
			serial_puts_p(strSoundCmdError);
			break;
	}
}
    1c14:	df 91       	pop	r29
    1c16:	cf 91       	pop	r28

// Sends the hardware command, assumes MP3 is connected to suart2 on the MarcDuino
void mp3_send_command_byte(char command)
{
	// sends a single byte at a time
	suart2_putc(command);
    1c18:	0c 94 80 33 	jmp	0x6700	; 0x6700 <suart2_putc>
	mp3_random_timer=0;
}

void mp3_suspend_random()
{
	mp3_random_timer=MP3_MAX_PAUSE_ON_RESUME;
    1c1c:	80 eb       	ldi	r24, 0xB0	; 176
    1c1e:	94 e0       	ldi	r25, 0x04	; 4
    1c20:	90 93 98 02 	sts	0x0298, r25
    1c24:	80 93 97 02 	sts	0x0297, r24
	saveflag=mp3_random_mode_flag;
    1c28:	80 91 48 02 	lds	r24, 0x0248
    1c2c:	80 93 49 02 	sts	0x0249, r24
	mp3_random_mode_flag=0;
    1c30:	10 92 48 02 	sts	0x0248, r1
		// also adjust last sound played index for the next sound command
		// make sure not to go past max sounds
		if(sound>mp3_max_sounds[bank])
			mp3_bank_indexes[bank]= mp3_max_sounds[bank];
		else
			mp3_bank_indexes[bank]= sound;
    1c34:	81 e0       	ldi	r24, 0x01	; 1
    1c36:	80 93 50 02 	sts	0x0250, r24

// Sends the hardware command, assumes MP3 is connected to suart2 on the MarcDuino
void mp3_send_command_byte(char command)
{
	// sends a single byte at a time
	suart2_putc(command);
    1c3a:	84 e7       	ldi	r24, 0x74	; 116
    1c3c:	0e 94 80 33 	call	0x6700	; 0x6700 <suart2_putc>
    1c40:	8e e7       	ldi	r24, 0x7E	; 126
    1c42:	0e 94 80 33 	call	0x6700	; 0x6700 <suart2_putc>
	mp3_random_mode_flag=0;
}

void mp3_resume_random()
{
	mp3_random_mode_flag=saveflag;
    1c46:	80 91 49 02 	lds	r24, 0x0249
    1c4a:	80 93 48 02 	sts	0x0248, r24
    1c4e:	6f cf       	rjmp	.-290    	; 0x1b2e <mp3_parse_command+0x106>
}


void mp3_start_random()
{
	mp3_random_timer=0;
    1c50:	10 92 98 02 	sts	0x0298, r1
    1c54:	10 92 97 02 	sts	0x0297, r1
	mp3_random_mode_flag=1;
    1c58:	81 e0       	ldi	r24, 0x01	; 1
    1c5a:	80 93 48 02 	sts	0x0248, r24
    1c5e:	67 cf       	rjmp	.-306    	; 0x1b2e <mp3_parse_command+0x106>
}

void mp3_stop_random()
{
	mp3_random_mode_flag=0;
    1c60:	10 92 48 02 	sts	0x0248, r1
	mp3_random_timer=0;
    1c64:	10 92 98 02 	sts	0x0298, r1
    1c68:	10 92 97 02 	sts	0x0297, r1
	mp3_setvolume(mp3_volume);
}

void mp3_volumeoff()
{
	mp3_volume=MP3_VOLUME_OFF;
    1c6c:	8e ef       	ldi	r24, 0xFE	; 254
    1c6e:	80 93 08 01 	sts	0x0108, r24

// Sends the hardware command, assumes MP3 is connected to suart2 on the MarcDuino
void mp3_send_command_byte(char command)
{
	// sends a single byte at a time
	suart2_putc(command);
    1c72:	86 e7       	ldi	r24, 0x76	; 118
    1c74:	7b cf       	rjmp	.-266    	; 0x1b6c <mp3_parse_command+0x144>
	mp3_random_mode_flag=1;
}

void mp3_stop_random()
{
	mp3_random_mode_flag=0;
    1c76:	10 92 48 02 	sts	0x0248, r1
	mp3_random_timer=0;
    1c7a:	10 92 98 02 	sts	0x0298, r1
    1c7e:	10 92 97 02 	sts	0x0297, r1
		// also adjust last sound played index for the next sound command
		// make sure not to go past max sounds
		if(sound>mp3_max_sounds[bank])
			mp3_bank_indexes[bank]= mp3_max_sounds[bank];
		else
			mp3_bank_indexes[bank]= sound;
    1c82:	83 e0       	ldi	r24, 0x03	; 3
    1c84:	80 93 52 02 	sts	0x0252, r24

// Sends the hardware command, assumes MP3 is connected to suart2 on the MarcDuino
void mp3_send_command_byte(char command)
{
	// sends a single byte at a time
	suart2_putc(command);
    1c88:	84 e7       	ldi	r24, 0x74	; 116
    1c8a:	0e 94 80 33 	call	0x6700	; 0x6700 <suart2_putc>
    1c8e:	82 eb       	ldi	r24, 0xB2	; 178
			break;
		default:
			serial_puts_p(strSoundCmdError);
			break;
	}
}
    1c90:	df 91       	pop	r29
    1c92:	cf 91       	pop	r28

// Sends the hardware command, assumes MP3 is connected to suart2 on the MarcDuino
void mp3_send_command_byte(char command)
{
	// sends a single byte at a time
	suart2_putc(command);
    1c94:	0c 94 80 33 	jmp	0x6700	; 0x6700 <suart2_putc>
	mp3_random_timer=0;
}

void mp3_suspend_random()
{
	mp3_random_timer=MP3_MAX_PAUSE_ON_RESUME;
    1c98:	80 eb       	ldi	r24, 0xB0	; 176
    1c9a:	94 e0       	ldi	r25, 0x04	; 4
    1c9c:	90 93 98 02 	sts	0x0298, r25
    1ca0:	80 93 97 02 	sts	0x0297, r24
	saveflag=mp3_random_mode_flag;
    1ca4:	80 91 48 02 	lds	r24, 0x0248
    1ca8:	80 93 49 02 	sts	0x0249, r24
	mp3_random_mode_flag=0;
    1cac:	10 92 48 02 	sts	0x0248, r1
		// also adjust last sound played index for the next sound command
		// make sure not to go past max sounds
		if(sound>mp3_max_sounds[bank])
			mp3_bank_indexes[bank]= mp3_max_sounds[bank];
		else
			mp3_bank_indexes[bank]= sound;
    1cb0:	81 e0       	ldi	r24, 0x01	; 1
    1cb2:	80 93 51 02 	sts	0x0251, r24

// Sends the hardware command, assumes MP3 is connected to suart2 on the MarcDuino
void mp3_send_command_byte(char command)
{
	// sends a single byte at a time
	suart2_putc(command);
    1cb6:	84 e7       	ldi	r24, 0x74	; 116
    1cb8:	0e 94 80 33 	call	0x6700	; 0x6700 <suart2_putc>
    1cbc:	87 e9       	ldi	r24, 0x97	; 151
    1cbe:	0e 94 80 33 	call	0x6700	; 0x6700 <suart2_putc>
			break;
		case 'L':	// L - Leia message (bank 7 sound 1)
			//mp3_stop_random();		// so long (34s), just stop random?
			mp3_suspend_random();
			mp3_sound(7,1);
			mp3_random_timer=4400; // 34s + 10s extra long delay
    1cc2:	80 e3       	ldi	r24, 0x30	; 48
    1cc4:	91 e1       	ldi	r25, 0x11	; 17
    1cc6:	90 93 98 02 	sts	0x0298, r25
    1cca:	80 93 97 02 	sts	0x0297, r24
	mp3_random_mode_flag=0;
}

void mp3_resume_random()
{
	mp3_random_mode_flag=saveflag;
    1cce:	80 91 49 02 	lds	r24, 0x0249
    1cd2:	80 93 48 02 	sts	0x0248, r24
    1cd6:	2b cf       	rjmp	.-426    	; 0x1b2e <mp3_parse_command+0x106>
	mp3_random_timer=0;
}

void mp3_suspend_random()
{
	mp3_random_timer=MP3_MAX_PAUSE_ON_RESUME;
    1cd8:	80 eb       	ldi	r24, 0xB0	; 176
    1cda:	94 e0       	ldi	r25, 0x04	; 4
    1cdc:	90 93 98 02 	sts	0x0298, r25
    1ce0:	80 93 97 02 	sts	0x0297, r24
	saveflag=mp3_random_mode_flag;
    1ce4:	80 91 48 02 	lds	r24, 0x0248
    1ce8:	80 93 49 02 	sts	0x0249, r24
	mp3_random_mode_flag=0;
    1cec:	10 92 48 02 	sts	0x0248, r1
		// also adjust last sound played index for the next sound command
		// make sure not to go past max sounds
		if(sound>mp3_max_sounds[bank])
			mp3_bank_indexes[bank]= mp3_max_sounds[bank];
		else
			mp3_bank_indexes[bank]= sound;
    1cf0:	86 e0       	ldi	r24, 0x06	; 6
    1cf2:	80 93 52 02 	sts	0x0252, r24

// Sends the hardware command, assumes MP3 is connected to suart2 on the MarcDuino
void mp3_send_command_byte(char command)
{
	// sends a single byte at a time
	suart2_putc(command);
    1cf6:	84 e7       	ldi	r24, 0x74	; 116
    1cf8:	0e 94 80 33 	call	0x6700	; 0x6700 <suart2_putc>
    1cfc:	85 eb       	ldi	r24, 0xB5	; 181
    1cfe:	0e 94 80 33 	call	0x6700	; 0x6700 <suart2_putc>
			mp3_resume_random();
			break;
		case 'D':	// D - Disco (bank 9 sound 6)
			mp3_suspend_random();
			mp3_sound(8,6);
			mp3_random_timer=39600; // 6:26 +10s min extra long delay
    1d02:	80 eb       	ldi	r24, 0xB0	; 176
    1d04:	9a e9       	ldi	r25, 0x9A	; 154
    1d06:	90 93 98 02 	sts	0x0298, r25
    1d0a:	80 93 97 02 	sts	0x0297, r24
	mp3_random_mode_flag=0;
}

void mp3_resume_random()
{
	mp3_random_mode_flag=saveflag;
    1d0e:	80 91 49 02 	lds	r24, 0x0249
    1d12:	80 93 48 02 	sts	0x0248, r24
    1d16:	0b cf       	rjmp	.-490    	; 0x1b2e <mp3_parse_command+0x106>
	mp3_random_timer=0;
}

void mp3_suspend_random()
{
	mp3_random_timer=MP3_MAX_PAUSE_ON_RESUME;
    1d18:	80 eb       	ldi	r24, 0xB0	; 176
    1d1a:	94 e0       	ldi	r25, 0x04	; 4
    1d1c:	90 93 98 02 	sts	0x0298, r25
    1d20:	80 93 97 02 	sts	0x0297, r24
	saveflag=mp3_random_mode_flag;
    1d24:	80 91 48 02 	lds	r24, 0x0248
    1d28:	80 93 49 02 	sts	0x0249, r24
	mp3_random_mode_flag=0;
    1d2c:	10 92 48 02 	sts	0x0248, r1
		// also adjust last sound played index for the next sound command
		// make sure not to go past max sounds
		if(sound>mp3_max_sounds[bank])
			mp3_bank_indexes[bank]= mp3_max_sounds[bank];
		else
			mp3_bank_indexes[bank]= sound;
    1d30:	85 e0       	ldi	r24, 0x05	; 5
    1d32:	80 93 52 02 	sts	0x0252, r24

// Sends the hardware command, assumes MP3 is connected to suart2 on the MarcDuino
void mp3_send_command_byte(char command)
{
	// sends a single byte at a time
	suart2_putc(command);
    1d36:	84 e7       	ldi	r24, 0x74	; 116
    1d38:	0e 94 80 33 	call	0x6700	; 0x6700 <suart2_putc>
    1d3c:	84 eb       	ldi	r24, 0xB4	; 180
    1d3e:	0e 94 80 33 	call	0x6700	; 0x6700 <suart2_putc>
			break;
		case 'C':	// C - Cantina music (bank 9 sound 5)
			//mp3_stop_random();		// so long, just stop random
			mp3_suspend_random();
			mp3_sound(8,5);
			mp3_random_timer=5600; // extra long delay
    1d42:	80 ee       	ldi	r24, 0xE0	; 224
    1d44:	95 e1       	ldi	r25, 0x15	; 21
    1d46:	90 93 98 02 	sts	0x0298, r25
    1d4a:	80 93 97 02 	sts	0x0297, r24
	mp3_random_mode_flag=0;
}

void mp3_resume_random()
{
	mp3_random_mode_flag=saveflag;
    1d4e:	80 91 49 02 	lds	r24, 0x0249
    1d52:	80 93 48 02 	sts	0x0248, r24
    1d56:	eb ce       	rjmp	.-554    	; 0x1b2e <mp3_parse_command+0x106>

void mp3_volumedown()
{
	uint8_t step=(MP3_VOLUME_MIN-MP3_VOLUME_MAX)/MP3_VOLUME_STEPS;
	// volume was set to off, or ended up too low
	if(mp3_volume>MP3_VOLUME_MIN) mp3_volume=MP3_VOLUME_MIN;
    1d58:	20 91 08 01 	lds	r18, 0x0108
    1d5c:	25 36       	cpi	r18, 0x65	; 101
    1d5e:	f0 f4       	brcc	.+60     	; 0x1d9c <mp3_parse_command+0x374>
	else
	{
		// the step would be too bit, peg to minimum
		if (MP3_VOLUME_MIN-mp3_volume<step)
    1d60:	84 e6       	ldi	r24, 0x64	; 100
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	82 1b       	sub	r24, r18
    1d66:	91 09       	sbc	r25, r1
    1d68:	05 97       	sbiw	r24, 0x05	; 5
    1d6a:	c4 f0       	brlt	.+48     	; 0x1d9c <mp3_parse_command+0x374>
			mp3_volume=MP3_VOLUME_MIN;
		// go up one step (volume goes inverse with value)
		else
			mp3_volume+=step;
    1d6c:	2b 5f       	subi	r18, 0xFB	; 251
    1d6e:	20 93 08 01 	sts	0x0108, r18
    1d72:	c2 2f       	mov	r28, r18

// Sends the hardware command, assumes MP3 is connected to suart2 on the MarcDuino
void mp3_send_command_byte(char command)
{
	// sends a single byte at a time
	suart2_putc(command);
    1d74:	86 e7       	ldi	r24, 0x76	; 118
    1d76:	0e 94 80 33 	call	0x6700	; 0x6700 <suart2_putc>
    1d7a:	8c 2f       	mov	r24, r28
			break;
		default:
			serial_puts_p(strSoundCmdError);
			break;
	}
}
    1d7c:	df 91       	pop	r29
    1d7e:	cf 91       	pop	r28

// Sends the hardware command, assumes MP3 is connected to suart2 on the MarcDuino
void mp3_send_command_byte(char command)
{
	// sends a single byte at a time
	suart2_putc(command);
    1d80:	0c 94 80 33 	jmp	0x6700	; 0x6700 <suart2_putc>

void mp3_volumeup()
{
	uint8_t step=(MP3_VOLUME_MIN - MP3_VOLUME_MAX)/MP3_VOLUME_STEPS;
	// volume was at max or too high
	if(mp3_volume<=MP3_VOLUME_MAX) mp3_volume=MP3_VOLUME_MAX;
    1d84:	80 91 08 01 	lds	r24, 0x0108
    1d88:	85 50       	subi	r24, 0x05	; 5
    1d8a:	8b 3f       	cpi	r24, 0xFB	; 251
    1d8c:	60 f4       	brcc	.+24     	; 0x1da6 <mp3_parse_command+0x37e>
		// the step would be too big, peg to maximum
		if (mp3_volume-MP3_VOLUME_MAX<step)
			mp3_volume=MP3_VOLUME_MAX;
		// go up down step (volume goes inverse with value)
		else
			mp3_volume-=step;
    1d8e:	80 93 08 01 	sts	0x0108, r24
    1d92:	c8 2f       	mov	r28, r24
    1d94:	ef cf       	rjmp	.-34     	; 0x1d74 <mp3_parse_command+0x34c>
		// also adjust last sound played index for the next sound command
		// make sure not to go past max sounds
		if(sound>mp3_max_sounds[bank])
			mp3_bank_indexes[bank]= mp3_max_sounds[bank];
		else
			mp3_bank_indexes[bank]= sound;
    1d96:	d0 83       	st	Z, r29
	if(bank==0) filenum=sound;

	else if(sound!=0)
	{
		// calculate actual file number on the MP3 memory card
		filenum = (bank-1)*MP3_MAX_SOUNDS_PER_BANK + sound;
    1d98:	d9 2f       	mov	r29, r25
    1d9a:	96 ce       	rjmp	.-724    	; 0x1ac8 <mp3_parse_command+0xa0>

void mp3_volumedown()
{
	uint8_t step=(MP3_VOLUME_MIN-MP3_VOLUME_MAX)/MP3_VOLUME_STEPS;
	// volume was set to off, or ended up too low
	if(mp3_volume>MP3_VOLUME_MIN) mp3_volume=MP3_VOLUME_MIN;
    1d9c:	84 e6       	ldi	r24, 0x64	; 100
    1d9e:	80 93 08 01 	sts	0x0108, r24
    1da2:	c4 e6       	ldi	r28, 0x64	; 100
    1da4:	e7 cf       	rjmp	.-50     	; 0x1d74 <mp3_parse_command+0x34c>

void mp3_volumeup()
{
	uint8_t step=(MP3_VOLUME_MIN - MP3_VOLUME_MAX)/MP3_VOLUME_STEPS;
	// volume was at max or too high
	if(mp3_volume<=MP3_VOLUME_MAX) mp3_volume=MP3_VOLUME_MAX;
    1da6:	10 92 08 01 	sts	0x0108, r1
    1daa:	c0 e0       	ldi	r28, 0x00	; 0
    1dac:	e3 cf       	rjmp	.-58     	; 0x1d74 <mp3_parse_command+0x34c>

00001dae <mp3_send_command_byte>:

// Sends the hardware command, assumes MP3 is connected to suart2 on the MarcDuino
void mp3_send_command_byte(char command)
{
	// sends a single byte at a time
	suart2_putc(command);
    1dae:	0c 94 80 33 	jmp	0x6700	; 0x6700 <suart2_putc>

00001db2 <mp3_random>:
}

void mp3_random()
{
    1db2:	1f 93       	push	r17
    1db4:	cf 93       	push	r28
    1db6:	df 93       	push	r29
    1db8:	1f 92       	push	r1
    1dba:	cd b7       	in	r28, 0x3d	; 61
    1dbc:	de b7       	in	r29, 0x3e	; 62
	uint8_t num;
	// Plays a random sound from the first 5 banks only
	num = random_howsmall_howbig(1,MP3_BANK1_SOUNDS+MP3_BANK2_SOUNDS+ MP3_BANK3_SOUNDS+MP3_BANK4_SOUNDS+MP3_BANK5_SOUNDS);
    1dbe:	23 e3       	ldi	r18, 0x33	; 51
    1dc0:	30 e0       	ldi	r19, 0x00	; 0
    1dc2:	40 e0       	ldi	r20, 0x00	; 0
    1dc4:	50 e0       	ldi	r21, 0x00	; 0
    1dc6:	61 e0       	ldi	r22, 0x01	; 1
    1dc8:	70 e0       	ldi	r23, 0x00	; 0
    1dca:	80 e0       	ldi	r24, 0x00	; 0
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	0e 94 00 34 	call	0x6800	; 0x6800 <random_howsmall_howbig>
	if(num<=MP3_BANK1_SOUNDS)
    1dd2:	64 31       	cpi	r22, 0x14	; 20
    1dd4:	b8 f0       	brcs	.+46     	; 0x1e04 <mp3_random+0x52>
	{
		mp3_sound(1, num);
		return;
	}
	num-=MP3_BANK1_SOUNDS;
    1dd6:	9d ee       	ldi	r25, 0xED	; 237
    1dd8:	96 0f       	add	r25, r22
	if(num<=MP3_BANK2_SOUNDS)
    1dda:	93 31       	cpi	r25, 0x13	; 19
    1ddc:	78 f1       	brcs	.+94     	; 0x1e3c <mp3_random+0x8a>
	{
		mp3_sound(2, num);
		return;
	}
	num-=MP3_BANK2_SOUNDS;
    1dde:	9b ed       	ldi	r25, 0xDB	; 219
    1de0:	96 0f       	add	r25, r22
	if(num<=MP3_BANK3_SOUNDS)
    1de2:	98 30       	cpi	r25, 0x08	; 8
    1de4:	98 f1       	brcs	.+102    	; 0x1e4c <mp3_random+0x9a>
	{
		mp3_sound(3, num);
		return;
	}
	num-=MP3_BANK3_SOUNDS;
    1de6:	94 ed       	ldi	r25, 0xD4	; 212
    1de8:	96 0f       	add	r25, r22
	if(num<=MP3_BANK4_SOUNDS)
    1dea:	95 30       	cpi	r25, 0x05	; 5
    1dec:	08 f4       	brcc	.+2      	; 0x1df0 <mp3_random+0x3e>
    1dee:	50 c0       	rjmp	.+160    	; 0x1e90 <mp3_random+0xde>
	{
		mp3_sound(4, num);
		return;
	}
	num-=MP3_BANK4_SOUNDS;
    1df0:	80 ed       	ldi	r24, 0xD0	; 208
    1df2:	86 0f       	add	r24, r22
	if(num<=MP3_BANK5_SOUNDS)
    1df4:	84 30       	cpi	r24, 0x04	; 4
    1df6:	08 f4       	brcc	.+2      	; 0x1dfa <mp3_random+0x48>
    1df8:	41 c0       	rjmp	.+130    	; 0x1e7c <mp3_random+0xca>
	{
		mp3_sound(5, num);
		return;
	}
}
    1dfa:	0f 90       	pop	r0
    1dfc:	df 91       	pop	r29
    1dfe:	cf 91       	pop	r28
    1e00:	1f 91       	pop	r17
    1e02:	08 95       	ret
	if(bank!=0 && sound>MP3_MAX_SOUNDS_PER_BANK) return;

	// if bank=0 play the sound number provided
	if(bank==0) filenum=sound;

	else if(sound!=0)
    1e04:	66 23       	and	r22, r22
    1e06:	81 f0       	breq	.+32     	; 0x1e28 <mp3_random+0x76>
	{
		// calculate actual file number on the MP3 memory card
		filenum = (bank-1)*MP3_MAX_SOUNDS_PER_BANK + sound;
		// also adjust last sound played index for the next sound command
		// make sure not to go past max sounds
		if(sound>mp3_max_sounds[bank])
    1e08:	63 31       	cpi	r22, 0x13	; 19
    1e0a:	89 f1       	breq	.+98     	; 0x1e6e <mp3_random+0xbc>
	else
	{
		if(bank<=MP3_BANK_CUTOFF)
		{
			// advance index, rewind to first sound if at end
			if((++mp3_bank_indexes[bank]) > mp3_max_sounds[bank])
    1e0c:	60 93 4b 02 	sts	0x024B, r22

// Sends the hardware command, assumes MP3 is connected to suart2 on the MarcDuino
void mp3_send_command_byte(char command)
{
	// sends a single byte at a time
	suart2_putc(command);
    1e10:	84 e7       	ldi	r24, 0x74	; 116
    1e12:	69 83       	std	Y+1, r22	; 0x01
    1e14:	0e 94 80 33 	call	0x6700	; 0x6700 <suart2_putc>
    1e18:	69 81       	ldd	r22, Y+1	; 0x01
    1e1a:	86 2f       	mov	r24, r22
	if(num<=MP3_BANK5_SOUNDS)
	{
		mp3_sound(5, num);
		return;
	}
}
    1e1c:	0f 90       	pop	r0
    1e1e:	df 91       	pop	r29
    1e20:	cf 91       	pop	r28
    1e22:	1f 91       	pop	r17

// Sends the hardware command, assumes MP3 is connected to suart2 on the MarcDuino
void mp3_send_command_byte(char command)
{
	// sends a single byte at a time
	suart2_putc(command);
    1e24:	0c 94 80 33 	jmp	0x6700	; 0x6700 <suart2_putc>
	else
	{
		if(bank<=MP3_BANK_CUTOFF)
		{
			// advance index, rewind to first sound if at end
			if((++mp3_bank_indexes[bank]) > mp3_max_sounds[bank])
    1e28:	60 91 4b 02 	lds	r22, 0x024B
    1e2c:	6f 5f       	subi	r22, 0xFF	; 255
    1e2e:	63 31       	cpi	r22, 0x13	; 19
    1e30:	68 f3       	brcs	.-38     	; 0x1e0c <mp3_random+0x5a>
				mp3_bank_indexes[bank]=1;
    1e32:	81 e0       	ldi	r24, 0x01	; 1
    1e34:	80 93 4b 02 	sts	0x024B, r24
    1e38:	61 e0       	ldi	r22, 0x01	; 1
    1e3a:	ea cf       	rjmp	.-44     	; 0x1e10 <mp3_random+0x5e>
	if(bank==0) filenum=sound;

	else if(sound!=0)
	{
		// calculate actual file number on the MP3 memory card
		filenum = (bank-1)*MP3_MAX_SOUNDS_PER_BANK + sound;
    1e3c:	16 e0       	ldi	r17, 0x06	; 6
    1e3e:	16 0f       	add	r17, r22
		// also adjust last sound played index for the next sound command
		// make sure not to go past max sounds
		if(sound>mp3_max_sounds[bank])
    1e40:	98 30       	cpi	r25, 0x08	; 8
    1e42:	c8 f0       	brcs	.+50     	; 0x1e76 <mp3_random+0xc4>
			mp3_bank_indexes[bank]= mp3_max_sounds[bank];
    1e44:	87 e0       	ldi	r24, 0x07	; 7
    1e46:	80 93 4c 02 	sts	0x024C, r24
    1e4a:	07 c0       	rjmp	.+14     	; 0x1e5a <mp3_random+0xa8>
	if(bank==0) filenum=sound;

	else if(sound!=0)
	{
		// calculate actual file number on the MP3 memory card
		filenum = (bank-1)*MP3_MAX_SOUNDS_PER_BANK + sound;
    1e4c:	1d e0       	ldi	r17, 0x0D	; 13
    1e4e:	16 0f       	add	r17, r22
		// also adjust last sound played index for the next sound command
		// make sure not to go past max sounds
		if(sound>mp3_max_sounds[bank])
    1e50:	95 30       	cpi	r25, 0x05	; 5
    1e52:	30 f1       	brcs	.+76     	; 0x1ea0 <mp3_random+0xee>
			mp3_bank_indexes[bank]= mp3_max_sounds[bank];
    1e54:	84 e0       	ldi	r24, 0x04	; 4
    1e56:	80 93 4d 02 	sts	0x024D, r24

// Sends the hardware command, assumes MP3 is connected to suart2 on the MarcDuino
void mp3_send_command_byte(char command)
{
	// sends a single byte at a time
	suart2_putc(command);
    1e5a:	84 e7       	ldi	r24, 0x74	; 116
    1e5c:	0e 94 80 33 	call	0x6700	; 0x6700 <suart2_putc>
    1e60:	81 2f       	mov	r24, r17
	if(num<=MP3_BANK5_SOUNDS)
	{
		mp3_sound(5, num);
		return;
	}
}
    1e62:	0f 90       	pop	r0
    1e64:	df 91       	pop	r29
    1e66:	cf 91       	pop	r28
    1e68:	1f 91       	pop	r17

// Sends the hardware command, assumes MP3 is connected to suart2 on the MarcDuino
void mp3_send_command_byte(char command)
{
	// sends a single byte at a time
	suart2_putc(command);
    1e6a:	0c 94 80 33 	jmp	0x6700	; 0x6700 <suart2_putc>
		// calculate actual file number on the MP3 memory card
		filenum = (bank-1)*MP3_MAX_SOUNDS_PER_BANK + sound;
		// also adjust last sound played index for the next sound command
		// make sure not to go past max sounds
		if(sound>mp3_max_sounds[bank])
			mp3_bank_indexes[bank]= mp3_max_sounds[bank];
    1e6e:	82 e1       	ldi	r24, 0x12	; 18
    1e70:	80 93 4b 02 	sts	0x024B, r24
    1e74:	cd cf       	rjmp	.-102    	; 0x1e10 <mp3_random+0x5e>
		else
			mp3_bank_indexes[bank]= sound;
    1e76:	90 93 4c 02 	sts	0x024C, r25
    1e7a:	ef cf       	rjmp	.-34     	; 0x1e5a <mp3_random+0xa8>
    1e7c:	80 93 4f 02 	sts	0x024F, r24

// Sends the hardware command, assumes MP3 is connected to suart2 on the MarcDuino
void mp3_send_command_byte(char command)
{
	// sends a single byte at a time
	suart2_putc(command);
    1e80:	84 e7       	ldi	r24, 0x74	; 116
    1e82:	69 83       	std	Y+1, r22	; 0x01
    1e84:	0e 94 80 33 	call	0x6700	; 0x6700 <suart2_putc>
    1e88:	69 81       	ldd	r22, Y+1	; 0x01
    1e8a:	84 e3       	ldi	r24, 0x34	; 52
    1e8c:	86 0f       	add	r24, r22
    1e8e:	c6 cf       	rjmp	.-116    	; 0x1e1c <mp3_random+0x6a>
	if(bank==0) filenum=sound;

	else if(sound!=0)
	{
		// calculate actual file number on the MP3 memory card
		filenum = (bank-1)*MP3_MAX_SOUNDS_PER_BANK + sound;
    1e90:	1f e1       	ldi	r17, 0x1F	; 31
    1e92:	16 0f       	add	r17, r22
		// also adjust last sound played index for the next sound command
		// make sure not to go past max sounds
		if(sound>mp3_max_sounds[bank])
    1e94:	94 30       	cpi	r25, 0x04	; 4
    1e96:	39 f4       	brne	.+14     	; 0x1ea6 <mp3_random+0xf4>
			mp3_bank_indexes[bank]= mp3_max_sounds[bank];
    1e98:	83 e0       	ldi	r24, 0x03	; 3
    1e9a:	80 93 4e 02 	sts	0x024E, r24
    1e9e:	dd cf       	rjmp	.-70     	; 0x1e5a <mp3_random+0xa8>
		else
			mp3_bank_indexes[bank]= sound;
    1ea0:	90 93 4d 02 	sts	0x024D, r25
    1ea4:	da cf       	rjmp	.-76     	; 0x1e5a <mp3_random+0xa8>
    1ea6:	90 93 4e 02 	sts	0x024E, r25
    1eaa:	d7 cf       	rjmp	.-82     	; 0x1e5a <mp3_random+0xa8>

00001eac <mp3_do_random>:
uint8_t mp3_random_mode_flag=0;	// the switch to check random sound mode

/******* this function needs to be called in the main loop for random sounds to work ******/
void mp3_do_random()
{
	if(!mp3_random_mode_flag)return;
    1eac:	80 91 48 02 	lds	r24, 0x0248
    1eb0:	88 23       	and	r24, r24
    1eb2:	61 f0       	breq	.+24     	; 0x1ecc <mp3_do_random+0x20>
	if(mp3_random_timer) return;
    1eb4:	80 91 97 02 	lds	r24, 0x0297
    1eb8:	90 91 98 02 	lds	r25, 0x0298
    1ebc:	89 2b       	or	r24, r25
    1ebe:	31 f4       	brne	.+12     	; 0x1ecc <mp3_do_random+0x20>
	if(mp3_random_timer==0)
    1ec0:	80 91 97 02 	lds	r24, 0x0297
    1ec4:	90 91 98 02 	lds	r25, 0x0298
    1ec8:	89 2b       	or	r24, r25
    1eca:	09 f0       	breq	.+2      	; 0x1ece <mp3_do_random+0x22>
    1ecc:	08 95       	ret
	{
		// play a random sound
		mp3_random();
    1ece:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <mp3_random>
		// set the timer for next sound
		mp3_random_timer=random_howsmall_howbig(MP3_MIN_RANDOM_PAUSE, MP3_MAX_RANDOM_PAUSE);
    1ed2:	28 ee       	ldi	r18, 0xE8	; 232
    1ed4:	33 e0       	ldi	r19, 0x03	; 3
    1ed6:	40 e0       	ldi	r20, 0x00	; 0
    1ed8:	50 e0       	ldi	r21, 0x00	; 0
    1eda:	68 e5       	ldi	r22, 0x58	; 88
    1edc:	72 e0       	ldi	r23, 0x02	; 2
    1ede:	80 e0       	ldi	r24, 0x00	; 0
    1ee0:	90 e0       	ldi	r25, 0x00	; 0
    1ee2:	0e 94 00 34 	call	0x6800	; 0x6800 <random_howsmall_howbig>
    1ee6:	70 93 98 02 	sts	0x0298, r23
    1eea:	60 93 97 02 	sts	0x0297, r22
    1eee:	08 95       	ret

00001ef0 <mp3_sound>:

// play sound from bank. If sound=0, plays next sound in bank
// for bank 1 to 4, and first sound in bank for bank 5-9
// Bank 0 can access any sound
void mp3_sound(uint8_t bank, uint8_t sound)
{
    1ef0:	cf 93       	push	r28
    1ef2:	df 93       	push	r29
    1ef4:	1f 92       	push	r1
    1ef6:	cd b7       	in	r28, 0x3d	; 61
    1ef8:	de b7       	in	r29, 0x3e	; 62
	uint8_t filenum;

	if(bank>MP3_MAX_BANKS) return;
    1efa:	8a 30       	cpi	r24, 0x0A	; 10
    1efc:	30 f5       	brcc	.+76     	; 0x1f4a <mp3_sound+0x5a>
	if(bank!=0 && sound>MP3_MAX_SOUNDS_PER_BANK) return;
    1efe:	88 23       	and	r24, r24
    1f00:	c9 f0       	breq	.+50     	; 0x1f34 <mp3_sound+0x44>
    1f02:	6a 31       	cpi	r22, 0x1A	; 26
    1f04:	10 f5       	brcc	.+68     	; 0x1f4a <mp3_sound+0x5a>
	if(bank==0) filenum=sound;

	else if(sound!=0)
	{
		// calculate actual file number on the MP3 memory card
		filenum = (bank-1)*MP3_MAX_SOUNDS_PER_BANK + sound;
    1f06:	28 2f       	mov	r18, r24
    1f08:	30 e0       	ldi	r19, 0x00	; 0
	if(bank!=0 && sound>MP3_MAX_SOUNDS_PER_BANK) return;

	// if bank=0 play the sound number provided
	if(bank==0) filenum=sound;

	else if(sound!=0)
    1f0a:	66 23       	and	r22, r22
    1f0c:	11 f1       	breq	.+68     	; 0x1f52 <mp3_sound+0x62>
	{
		// calculate actual file number on the MP3 memory card
		filenum = (bank-1)*MP3_MAX_SOUNDS_PER_BANK + sound;
    1f0e:	a9 01       	movw	r20, r18
    1f10:	41 50       	subi	r20, 0x01	; 1
    1f12:	51 09       	sbc	r21, r1
    1f14:	96 2f       	mov	r25, r22
    1f16:	89 e1       	ldi	r24, 0x19	; 25
    1f18:	48 9f       	mul	r20, r24
    1f1a:	90 0d       	add	r25, r0
    1f1c:	11 24       	eor	r1, r1
		// also adjust last sound played index for the next sound command
		// make sure not to go past max sounds
		if(sound>mp3_max_sounds[bank])
    1f1e:	f9 01       	movw	r30, r18
    1f20:	ef 5c       	subi	r30, 0xCF	; 207
    1f22:	fe 4f       	sbci	r31, 0xFE	; 254
    1f24:	80 81       	ld	r24, Z
			mp3_bank_indexes[bank]= mp3_max_sounds[bank];
    1f26:	f9 01       	movw	r30, r18
    1f28:	e6 5b       	subi	r30, 0xB6	; 182
    1f2a:	fd 4f       	sbci	r31, 0xFD	; 253
	{
		// calculate actual file number on the MP3 memory card
		filenum = (bank-1)*MP3_MAX_SOUNDS_PER_BANK + sound;
		// also adjust last sound played index for the next sound command
		// make sure not to go past max sounds
		if(sound>mp3_max_sounds[bank])
    1f2c:	86 17       	cp	r24, r22
    1f2e:	48 f5       	brcc	.+82     	; 0x1f82 <mp3_sound+0x92>
			mp3_bank_indexes[bank]= mp3_max_sounds[bank];
    1f30:	80 83       	st	Z, r24
	if(bank==0) filenum=sound;

	else if(sound!=0)
	{
		// calculate actual file number on the MP3 memory card
		filenum = (bank-1)*MP3_MAX_SOUNDS_PER_BANK + sound;
    1f32:	69 2f       	mov	r22, r25

// Sends the hardware command, assumes MP3 is connected to suart2 on the MarcDuino
void mp3_send_command_byte(char command)
{
	// sends a single byte at a time
	suart2_putc(command);
    1f34:	84 e7       	ldi	r24, 0x74	; 116
    1f36:	69 83       	std	Y+1, r22	; 0x01
    1f38:	0e 94 80 33 	call	0x6700	; 0x6700 <suart2_putc>
    1f3c:	69 81       	ldd	r22, Y+1	; 0x01
    1f3e:	86 2f       	mov	r24, r22
	printstr("MP3 Sound: ");
	printchar(MP3_PLAY_CMD);
	printchar(' ');
	printlnuint(filenum);
#endif
}
    1f40:	0f 90       	pop	r0
    1f42:	df 91       	pop	r29
    1f44:	cf 91       	pop	r28

// Sends the hardware command, assumes MP3 is connected to suart2 on the MarcDuino
void mp3_send_command_byte(char command)
{
	// sends a single byte at a time
	suart2_putc(command);
    1f46:	0c 94 80 33 	jmp	0x6700	; 0x6700 <suart2_putc>
	printstr("MP3 Sound: ");
	printchar(MP3_PLAY_CMD);
	printchar(' ');
	printlnuint(filenum);
#endif
}
    1f4a:	0f 90       	pop	r0
    1f4c:	df 91       	pop	r29
    1f4e:	cf 91       	pop	r28
    1f50:	08 95       	ret
			mp3_bank_indexes[bank]= sound;
	}
	// sound "0", play first or next sound depending on bank
	else
	{
		if(bank<=MP3_BANK_CUTOFF)
    1f52:	85 30       	cpi	r24, 0x05	; 5
    1f54:	70 f4       	brcc	.+28     	; 0x1f72 <mp3_sound+0x82>
		{
			// advance index, rewind to first sound if at end
			if((++mp3_bank_indexes[bank]) > mp3_max_sounds[bank])
    1f56:	f9 01       	movw	r30, r18
    1f58:	e6 5b       	subi	r30, 0xB6	; 182
    1f5a:	fd 4f       	sbci	r31, 0xFD	; 253
    1f5c:	60 81       	ld	r22, Z
    1f5e:	6f 5f       	subi	r22, 0xFF	; 255
    1f60:	60 83       	st	Z, r22
    1f62:	d9 01       	movw	r26, r18
    1f64:	af 5c       	subi	r26, 0xCF	; 207
    1f66:	be 4f       	sbci	r27, 0xFE	; 254
    1f68:	8c 91       	ld	r24, X
    1f6a:	86 17       	cp	r24, r22
    1f6c:	18 f4       	brcc	.+6      	; 0x1f74 <mp3_sound+0x84>
				mp3_bank_indexes[bank]=1;
    1f6e:	81 e0       	ldi	r24, 0x01	; 1
    1f70:	80 83       	st	Z, r24
    1f72:	61 e0       	ldi	r22, 0x01	; 1
		else
		{
			// for banks that always play the first sound
			sound=1;
		}
		filenum = (bank-1)*MP3_MAX_SOUNDS_PER_BANK + sound;
    1f74:	21 50       	subi	r18, 0x01	; 1
    1f76:	31 09       	sbc	r19, r1
    1f78:	e9 e1       	ldi	r30, 0x19	; 25
    1f7a:	2e 9f       	mul	r18, r30
    1f7c:	60 0d       	add	r22, r0
    1f7e:	11 24       	eor	r1, r1
    1f80:	d9 cf       	rjmp	.-78     	; 0x1f34 <mp3_sound+0x44>
		// also adjust last sound played index for the next sound command
		// make sure not to go past max sounds
		if(sound>mp3_max_sounds[bank])
			mp3_bank_indexes[bank]= mp3_max_sounds[bank];
		else
			mp3_bank_indexes[bank]= sound;
    1f82:	60 83       	st	Z, r22
	if(bank==0) filenum=sound;

	else if(sound!=0)
	{
		// calculate actual file number on the MP3 memory card
		filenum = (bank-1)*MP3_MAX_SOUNDS_PER_BANK + sound;
    1f84:	69 2f       	mov	r22, r25
    1f86:	d6 cf       	rjmp	.-84     	; 0x1f34 <mp3_sound+0x44>

00001f88 <mp3_playstartsound>:

// Sends the hardware command, assumes MP3 is connected to suart2 on the MarcDuino
void mp3_send_command_byte(char command)
{
	// sends a single byte at a time
	suart2_putc(command);
    1f88:	84 e7       	ldi	r24, 0x74	; 116
    1f8a:	0e 94 80 33 	call	0x6700	; 0x6700 <suart2_putc>
    1f8e:	8f ef       	ldi	r24, 0xFF	; 255
    1f90:	0c 94 80 33 	jmp	0x6700	; 0x6700 <suart2_putc>

00001f94 <mp3_stop>:
    1f94:	84 e7       	ldi	r24, 0x74	; 116
    1f96:	0e 94 80 33 	call	0x6700	; 0x6700 <suart2_putc>
    1f9a:	8e ef       	ldi	r24, 0xFE	; 254
    1f9c:	0c 94 80 33 	jmp	0x6700	; 0x6700 <suart2_putc>

00001fa0 <mp3_volumeup>:
//	printlnchar(MP3_STOP_CMD);
//#endif
}

void mp3_volumeup()
{
    1fa0:	cf 93       	push	r28
	uint8_t step=(MP3_VOLUME_MIN - MP3_VOLUME_MAX)/MP3_VOLUME_STEPS;
	// volume was at max or too high
	if(mp3_volume<=MP3_VOLUME_MAX) mp3_volume=MP3_VOLUME_MAX;
    1fa2:	80 91 08 01 	lds	r24, 0x0108
    1fa6:	85 50       	subi	r24, 0x05	; 5
    1fa8:	8b 3f       	cpi	r24, 0xFB	; 251
    1faa:	50 f4       	brcc	.+20     	; 0x1fc0 <mp3_volumeup+0x20>
		// the step would be too big, peg to maximum
		if (mp3_volume-MP3_VOLUME_MAX<step)
			mp3_volume=MP3_VOLUME_MAX;
		// go up down step (volume goes inverse with value)
		else
			mp3_volume-=step;
    1fac:	80 93 08 01 	sts	0x0108, r24
    1fb0:	c8 2f       	mov	r28, r24

// Sends the hardware command, assumes MP3 is connected to suart2 on the MarcDuino
void mp3_send_command_byte(char command)
{
	// sends a single byte at a time
	suart2_putc(command);
    1fb2:	86 e7       	ldi	r24, 0x76	; 118
    1fb4:	0e 94 80 33 	call	0x6700	; 0x6700 <suart2_putc>
    1fb8:	8c 2f       	mov	r24, r28
		// go up down step (volume goes inverse with value)
		else
			mp3_volume-=step;
	}
	mp3_setvolume(mp3_volume);
}
    1fba:	cf 91       	pop	r28

// Sends the hardware command, assumes MP3 is connected to suart2 on the MarcDuino
void mp3_send_command_byte(char command)
{
	// sends a single byte at a time
	suart2_putc(command);
    1fbc:	0c 94 80 33 	jmp	0x6700	; 0x6700 <suart2_putc>

void mp3_volumeup()
{
	uint8_t step=(MP3_VOLUME_MIN - MP3_VOLUME_MAX)/MP3_VOLUME_STEPS;
	// volume was at max or too high
	if(mp3_volume<=MP3_VOLUME_MAX) mp3_volume=MP3_VOLUME_MAX;
    1fc0:	10 92 08 01 	sts	0x0108, r1
    1fc4:	c0 e0       	ldi	r28, 0x00	; 0

// Sends the hardware command, assumes MP3 is connected to suart2 on the MarcDuino
void mp3_send_command_byte(char command)
{
	// sends a single byte at a time
	suart2_putc(command);
    1fc6:	86 e7       	ldi	r24, 0x76	; 118
    1fc8:	0e 94 80 33 	call	0x6700	; 0x6700 <suart2_putc>
    1fcc:	8c 2f       	mov	r24, r28
		// go up down step (volume goes inverse with value)
		else
			mp3_volume-=step;
	}
	mp3_setvolume(mp3_volume);
}
    1fce:	cf 91       	pop	r28

// Sends the hardware command, assumes MP3 is connected to suart2 on the MarcDuino
void mp3_send_command_byte(char command)
{
	// sends a single byte at a time
	suart2_putc(command);
    1fd0:	0c 94 80 33 	jmp	0x6700	; 0x6700 <suart2_putc>

00001fd4 <mp3_volumedown>:
	}
	mp3_setvolume(mp3_volume);
}

void mp3_volumedown()
{
    1fd4:	cf 93       	push	r28
	uint8_t step=(MP3_VOLUME_MIN-MP3_VOLUME_MAX)/MP3_VOLUME_STEPS;
	// volume was set to off, or ended up too low
	if(mp3_volume>MP3_VOLUME_MIN) mp3_volume=MP3_VOLUME_MIN;
    1fd6:	80 91 08 01 	lds	r24, 0x0108
    1fda:	85 36       	cpi	r24, 0x65	; 101
    1fdc:	90 f4       	brcc	.+36     	; 0x2002 <mp3_volumedown+0x2e>
	else
	{
		// the step would be too bit, peg to minimum
		if (MP3_VOLUME_MIN-mp3_volume<step)
    1fde:	24 e6       	ldi	r18, 0x64	; 100
    1fe0:	30 e0       	ldi	r19, 0x00	; 0
    1fe2:	28 1b       	sub	r18, r24
    1fe4:	31 09       	sbc	r19, r1
    1fe6:	25 30       	cpi	r18, 0x05	; 5
    1fe8:	31 05       	cpc	r19, r1
    1fea:	5c f0       	brlt	.+22     	; 0x2002 <mp3_volumedown+0x2e>
			mp3_volume=MP3_VOLUME_MIN;
		// go up one step (volume goes inverse with value)
		else
			mp3_volume+=step;
    1fec:	8b 5f       	subi	r24, 0xFB	; 251
    1fee:	80 93 08 01 	sts	0x0108, r24
    1ff2:	c8 2f       	mov	r28, r24

// Sends the hardware command, assumes MP3 is connected to suart2 on the MarcDuino
void mp3_send_command_byte(char command)
{
	// sends a single byte at a time
	suart2_putc(command);
    1ff4:	86 e7       	ldi	r24, 0x76	; 118
    1ff6:	0e 94 80 33 	call	0x6700	; 0x6700 <suart2_putc>
    1ffa:	8c 2f       	mov	r24, r28
		// go up one step (volume goes inverse with value)
		else
			mp3_volume+=step;
	}
	mp3_setvolume(mp3_volume);
}
    1ffc:	cf 91       	pop	r28

// Sends the hardware command, assumes MP3 is connected to suart2 on the MarcDuino
void mp3_send_command_byte(char command)
{
	// sends a single byte at a time
	suart2_putc(command);
    1ffe:	0c 94 80 33 	jmp	0x6700	; 0x6700 <suart2_putc>

void mp3_volumedown()
{
	uint8_t step=(MP3_VOLUME_MIN-MP3_VOLUME_MAX)/MP3_VOLUME_STEPS;
	// volume was set to off, or ended up too low
	if(mp3_volume>MP3_VOLUME_MIN) mp3_volume=MP3_VOLUME_MIN;
    2002:	84 e6       	ldi	r24, 0x64	; 100
    2004:	80 93 08 01 	sts	0x0108, r24
    2008:	c4 e6       	ldi	r28, 0x64	; 100

// Sends the hardware command, assumes MP3 is connected to suart2 on the MarcDuino
void mp3_send_command_byte(char command)
{
	// sends a single byte at a time
	suart2_putc(command);
    200a:	86 e7       	ldi	r24, 0x76	; 118
    200c:	0e 94 80 33 	call	0x6700	; 0x6700 <suart2_putc>
    2010:	8c 2f       	mov	r24, r28
		// go up one step (volume goes inverse with value)
		else
			mp3_volume+=step;
	}
	mp3_setvolume(mp3_volume);
}
    2012:	cf 91       	pop	r28

// Sends the hardware command, assumes MP3 is connected to suart2 on the MarcDuino
void mp3_send_command_byte(char command)
{
	// sends a single byte at a time
	suart2_putc(command);
    2014:	0c 94 80 33 	jmp	0x6700	; 0x6700 <suart2_putc>

00002018 <mp3_volumemid>:
	mp3_setvolume(mp3_volume);
}

void mp3_volumemid()
{
	mp3_volume=MP3_VOLUME_MID;
    2018:	82 e3       	ldi	r24, 0x32	; 50
    201a:	80 93 08 01 	sts	0x0108, r24

// Sends the hardware command, assumes MP3 is connected to suart2 on the MarcDuino
void mp3_send_command_byte(char command)
{
	// sends a single byte at a time
	suart2_putc(command);
    201e:	86 e7       	ldi	r24, 0x76	; 118
    2020:	0e 94 80 33 	call	0x6700	; 0x6700 <suart2_putc>
    2024:	82 e3       	ldi	r24, 0x32	; 50
    2026:	0c 94 80 33 	jmp	0x6700	; 0x6700 <suart2_putc>

0000202a <mp3_volumeoff>:
	mp3_setvolume(mp3_volume);
}

void mp3_volumeoff()
{
	mp3_volume=MP3_VOLUME_OFF;
    202a:	8e ef       	ldi	r24, 0xFE	; 254
    202c:	80 93 08 01 	sts	0x0108, r24

// Sends the hardware command, assumes MP3 is connected to suart2 on the MarcDuino
void mp3_send_command_byte(char command)
{
	// sends a single byte at a time
	suart2_putc(command);
    2030:	86 e7       	ldi	r24, 0x76	; 118
    2032:	0e 94 80 33 	call	0x6700	; 0x6700 <suart2_putc>
    2036:	8e ef       	ldi	r24, 0xFE	; 254
    2038:	0c 94 80 33 	jmp	0x6700	; 0x6700 <suart2_putc>

0000203c <mp3_volumemax>:

}

void mp3_volumemax()
{
	mp3_volume=MP3_VOLUME_MAX;
    203c:	10 92 08 01 	sts	0x0108, r1

// Sends the hardware command, assumes MP3 is connected to suart2 on the MarcDuino
void mp3_send_command_byte(char command)
{
	// sends a single byte at a time
	suart2_putc(command);
    2040:	86 e7       	ldi	r24, 0x76	; 118
    2042:	0e 94 80 33 	call	0x6700	; 0x6700 <suart2_putc>
    2046:	80 e0       	ldi	r24, 0x00	; 0
    2048:	0c 94 80 33 	jmp	0x6700	; 0x6700 <suart2_putc>

0000204c <mp3_volumemin>:
	mp3_setvolume(mp3_volume);
}

void mp3_volumemin()
{
	mp3_volume=MP3_VOLUME_MIN;
    204c:	84 e6       	ldi	r24, 0x64	; 100
    204e:	80 93 08 01 	sts	0x0108, r24

// Sends the hardware command, assumes MP3 is connected to suart2 on the MarcDuino
void mp3_send_command_byte(char command)
{
	// sends a single byte at a time
	suart2_putc(command);
    2052:	86 e7       	ldi	r24, 0x76	; 118
    2054:	0e 94 80 33 	call	0x6700	; 0x6700 <suart2_putc>
    2058:	84 e6       	ldi	r24, 0x64	; 100
    205a:	0c 94 80 33 	jmp	0x6700	; 0x6700 <suart2_putc>

0000205e <mp3_setvolume>:
	mp3_volume=MP3_VOLUME_MIN;
	mp3_setvolume(mp3_volume);
}

void mp3_setvolume(uint8_t vol)
{
    205e:	cf 93       	push	r28
    2060:	c8 2f       	mov	r28, r24

// Sends the hardware command, assumes MP3 is connected to suart2 on the MarcDuino
void mp3_send_command_byte(char command)
{
	// sends a single byte at a time
	suart2_putc(command);
    2062:	86 e7       	ldi	r24, 0x76	; 118
    2064:	0e 94 80 33 	call	0x6700	; 0x6700 <suart2_putc>
    2068:	8c 2f       	mov	r24, r28
	printstr("MP3 Volume: ");
	printchar(MP3_VOLUME_CMD);
	printchar(' ');
	printlnuint(vol);
#endif
}
    206a:	cf 91       	pop	r28

// Sends the hardware command, assumes MP3 is connected to suart2 on the MarcDuino
void mp3_send_command_byte(char command)
{
	// sends a single byte at a time
	suart2_putc(command);
    206c:	0c 94 80 33 	jmp	0x6700	; 0x6700 <suart2_putc>

00002070 <fifo_init>:


#include "fifo.h"

void fifo_init (fifo_t *f, uint8_t *buffer, const uint8_t size)
{
    2070:	fc 01       	movw	r30, r24
	f->count = 0;
    2072:	10 82       	st	Z, r1
	f->pread = f->pwrite = buffer;
    2074:	75 83       	std	Z+5, r23	; 0x05
    2076:	64 83       	std	Z+4, r22	; 0x04
    2078:	73 83       	std	Z+3, r23	; 0x03
    207a:	62 83       	std	Z+2, r22	; 0x02
	f->read2end = f->write2end = f->size = size;
    207c:	41 83       	std	Z+1, r20	; 0x01
    207e:	47 83       	std	Z+7, r20	; 0x07
    2080:	46 83       	std	Z+6, r20	; 0x06
    2082:	08 95       	ret

00002084 <fifo_put>:
}

uint8_t fifo_put (fifo_t *f, const uint8_t data)
{
    2084:	fc 01       	movw	r30, r24
// add a character to the buffer
static inline uint8_t
_inline_fifo_put (fifo_t *f, const uint8_t data)
{
	// return if no more space
	if (f->count >= f->size)
    2086:	90 81       	ld	r25, Z
    2088:	81 81       	ldd	r24, Z+1	; 0x01
    208a:	98 17       	cp	r25, r24
    208c:	b0 f4       	brcc	.+44     	; 0x20ba <fifo_put+0x36>
		return 0;
	// get the write pointer
	uint8_t * pwrite = f->pwrite;
    208e:	a4 81       	ldd	r26, Z+4	; 0x04
    2090:	b5 81       	ldd	r27, Z+5	; 0x05
	// write the byte, THEN move pointer to the next position
	*(pwrite++) = data;
    2092:	cd 01       	movw	r24, r26
    2094:	01 96       	adiw	r24, 0x01	; 1
    2096:	6c 93       	st	X, r22
	// get the numbers of bytes left till end of buffer
	uint8_t write2end = f->write2end;
    2098:	27 81       	ldd	r18, Z+7	; 0x07
	// decrement numbers of bytes left, THEN test for none left
	if (--write2end == 0)
    209a:	21 50       	subi	r18, 0x01	; 1
    209c:	19 f4       	brne	.+6      	; 0x20a4 <fifo_put+0x20>
	{
		// if end of linear buffer, rewind at beginning of buffer (this is implemented as a circular buffer)
		write2end = f->size;	// size to end of linear buffer
    209e:	21 81       	ldd	r18, Z+1	; 0x01
		pwrite -= write2end;	// rewind the write pointer to the beginning
    20a0:	82 1b       	sub	r24, r18
    20a2:	91 09       	sbc	r25, r1
	}
	
	// store updated values of write pointers and write to end # of bytes
	f->write2end = write2end;
    20a4:	27 83       	std	Z+7, r18	; 0x07
	f->pwrite = pwrite;
    20a6:	95 83       	std	Z+5, r25	; 0x05
    20a8:	84 83       	std	Z+4, r24	; 0x04

	// block interrupts while we update count, so it does not change in interrupt context while we read it
	uint8_t sreg = SREG;	// save status register
    20aa:	9f b7       	in	r25, 0x3f	; 63
	cli();					// no interrupts
    20ac:	f8 94       	cli
	f->count++;				// update count, we stored one more byte
    20ae:	80 81       	ld	r24, Z
    20b0:	8f 5f       	subi	r24, 0xFF	; 255
    20b2:	80 83       	st	Z, r24
	SREG = sreg;			// reset status register
    20b4:	9f bf       	out	0x3f, r25	; 63
							// ? no sei() code to re-enable interrupts. Or is the compiler putting one?
	return 1;
    20b6:	81 e0       	ldi	r24, 0x01	; 1
    20b8:	08 95       	ret
static inline uint8_t
_inline_fifo_put (fifo_t *f, const uint8_t data)
{
	// return if no more space
	if (f->count >= f->size)
		return 0;
    20ba:	80 e0       	ldi	r24, 0x00	; 0
	return _inline_fifo_put (f, data);
}
    20bc:	08 95       	ret

000020be <fifo_get_wait>:

uint8_t fifo_get_wait (fifo_t *f)
{
    20be:	fc 01       	movw	r30, r24
	while (!f->count);
    20c0:	80 81       	ld	r24, Z
    20c2:	88 23       	and	r24, r24
    20c4:	e9 f3       	breq	.-6      	; 0x20c0 <fifo_get_wait+0x2>
// read a character from the buffer
static inline uint8_t 
_inline_fifo_get (fifo_t *f)
{
	// get the read pointer
	uint8_t *pread = f->pread;
    20c6:	a2 81       	ldd	r26, Z+2	; 0x02
    20c8:	b3 81       	ldd	r27, Z+3	; 0x03
	// read the data, THEN advance the pointer
	uint8_t data = *(pread++);
    20ca:	9d 01       	movw	r18, r26
    20cc:	2f 5f       	subi	r18, 0xFF	; 255
    20ce:	3f 4f       	sbci	r19, 0xFF	; 255
    20d0:	8c 91       	ld	r24, X
	// get the size till end number
	uint8_t read2end = f->read2end;
    20d2:	96 81       	ldd	r25, Z+6	; 0x06
	
	// decrement size, THEN test no space left
	if (--read2end == 0)
    20d4:	91 50       	subi	r25, 0x01	; 1
    20d6:	19 f4       	brne	.+6      	; 0x20de <fifo_get_wait+0x20>
	{
		// if end of linear buffer, rewind to beginning (circular buffer)
		read2end = f->size;	// full buffer available for read
    20d8:	91 81       	ldd	r25, Z+1	; 0x01
		pread -= read2end;	// move read pointer to beginning
    20da:	29 1b       	sub	r18, r25
    20dc:	31 09       	sbc	r19, r1
	}
	
	// update the read pointer and read2end values
	f->pread = pread;
    20de:	33 83       	std	Z+3, r19	; 0x03
    20e0:	22 83       	std	Z+2, r18	; 0x02
	f->read2end = read2end;
    20e2:	96 83       	std	Z+6, r25	; 0x06
	
	// update count, making sure that nobody elses accesses it in interrupt
	uint8_t sreg = SREG;
    20e4:	2f b7       	in	r18, 0x3f	; 63
	cli();
    20e6:	f8 94       	cli
	f->count--;
    20e8:	90 81       	ld	r25, Z
    20ea:	91 50       	subi	r25, 0x01	; 1
    20ec:	90 83       	st	Z, r25
	SREG = sreg;
    20ee:	2f bf       	out	0x3f, r18	; 63
	
	return _inline_fifo_get (f);	
}
    20f0:	08 95       	ret

000020f2 <fifo_get_nowait>:

// uses -1 (0xFF) as error code for empty. Maybe I want to change that with an available function.
int fifo_get_nowait (fifo_t *f)
{
    20f2:	fc 01       	movw	r30, r24
	if (!f->count)		return -1;
    20f4:	80 81       	ld	r24, Z
    20f6:	88 23       	and	r24, r24
    20f8:	b9 f0       	breq	.+46     	; 0x2128 <fifo_get_nowait+0x36>
// read a character from the buffer
static inline uint8_t 
_inline_fifo_get (fifo_t *f)
{
	// get the read pointer
	uint8_t *pread = f->pread;
    20fa:	a2 81       	ldd	r26, Z+2	; 0x02
    20fc:	b3 81       	ldd	r27, Z+3	; 0x03
	// read the data, THEN advance the pointer
	uint8_t data = *(pread++);
    20fe:	9d 01       	movw	r18, r26
    2100:	2f 5f       	subi	r18, 0xFF	; 255
    2102:	3f 4f       	sbci	r19, 0xFF	; 255
    2104:	8c 91       	ld	r24, X
	// get the size till end number
	uint8_t read2end = f->read2end;
    2106:	96 81       	ldd	r25, Z+6	; 0x06
	
	// decrement size, THEN test no space left
	if (--read2end == 0)
    2108:	91 50       	subi	r25, 0x01	; 1
    210a:	19 f4       	brne	.+6      	; 0x2112 <fifo_get_nowait+0x20>
	{
		// if end of linear buffer, rewind to beginning (circular buffer)
		read2end = f->size;	// full buffer available for read
    210c:	91 81       	ldd	r25, Z+1	; 0x01
		pread -= read2end;	// move read pointer to beginning
    210e:	29 1b       	sub	r18, r25
    2110:	31 09       	sbc	r19, r1
	}
	
	// update the read pointer and read2end values
	f->pread = pread;
    2112:	33 83       	std	Z+3, r19	; 0x03
    2114:	22 83       	std	Z+2, r18	; 0x02
	f->read2end = read2end;
    2116:	96 83       	std	Z+6, r25	; 0x06
	
	// update count, making sure that nobody elses accesses it in interrupt
	uint8_t sreg = SREG;
    2118:	2f b7       	in	r18, 0x3f	; 63
	cli();
    211a:	f8 94       	cli
	f->count--;
    211c:	90 81       	ld	r25, Z
    211e:	91 50       	subi	r25, 0x01	; 1
    2120:	90 83       	st	Z, r25
	SREG = sreg;
    2122:	2f bf       	out	0x3f, r18	; 63
		
	return (int) _inline_fifo_get (f);	
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	08 95       	ret
}

// uses -1 (0xFF) as error code for empty. Maybe I want to change that with an available function.
int fifo_get_nowait (fifo_t *f)
{
	if (!f->count)		return -1;
    2128:	8f ef       	ldi	r24, 0xFF	; 255
    212a:	9f ef       	ldi	r25, 0xFF	; 255
		
	return (int) _inline_fifo_get (f);	
}
    212c:	08 95       	ret

0000212e <fifo_available>:

// available function would look like this
int fifo_available(fifo_t *f)
{
	 if(f->count) return 1;
    212e:	fc 01       	movw	r30, r24
    2130:	20 81       	ld	r18, Z
    2132:	81 e0       	ldi	r24, 0x01	; 1
    2134:	90 e0       	ldi	r25, 0x00	; 0
    2136:	21 11       	cpse	r18, r1
    2138:	02 c0       	rjmp	.+4      	; 0x213e <fifo_available+0x10>
    213a:	80 e0       	ldi	r24, 0x00	; 0
    213c:	90 e0       	ldi	r25, 0x00	; 0
	 else return 0;
}
    213e:	08 95       	ret

00002140 <i2c_status>:
 * Returns status code of last i2c operation
 * **************/
uint8_t i2c_status()
{
	return i2c_status_;
}
    2140:	80 91 53 02 	lds	r24, 0x0253
    2144:	08 95       	ret

00002146 <i2c_init>:
 * For large systems, you might need to use external 4.7k
 * ********************/
void i2c_init(bool enablePullup)
{

	TWSR = 0;                         // no prescaler
    2146:	10 92 b9 00 	sts	0x00B9, r1
	TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  // must be > 10 for stable operation
    214a:	98 e4       	ldi	r25, 0x48	; 72
    214c:	90 93 b8 00 	sts	0x00B8, r25

	// internal pull-up resistor support if we happen to know the correct pins
#ifdef I2C_SDA_PIN
	if (enablePullup)
    2150:	88 23       	and	r24, r24
    2152:	11 f0       	breq	.+4      	; 0x2158 <i2c_init+0x12>
	{
		set_port_pin(I2C_PORT,I2C_SDA_PIN);
    2154:	44 9a       	sbi	0x08, 4	; 8
		set_port_pin(I2C_PORT,I2C_SCL_PIN);
    2156:	45 9a       	sbi	0x08, 5	; 8
	}
#endif

	// Load data register with default content; release SDA
	TWDR = 0xff;
    2158:	8f ef       	ldi	r24, 0xFF	; 255
    215a:	80 93 bb 00 	sts	0x00BB, r24

	// Enable TWI peripheral with interrupt disabled (set TWEN bit on)
	TWCR = (0<<TWINT)|(0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|(0<<TWWC)|(1<<TWEN)|(0<<TWIE);
    215e:	84 e0       	ldi	r24, 0x04	; 4
    2160:	80 93 bc 00 	sts	0x00BC, r24

#ifdef I2C_TIMEOUT_ENABLED
	rt_add_timer(&rt_timeout_i2c);
    2164:	89 e9       	ldi	r24, 0x99	; 153
    2166:	92 e0       	ldi	r25, 0x02	; 2
    2168:	0c 94 d0 22 	jmp	0x45a0	; 0x45a0 <rt_add_timer>

0000216c <i2c_close>:
 * use this function to turn off the i2c transmitter
 * ********************/
void i2c_close()
{
	// Disable i2c
	TWCR = 0x00;
    216c:	10 92 bc 00 	sts	0x00BC, r1
    2170:	08 95       	ret

00002172 <i2c_start>:
 * Performs a TWI operation, waits for completion and updates status
 * If timeout control is enabled, will return error (TRUE) on timeout
 *****************/
static bool i2c_execCmd(uint8_t cmdReg) {
	// send command
	TWCR = cmdReg;
    2172:	94 ea       	ldi	r25, 0xA4	; 164
    2174:	90 93 bc 00 	sts	0x00BC, r25
	// status bits.
	i2c_status_ = TWSR & 0xF8;
	return FALSE;
#else
	// wait for command to complete with timeout
	rt_timeout_i2c=I2C_TIMEOUT; 	// initialize timer
    2178:	22 e3       	ldi	r18, 0x32	; 50
    217a:	30 e0       	ldi	r19, 0x00	; 0
    217c:	30 93 9a 02 	sts	0x029A, r19
    2180:	20 93 99 02 	sts	0x0299, r18
    2184:	07 c0       	rjmp	.+14     	; 0x2194 <i2c_start+0x22>
	while (!(TWCR & (1 << TWINT)))
	{
	  if(!rt_timeout_i2c)	// bus is hanged, we timed out
    2186:	20 91 99 02 	lds	r18, 0x0299
    218a:	30 91 9a 02 	lds	r19, 0x029A
    218e:	23 2b       	or	r18, r19
    2190:	09 f4       	brne	.+2      	; 0x2194 <i2c_start+0x22>
    2192:	68 c0       	rjmp	.+208    	; 0x2264 <i2c_start+0xf2>
	i2c_status_ = TWSR & 0xF8;
	return FALSE;
#else
	// wait for command to complete with timeout
	rt_timeout_i2c=I2C_TIMEOUT; 	// initialize timer
	while (!(TWCR & (1 << TWINT)))
    2194:	90 91 bc 00 	lds	r25, 0x00BC
    2198:	97 ff       	sbrs	r25, 7
    219a:	f5 cf       	rjmp	.-22     	; 0x2186 <i2c_start+0x14>
			// return with error
			return TRUE;
	  }
	}
	// return with no error
	i2c_status_ = TWSR & 0xF8;
    219c:	90 91 b9 00 	lds	r25, 0x00B9
    21a0:	98 7f       	andi	r25, 0xF8	; 248
    21a2:	90 93 53 02 	sts	0x0253, r25
		i2c_stop();
		return TRUE;
	}

	// return error if the bus is busy
	if (i2c_status() != TW_START && i2c_status() != TW_REP_START)
    21a6:	98 30       	cpi	r25, 0x08	; 8
    21a8:	19 f0       	breq	.+6      	; 0x21b0 <i2c_start+0x3e>
    21aa:	90 31       	cpi	r25, 0x10	; 16
    21ac:	09 f0       	breq	.+2      	; 0x21b0 <i2c_start+0x3e>
    21ae:	3f c0       	rjmp	.+126    	; 0x222e <i2c_start+0xbc>
		return TRUE;
	}

	// send device address and direction byte
	//TWDR = (address<<1 | (readwrite & 0x01));
	TWDR = (address<<1 | readwrite);
    21b0:	88 0f       	add	r24, r24
    21b2:	86 2b       	or	r24, r22
    21b4:	80 93 bb 00 	sts	0x00BB, r24
 * Performs a TWI operation, waits for completion and updates status
 * If timeout control is enabled, will return error (TRUE) on timeout
 *****************/
static bool i2c_execCmd(uint8_t cmdReg) {
	// send command
	TWCR = cmdReg;
    21b8:	84 e8       	ldi	r24, 0x84	; 132
    21ba:	80 93 bc 00 	sts	0x00BC, r24
	// status bits.
	i2c_status_ = TWSR & 0xF8;
	return FALSE;
#else
	// wait for command to complete with timeout
	rt_timeout_i2c=I2C_TIMEOUT; 	// initialize timer
    21be:	82 e3       	ldi	r24, 0x32	; 50
    21c0:	90 e0       	ldi	r25, 0x00	; 0
    21c2:	90 93 9a 02 	sts	0x029A, r25
    21c6:	80 93 99 02 	sts	0x0299, r24
    21ca:	07 c0       	rjmp	.+14     	; 0x21da <i2c_start+0x68>
	while (!(TWCR & (1 << TWINT)))
	{
	  if(!rt_timeout_i2c)	// bus is hanged, we timed out
    21cc:	80 91 99 02 	lds	r24, 0x0299
    21d0:	90 91 9a 02 	lds	r25, 0x029A
    21d4:	89 2b       	or	r24, r25
    21d6:	09 f4       	brne	.+2      	; 0x21da <i2c_start+0x68>
    21d8:	65 c0       	rjmp	.+202    	; 0x22a4 <i2c_start+0x132>
	i2c_status_ = TWSR & 0xF8;
	return FALSE;
#else
	// wait for command to complete with timeout
	rt_timeout_i2c=I2C_TIMEOUT; 	// initialize timer
	while (!(TWCR & (1 << TWINT)))
    21da:	80 91 bc 00 	lds	r24, 0x00BC
    21de:	87 ff       	sbrs	r24, 7
    21e0:	f5 cf       	rjmp	.-22     	; 0x21cc <i2c_start+0x5a>
			// return with error
			return TRUE;
	  }
	}
	// return with no error
	i2c_status_ = TWSR & 0xF8;
    21e2:	80 91 b9 00 	lds	r24, 0x00B9
    21e6:	88 7f       	andi	r24, 0xF8	; 248
    21e8:	80 93 53 02 	sts	0x0253, r24
		i2c_stop();
		return TRUE;
	}

	// make sure to release the bus if there is an error other than bus timeout
	if (readwrite == TW_READ)
    21ec:	61 30       	cpi	r22, 0x01	; 1
    21ee:	09 f4       	brne	.+2      	; 0x21f2 <i2c_start+0x80>
    21f0:	76 c0       	rjmp	.+236    	; 0x22de <i2c_start+0x16c>
			return TRUE;
		}
	}
	else
	{
		if(i2c_status() != TW_MT_SLA_ACK)
    21f2:	88 31       	cpi	r24, 0x18	; 24
    21f4:	09 f4       	brne	.+2      	; 0x21f8 <i2c_start+0x86>
    21f6:	71 c0       	rjmp	.+226    	; 0x22da <i2c_start+0x168>
 * Release the bus
 * ***********************/
bool i2c_stop()
{
	// send stop, no time out
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
    21f8:	84 e9       	ldi	r24, 0x94	; 148
    21fa:	80 93 bc 00 	sts	0x00BC, r24
	while (TWCR & (1 << TWSTO));
	i2c_status_ = TWSR & 0xF8;
	return FALSE;
#else
	// wait for stop to complete with timeout
	rt_timeout_i2c=I2C_TIMEOUT; 	// initialize timer
    21fe:	82 e3       	ldi	r24, 0x32	; 50
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	90 93 9a 02 	sts	0x029A, r25
    2206:	80 93 99 02 	sts	0x0299, r24
    220a:	06 c0       	rjmp	.+12     	; 0x2218 <i2c_start+0xa6>
	while (TWCR & (1 << TWSTO))
	{
	  if(!rt_timeout_i2c)	// bus is hanged, we timed out
    220c:	80 91 99 02 	lds	r24, 0x0299
    2210:	90 91 9a 02 	lds	r25, 0x029A
    2214:	89 2b       	or	r24, r25
    2216:	21 f0       	breq	.+8      	; 0x2220 <i2c_start+0xae>
	i2c_status_ = TWSR & 0xF8;
	return FALSE;
#else
	// wait for stop to complete with timeout
	rt_timeout_i2c=I2C_TIMEOUT; 	// initialize timer
	while (TWCR & (1 << TWSTO))
    2218:	80 91 bc 00 	lds	r24, 0x00BC
    221c:	84 fd       	sbrc	r24, 4
    221e:	f6 cf       	rjmp	.-20     	; 0x220c <i2c_start+0x9a>
			i2c_status_ = TWSR & 0xF8;
			return TRUE;
	  }
	}
	// return with no error
	i2c_status_ = TWSR & 0xF8;
    2220:	80 91 b9 00 	lds	r24, 0x00B9
    2224:	88 7f       	andi	r24, 0xF8	; 248
    2226:	80 93 53 02 	sts	0x0253, r24
		{
			#ifdef I2C_DEBUG
			uart0_puts("**i2c start TRANSMIT ACK failed \n\r");
			#endif
			i2c_stop();
			return TRUE;
    222a:	81 e0       	ldi	r24, 0x01	; 1
    222c:	08 95       	ret
 * Release the bus
 * ***********************/
bool i2c_stop()
{
	// send stop, no time out
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
    222e:	84 e9       	ldi	r24, 0x94	; 148
    2230:	80 93 bc 00 	sts	0x00BC, r24
	while (TWCR & (1 << TWSTO));
	i2c_status_ = TWSR & 0xF8;
	return FALSE;
#else
	// wait for stop to complete with timeout
	rt_timeout_i2c=I2C_TIMEOUT; 	// initialize timer
    2234:	82 e3       	ldi	r24, 0x32	; 50
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	90 93 9a 02 	sts	0x029A, r25
    223c:	80 93 99 02 	sts	0x0299, r24
    2240:	06 c0       	rjmp	.+12     	; 0x224e <i2c_start+0xdc>
	while (TWCR & (1 << TWSTO))
	{
	  if(!rt_timeout_i2c)	// bus is hanged, we timed out
    2242:	80 91 99 02 	lds	r24, 0x0299
    2246:	90 91 9a 02 	lds	r25, 0x029A
    224a:	89 2b       	or	r24, r25
    224c:	49 f3       	breq	.-46     	; 0x2220 <i2c_start+0xae>
	i2c_status_ = TWSR & 0xF8;
	return FALSE;
#else
	// wait for stop to complete with timeout
	rt_timeout_i2c=I2C_TIMEOUT; 	// initialize timer
	while (TWCR & (1 << TWSTO))
    224e:	80 91 bc 00 	lds	r24, 0x00BC
    2252:	84 fd       	sbrc	r24, 4
    2254:	f6 cf       	rjmp	.-20     	; 0x2242 <i2c_start+0xd0>
			i2c_status_ = TWSR & 0xF8;
			return TRUE;
	  }
	}
	// return with no error
	i2c_status_ = TWSR & 0xF8;
    2256:	80 91 b9 00 	lds	r24, 0x00B9
    225a:	88 7f       	andi	r24, 0xF8	; 248
    225c:	80 93 53 02 	sts	0x0253, r24
		{
			#ifdef I2C_DEBUG
			uart0_puts("**i2c start TRANSMIT ACK failed \n\r");
			#endif
			i2c_stop();
			return TRUE;
    2260:	81 e0       	ldi	r24, 0x01	; 1
    2262:	08 95       	ret
	  {
			#ifdef I2C_DEBUG
			uart0_puts("**i2c bus timed out \n\r");
			#endif
			// status bits.
			i2c_status_ = TWSR & 0xF8;
    2264:	80 91 b9 00 	lds	r24, 0x00B9
    2268:	88 7f       	andi	r24, 0xF8	; 248
    226a:	80 93 53 02 	sts	0x0253, r24
 * Release the bus
 * ***********************/
bool i2c_stop()
{
	// send stop, no time out
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
    226e:	84 e9       	ldi	r24, 0x94	; 148
    2270:	80 93 bc 00 	sts	0x00BC, r24
	while (TWCR & (1 << TWSTO));
	i2c_status_ = TWSR & 0xF8;
	return FALSE;
#else
	// wait for stop to complete with timeout
	rt_timeout_i2c=I2C_TIMEOUT; 	// initialize timer
    2274:	82 e3       	ldi	r24, 0x32	; 50
    2276:	90 e0       	ldi	r25, 0x00	; 0
    2278:	90 93 9a 02 	sts	0x029A, r25
    227c:	80 93 99 02 	sts	0x0299, r24
    2280:	06 c0       	rjmp	.+12     	; 0x228e <i2c_start+0x11c>
	while (TWCR & (1 << TWSTO))
	{
	  if(!rt_timeout_i2c)	// bus is hanged, we timed out
    2282:	80 91 99 02 	lds	r24, 0x0299
    2286:	90 91 9a 02 	lds	r25, 0x029A
    228a:	89 2b       	or	r24, r25
    228c:	49 f2       	breq	.-110    	; 0x2220 <i2c_start+0xae>
	i2c_status_ = TWSR & 0xF8;
	return FALSE;
#else
	// wait for stop to complete with timeout
	rt_timeout_i2c=I2C_TIMEOUT; 	// initialize timer
	while (TWCR & (1 << TWSTO))
    228e:	80 91 bc 00 	lds	r24, 0x00BC
    2292:	84 fd       	sbrc	r24, 4
    2294:	f6 cf       	rjmp	.-20     	; 0x2282 <i2c_start+0x110>
			i2c_status_ = TWSR & 0xF8;
			return TRUE;
	  }
	}
	// return with no error
	i2c_status_ = TWSR & 0xF8;
    2296:	80 91 b9 00 	lds	r24, 0x00B9
    229a:	88 7f       	andi	r24, 0xF8	; 248
    229c:	80 93 53 02 	sts	0x0253, r24
		{
			#ifdef I2C_DEBUG
			uart0_puts("**i2c start TRANSMIT ACK failed \n\r");
			#endif
			i2c_stop();
			return TRUE;
    22a0:	81 e0       	ldi	r24, 0x01	; 1
    22a2:	08 95       	ret
	  {
			#ifdef I2C_DEBUG
			uart0_puts("**i2c bus timed out \n\r");
			#endif
			// status bits.
			i2c_status_ = TWSR & 0xF8;
    22a4:	80 91 b9 00 	lds	r24, 0x00B9
    22a8:	88 7f       	andi	r24, 0xF8	; 248
    22aa:	80 93 53 02 	sts	0x0253, r24
 * Release the bus
 * ***********************/
bool i2c_stop()
{
	// send stop, no time out
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
    22ae:	84 e9       	ldi	r24, 0x94	; 148
    22b0:	80 93 bc 00 	sts	0x00BC, r24
	while (TWCR & (1 << TWSTO));
	i2c_status_ = TWSR & 0xF8;
	return FALSE;
#else
	// wait for stop to complete with timeout
	rt_timeout_i2c=I2C_TIMEOUT; 	// initialize timer
    22b4:	82 e3       	ldi	r24, 0x32	; 50
    22b6:	90 e0       	ldi	r25, 0x00	; 0
    22b8:	90 93 9a 02 	sts	0x029A, r25
    22bc:	80 93 99 02 	sts	0x0299, r24
    22c0:	07 c0       	rjmp	.+14     	; 0x22d0 <i2c_start+0x15e>
	while (TWCR & (1 << TWSTO))
	{
	  if(!rt_timeout_i2c)	// bus is hanged, we timed out
    22c2:	80 91 99 02 	lds	r24, 0x0299
    22c6:	90 91 9a 02 	lds	r25, 0x029A
    22ca:	89 2b       	or	r24, r25
    22cc:	09 f4       	brne	.+2      	; 0x22d0 <i2c_start+0x15e>
    22ce:	a8 cf       	rjmp	.-176    	; 0x2220 <i2c_start+0xae>
	i2c_status_ = TWSR & 0xF8;
	return FALSE;
#else
	// wait for stop to complete with timeout
	rt_timeout_i2c=I2C_TIMEOUT; 	// initialize timer
	while (TWCR & (1 << TWSTO))
    22d0:	80 91 bc 00 	lds	r24, 0x00BC
    22d4:	84 fd       	sbrc	r24, 4
    22d6:	f5 cf       	rjmp	.-22     	; 0x22c2 <i2c_start+0x150>
    22d8:	a3 cf       	rjmp	.-186    	; 0x2220 <i2c_start+0xae>
			#endif
			i2c_stop();
			return TRUE;
		}
	}
	return FALSE;
    22da:	80 e0       	ldi	r24, 0x00	; 0
}
    22dc:	08 95       	ret
	}

	// make sure to release the bus if there is an error other than bus timeout
	if (readwrite == TW_READ)
	{
		if(i2c_status() != TW_MR_SLA_ACK)
    22de:	80 34       	cpi	r24, 0x40	; 64
    22e0:	e1 f3       	breq	.-8      	; 0x22da <i2c_start+0x168>
 * Release the bus
 * ***********************/
bool i2c_stop()
{
	// send stop, no time out
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
    22e2:	84 e9       	ldi	r24, 0x94	; 148
    22e4:	80 93 bc 00 	sts	0x00BC, r24
	while (TWCR & (1 << TWSTO));
	i2c_status_ = TWSR & 0xF8;
	return FALSE;
#else
	// wait for stop to complete with timeout
	rt_timeout_i2c=I2C_TIMEOUT; 	// initialize timer
    22e8:	82 e3       	ldi	r24, 0x32	; 50
    22ea:	90 e0       	ldi	r25, 0x00	; 0
    22ec:	90 93 9a 02 	sts	0x029A, r25
    22f0:	80 93 99 02 	sts	0x0299, r24
    22f4:	07 c0       	rjmp	.+14     	; 0x2304 <i2c_start+0x192>
	while (TWCR & (1 << TWSTO))
	{
	  if(!rt_timeout_i2c)	// bus is hanged, we timed out
    22f6:	80 91 99 02 	lds	r24, 0x0299
    22fa:	90 91 9a 02 	lds	r25, 0x029A
    22fe:	89 2b       	or	r24, r25
    2300:	09 f4       	brne	.+2      	; 0x2304 <i2c_start+0x192>
    2302:	8e cf       	rjmp	.-228    	; 0x2220 <i2c_start+0xae>
	i2c_status_ = TWSR & 0xF8;
	return FALSE;
#else
	// wait for stop to complete with timeout
	rt_timeout_i2c=I2C_TIMEOUT; 	// initialize timer
	while (TWCR & (1 << TWSTO))
    2304:	80 91 bc 00 	lds	r24, 0x00BC
    2308:	84 fd       	sbrc	r24, 4
    230a:	f5 cf       	rjmp	.-22     	; 0x22f6 <i2c_start+0x184>
    230c:	89 cf       	rjmp	.-238    	; 0x2220 <i2c_start+0xae>

0000230e <i2c_stop>:
 * Release the bus
 * ***********************/
bool i2c_stop()
{
	// send stop, no time out
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
    230e:	84 e9       	ldi	r24, 0x94	; 148
    2310:	80 93 bc 00 	sts	0x00BC, r24
	while (TWCR & (1 << TWSTO));
	i2c_status_ = TWSR & 0xF8;
	return FALSE;
#else
	// wait for stop to complete with timeout
	rt_timeout_i2c=I2C_TIMEOUT; 	// initialize timer
    2314:	82 e3       	ldi	r24, 0x32	; 50
    2316:	90 e0       	ldi	r25, 0x00	; 0
    2318:	90 93 9a 02 	sts	0x029A, r25
    231c:	80 93 99 02 	sts	0x0299, r24
	while (TWCR & (1 << TWSTO))
    2320:	06 c0       	rjmp	.+12     	; 0x232e <i2c_stop+0x20>
	{
	  if(!rt_timeout_i2c)	// bus is hanged, we timed out
    2322:	80 91 99 02 	lds	r24, 0x0299
    2326:	90 91 9a 02 	lds	r25, 0x029A
    232a:	89 2b       	or	r24, r25
    232c:	59 f0       	breq	.+22     	; 0x2344 <i2c_stop+0x36>
	i2c_status_ = TWSR & 0xF8;
	return FALSE;
#else
	// wait for stop to complete with timeout
	rt_timeout_i2c=I2C_TIMEOUT; 	// initialize timer
	while (TWCR & (1 << TWSTO))
    232e:	80 91 bc 00 	lds	r24, 0x00BC
    2332:	84 fd       	sbrc	r24, 4
    2334:	f6 cf       	rjmp	.-20     	; 0x2322 <i2c_stop+0x14>
			i2c_status_ = TWSR & 0xF8;
			return TRUE;
	  }
	}
	// return with no error
	i2c_status_ = TWSR & 0xF8;
    2336:	80 91 b9 00 	lds	r24, 0x00B9
    233a:	88 7f       	andi	r24, 0xF8	; 248
    233c:	80 93 53 02 	sts	0x0253, r24
	return FALSE;
    2340:	80 e0       	ldi	r24, 0x00	; 0
#endif
}
    2342:	08 95       	ret
	  {
			#ifdef I2C_DEBUG
			uart0_puts("**i2c bus timed out in stop \n\r");
			#endif
			// return with error
			i2c_status_ = TWSR & 0xF8;
    2344:	80 91 b9 00 	lds	r24, 0x00B9
    2348:	88 7f       	andi	r24, 0xF8	; 248
    234a:	80 93 53 02 	sts	0x0253, r24
    234e:	81 e0       	ldi	r24, 0x01	; 1
    2350:	08 95       	ret

00002352 <i2c_write>:
 * ***********************/
bool i2c_write(uint8_t databyte)
{

	// write the byte on the bus
	TWDR = databyte;
    2352:	80 93 bb 00 	sts	0x00BB, r24
 * Performs a TWI operation, waits for completion and updates status
 * If timeout control is enabled, will return error (TRUE) on timeout
 *****************/
static bool i2c_execCmd(uint8_t cmdReg) {
	// send command
	TWCR = cmdReg;
    2356:	84 e8       	ldi	r24, 0x84	; 132
    2358:	80 93 bc 00 	sts	0x00BC, r24
	// status bits.
	i2c_status_ = TWSR & 0xF8;
	return FALSE;
#else
	// wait for command to complete with timeout
	rt_timeout_i2c=I2C_TIMEOUT; 	// initialize timer
    235c:	82 e3       	ldi	r24, 0x32	; 50
    235e:	90 e0       	ldi	r25, 0x00	; 0
    2360:	90 93 9a 02 	sts	0x029A, r25
    2364:	80 93 99 02 	sts	0x0299, r24
    2368:	06 c0       	rjmp	.+12     	; 0x2376 <i2c_write+0x24>
	while (!(TWCR & (1 << TWINT)))
	{
	  if(!rt_timeout_i2c)	// bus is hanged, we timed out
    236a:	80 91 99 02 	lds	r24, 0x0299
    236e:	90 91 9a 02 	lds	r25, 0x029A
    2372:	89 2b       	or	r24, r25
    2374:	31 f1       	breq	.+76     	; 0x23c2 <i2c_write+0x70>
	i2c_status_ = TWSR & 0xF8;
	return FALSE;
#else
	// wait for command to complete with timeout
	rt_timeout_i2c=I2C_TIMEOUT; 	// initialize timer
	while (!(TWCR & (1 << TWINT)))
    2376:	80 91 bc 00 	lds	r24, 0x00BC
    237a:	87 ff       	sbrs	r24, 7
    237c:	f6 cf       	rjmp	.-20     	; 0x236a <i2c_write+0x18>
			// return with error
			return TRUE;
	  }
	}
	// return with no error
	i2c_status_ = TWSR & 0xF8;
    237e:	80 91 b9 00 	lds	r24, 0x00B9
    2382:	88 7f       	andi	r24, 0xF8	; 248
    2384:	80 93 53 02 	sts	0x0253, r24
		#endif
		i2c_stop();
		return TRUE;
	}
	//in case of NACK, issue a stop, so user doesn't have to remember
	if(i2c_status() != TW_MT_DATA_ACK)
    2388:	88 32       	cpi	r24, 0x28	; 40
    238a:	d9 f1       	breq	.+118    	; 0x2402 <i2c_write+0xb0>
 * Release the bus
 * ***********************/
bool i2c_stop()
{
	// send stop, no time out
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
    238c:	84 e9       	ldi	r24, 0x94	; 148
    238e:	80 93 bc 00 	sts	0x00BC, r24
	while (TWCR & (1 << TWSTO));
	i2c_status_ = TWSR & 0xF8;
	return FALSE;
#else
	// wait for stop to complete with timeout
	rt_timeout_i2c=I2C_TIMEOUT; 	// initialize timer
    2392:	82 e3       	ldi	r24, 0x32	; 50
    2394:	90 e0       	ldi	r25, 0x00	; 0
    2396:	90 93 9a 02 	sts	0x029A, r25
    239a:	80 93 99 02 	sts	0x0299, r24
    239e:	06 c0       	rjmp	.+12     	; 0x23ac <i2c_write+0x5a>
	while (TWCR & (1 << TWSTO))
	{
	  if(!rt_timeout_i2c)	// bus is hanged, we timed out
    23a0:	80 91 99 02 	lds	r24, 0x0299
    23a4:	90 91 9a 02 	lds	r25, 0x029A
    23a8:	89 2b       	or	r24, r25
    23aa:	21 f0       	breq	.+8      	; 0x23b4 <i2c_write+0x62>
	i2c_status_ = TWSR & 0xF8;
	return FALSE;
#else
	// wait for stop to complete with timeout
	rt_timeout_i2c=I2C_TIMEOUT; 	// initialize timer
	while (TWCR & (1 << TWSTO))
    23ac:	80 91 bc 00 	lds	r24, 0x00BC
    23b0:	84 fd       	sbrc	r24, 4
    23b2:	f6 cf       	rjmp	.-20     	; 0x23a0 <i2c_write+0x4e>
			i2c_status_ = TWSR & 0xF8;
			return TRUE;
	  }
	}
	// return with no error
	i2c_status_ = TWSR & 0xF8;
    23b4:	80 91 b9 00 	lds	r24, 0x00B9
    23b8:	88 7f       	andi	r24, 0xF8	; 248
    23ba:	80 93 53 02 	sts	0x0253, r24
	{
		#ifdef I2C_DEBUG
		uart0_puts("\n\r i2c write NACKed by slave \n\r");
		#endif
		i2c_stop();
		return TRUE;
    23be:	81 e0       	ldi	r24, 0x01	; 1
	}
	else return FALSE;
}
    23c0:	08 95       	ret
	  {
			#ifdef I2C_DEBUG
			uart0_puts("**i2c bus timed out \n\r");
			#endif
			// status bits.
			i2c_status_ = TWSR & 0xF8;
    23c2:	80 91 b9 00 	lds	r24, 0x00B9
    23c6:	88 7f       	andi	r24, 0xF8	; 248
    23c8:	80 93 53 02 	sts	0x0253, r24
 * Release the bus
 * ***********************/
bool i2c_stop()
{
	// send stop, no time out
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
    23cc:	84 e9       	ldi	r24, 0x94	; 148
    23ce:	80 93 bc 00 	sts	0x00BC, r24
	while (TWCR & (1 << TWSTO));
	i2c_status_ = TWSR & 0xF8;
	return FALSE;
#else
	// wait for stop to complete with timeout
	rt_timeout_i2c=I2C_TIMEOUT; 	// initialize timer
    23d2:	82 e3       	ldi	r24, 0x32	; 50
    23d4:	90 e0       	ldi	r25, 0x00	; 0
    23d6:	90 93 9a 02 	sts	0x029A, r25
    23da:	80 93 99 02 	sts	0x0299, r24
    23de:	06 c0       	rjmp	.+12     	; 0x23ec <i2c_write+0x9a>
	while (TWCR & (1 << TWSTO))
	{
	  if(!rt_timeout_i2c)	// bus is hanged, we timed out
    23e0:	80 91 99 02 	lds	r24, 0x0299
    23e4:	90 91 9a 02 	lds	r25, 0x029A
    23e8:	89 2b       	or	r24, r25
    23ea:	21 f3       	breq	.-56     	; 0x23b4 <i2c_write+0x62>
	i2c_status_ = TWSR & 0xF8;
	return FALSE;
#else
	// wait for stop to complete with timeout
	rt_timeout_i2c=I2C_TIMEOUT; 	// initialize timer
	while (TWCR & (1 << TWSTO))
    23ec:	80 91 bc 00 	lds	r24, 0x00BC
    23f0:	84 fd       	sbrc	r24, 4
    23f2:	f6 cf       	rjmp	.-20     	; 0x23e0 <i2c_write+0x8e>
			i2c_status_ = TWSR & 0xF8;
			return TRUE;
	  }
	}
	// return with no error
	i2c_status_ = TWSR & 0xF8;
    23f4:	80 91 b9 00 	lds	r24, 0x00B9
    23f8:	88 7f       	andi	r24, 0xF8	; 248
    23fa:	80 93 53 02 	sts	0x0253, r24
	{
		#ifdef I2C_DEBUG
		uart0_puts("\n\r i2c write NACKed by slave \n\r");
		#endif
		i2c_stop();
		return TRUE;
    23fe:	81 e0       	ldi	r24, 0x01	; 1
	}
	else return FALSE;
}
    2400:	08 95       	ret
		uart0_puts("\n\r i2c write NACKed by slave \n\r");
		#endif
		i2c_stop();
		return TRUE;
	}
	else return FALSE;
    2402:	80 e0       	ldi	r24, 0x00	; 0
    2404:	08 95       	ret

00002406 <i2c_read>:
 * Set nack_last_byte to true when this is the last byte to read
 * so no more bytes are requested by signaling a NACK to the slave
 * ***********************/
bool i2c_read(uint8_t *databyte, bool nack_last_byte)
{
	if(i2c_execCmd((1 << TWINT) | (1<<TWEN) | (nack_last_byte ? 0 : (1<<TWEA))))
    2406:	66 23       	and	r22, r22
    2408:	f9 f0       	breq	.+62     	; 0x2448 <i2c_read+0x42>
    240a:	24 e8       	ldi	r18, 0x84	; 132
 * Performs a TWI operation, waits for completion and updates status
 * If timeout control is enabled, will return error (TRUE) on timeout
 *****************/
static bool i2c_execCmd(uint8_t cmdReg) {
	// send command
	TWCR = cmdReg;
    240c:	20 93 bc 00 	sts	0x00BC, r18
	// status bits.
	i2c_status_ = TWSR & 0xF8;
	return FALSE;
#else
	// wait for command to complete with timeout
	rt_timeout_i2c=I2C_TIMEOUT; 	// initialize timer
    2410:	22 e3       	ldi	r18, 0x32	; 50
    2412:	30 e0       	ldi	r19, 0x00	; 0
    2414:	30 93 9a 02 	sts	0x029A, r19
    2418:	20 93 99 02 	sts	0x0299, r18
    241c:	06 c0       	rjmp	.+12     	; 0x242a <i2c_read+0x24>
	while (!(TWCR & (1 << TWINT)))
	{
	  if(!rt_timeout_i2c)	// bus is hanged, we timed out
    241e:	20 91 99 02 	lds	r18, 0x0299
    2422:	30 91 9a 02 	lds	r19, 0x029A
    2426:	23 2b       	or	r18, r19
    2428:	89 f0       	breq	.+34     	; 0x244c <i2c_read+0x46>
	i2c_status_ = TWSR & 0xF8;
	return FALSE;
#else
	// wait for command to complete with timeout
	rt_timeout_i2c=I2C_TIMEOUT; 	// initialize timer
	while (!(TWCR & (1 << TWINT)))
    242a:	20 91 bc 00 	lds	r18, 0x00BC
    242e:	27 ff       	sbrs	r18, 7
    2430:	f6 cf       	rjmp	.-20     	; 0x241e <i2c_read+0x18>
			// return with error
			return TRUE;
	  }
	}
	// return with no error
	i2c_status_ = TWSR & 0xF8;
    2432:	20 91 b9 00 	lds	r18, 0x00B9
    2436:	28 7f       	andi	r18, 0xF8	; 248
    2438:	20 93 53 02 	sts	0x0253, r18
		#endif
		i2c_stop();
		return TRUE;
	}

	*databyte=TWDR;
    243c:	20 91 bb 00 	lds	r18, 0x00BB
    2440:	fc 01       	movw	r30, r24
    2442:	20 83       	st	Z, r18
	return FALSE;
    2444:	80 e0       	ldi	r24, 0x00	; 0
    2446:	08 95       	ret
 * Set nack_last_byte to true when this is the last byte to read
 * so no more bytes are requested by signaling a NACK to the slave
 * ***********************/
bool i2c_read(uint8_t *databyte, bool nack_last_byte)
{
	if(i2c_execCmd((1 << TWINT) | (1<<TWEN) | (nack_last_byte ? 0 : (1<<TWEA))))
    2448:	24 ec       	ldi	r18, 0xC4	; 196
    244a:	e0 cf       	rjmp	.-64     	; 0x240c <i2c_read+0x6>
	  {
			#ifdef I2C_DEBUG
			uart0_puts("**i2c bus timed out \n\r");
			#endif
			// status bits.
			i2c_status_ = TWSR & 0xF8;
    244c:	80 91 b9 00 	lds	r24, 0x00B9
    2450:	88 7f       	andi	r24, 0xF8	; 248
    2452:	80 93 53 02 	sts	0x0253, r24
 * Release the bus
 * ***********************/
bool i2c_stop()
{
	// send stop, no time out
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
    2456:	84 e9       	ldi	r24, 0x94	; 148
    2458:	80 93 bc 00 	sts	0x00BC, r24
	while (TWCR & (1 << TWSTO));
	i2c_status_ = TWSR & 0xF8;
	return FALSE;
#else
	// wait for stop to complete with timeout
	rt_timeout_i2c=I2C_TIMEOUT; 	// initialize timer
    245c:	82 e3       	ldi	r24, 0x32	; 50
    245e:	90 e0       	ldi	r25, 0x00	; 0
    2460:	90 93 9a 02 	sts	0x029A, r25
    2464:	80 93 99 02 	sts	0x0299, r24
    2468:	06 c0       	rjmp	.+12     	; 0x2476 <i2c_read+0x70>
	while (TWCR & (1 << TWSTO))
	{
	  if(!rt_timeout_i2c)	// bus is hanged, we timed out
    246a:	80 91 99 02 	lds	r24, 0x0299
    246e:	90 91 9a 02 	lds	r25, 0x029A
    2472:	89 2b       	or	r24, r25
    2474:	21 f0       	breq	.+8      	; 0x247e <i2c_read+0x78>
	i2c_status_ = TWSR & 0xF8;
	return FALSE;
#else
	// wait for stop to complete with timeout
	rt_timeout_i2c=I2C_TIMEOUT; 	// initialize timer
	while (TWCR & (1 << TWSTO))
    2476:	80 91 bc 00 	lds	r24, 0x00BC
    247a:	84 fd       	sbrc	r24, 4
    247c:	f6 cf       	rjmp	.-20     	; 0x246a <i2c_read+0x64>
			i2c_status_ = TWSR & 0xF8;
			return TRUE;
	  }
	}
	// return with no error
	i2c_status_ = TWSR & 0xF8;
    247e:	80 91 b9 00 	lds	r24, 0x00B9
    2482:	88 7f       	andi	r24, 0xF8	; 248
    2484:	80 93 53 02 	sts	0x0253, r24
	{
		#ifdef I2C_DEBUG
		uart0_puts("\n\r i2c read timed-out \n\r");
		#endif
		i2c_stop();
		return TRUE;
    2488:	81 e0       	ldi	r24, 0x01	; 1
	}

	*databyte=TWDR;
	return FALSE;
}
    248a:	08 95       	ret

0000248c <i2c_send_data>:
 * Returns TRUE if an error happened (byte not ACK'ed)
 * Returns FALSE if no error
 ****************************/

bool i2c_send_data(uint8_t address, uint8_t *databuffer, uint8_t datalength, bool sendStop)
{
    248c:	0f 93       	push	r16
    248e:	1f 93       	push	r17
    2490:	cf 93       	push	r28
    2492:	df 93       	push	r29
    2494:	00 d0       	rcall	.+0      	; 0x2496 <i2c_send_data+0xa>
    2496:	cd b7       	in	r28, 0x3d	; 61
    2498:	de b7       	in	r29, 0x3e	; 62
    249a:	8b 01       	movw	r16, r22
	// check that we got a pointer and at least one character
	if(databuffer==0 || datalength==0)
    249c:	61 15       	cp	r22, r1
    249e:	71 05       	cpc	r23, r1
    24a0:	11 f0       	breq	.+4      	; 0x24a6 <i2c_send_data+0x1a>
    24a2:	41 11       	cpse	r20, r1
    24a4:	21 c0       	rjmp	.+66     	; 0x24e8 <i2c_send_data+0x5c>
 * Release the bus
 * ***********************/
bool i2c_stop()
{
	// send stop, no time out
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
    24a6:	84 e9       	ldi	r24, 0x94	; 148
    24a8:	80 93 bc 00 	sts	0x00BC, r24
	while (TWCR & (1 << TWSTO));
	i2c_status_ = TWSR & 0xF8;
	return FALSE;
#else
	// wait for stop to complete with timeout
	rt_timeout_i2c=I2C_TIMEOUT; 	// initialize timer
    24ac:	82 e3       	ldi	r24, 0x32	; 50
    24ae:	90 e0       	ldi	r25, 0x00	; 0
    24b0:	90 93 9a 02 	sts	0x029A, r25
    24b4:	80 93 99 02 	sts	0x0299, r24
    24b8:	06 c0       	rjmp	.+12     	; 0x24c6 <i2c_send_data+0x3a>
	while (TWCR & (1 << TWSTO))
	{
	  if(!rt_timeout_i2c)	// bus is hanged, we timed out
    24ba:	80 91 99 02 	lds	r24, 0x0299
    24be:	90 91 9a 02 	lds	r25, 0x029A
    24c2:	89 2b       	or	r24, r25
    24c4:	21 f0       	breq	.+8      	; 0x24ce <i2c_send_data+0x42>
	i2c_status_ = TWSR & 0xF8;
	return FALSE;
#else
	// wait for stop to complete with timeout
	rt_timeout_i2c=I2C_TIMEOUT; 	// initialize timer
	while (TWCR & (1 << TWSTO))
    24c6:	80 91 bc 00 	lds	r24, 0x00BC
    24ca:	84 fd       	sbrc	r24, 4
    24cc:	f6 cf       	rjmp	.-20     	; 0x24ba <i2c_send_data+0x2e>
			i2c_status_ = TWSR & 0xF8;
			return TRUE;
	  }
	}
	// return with no error
	i2c_status_ = TWSR & 0xF8;
    24ce:	80 91 b9 00 	lds	r24, 0x00B9
    24d2:	88 7f       	andi	r24, 0xF8	; 248
    24d4:	80 93 53 02 	sts	0x0253, r24
			// we could be in a restart, make sure we issue a stop
		#ifdef I2C_DEBUG
		uart0_puts("\n\r i2c_send_data called with null data or length \n\r");
		#endif
		i2c_stop();
		return TRUE;
    24d8:	81 e0       	ldi	r24, 0x01	; 1
	}

	// only send a stop if requested, if not, user needs to restart and stop with a read
	if(sendStop) i2c_stop();
	return FALSE;
}
    24da:	0f 90       	pop	r0
    24dc:	0f 90       	pop	r0
    24de:	df 91       	pop	r29
    24e0:	cf 91       	pop	r28
    24e2:	1f 91       	pop	r17
    24e4:	0f 91       	pop	r16
    24e6:	08 95       	ret
		i2c_stop();
		return TRUE;
	}

	// generate start condition, return if error
	if(i2c_start(address, I2C_WRITE)) return TRUE;
    24e8:	60 e0       	ldi	r22, 0x00	; 0
    24ea:	2a 83       	std	Y+2, r18	; 0x02
    24ec:	49 83       	std	Y+1, r20	; 0x01
    24ee:	0e 94 b9 10 	call	0x2172	; 0x2172 <i2c_start>
    24f2:	2a 81       	ldd	r18, Y+2	; 0x02
    24f4:	49 81       	ldd	r20, Y+1	; 0x01
    24f6:	81 11       	cpse	r24, r1
    24f8:	3a c0       	rjmp	.+116    	; 0x256e <i2c_send_data+0xe2>
    24fa:	50 2f       	mov	r21, r16
    24fc:	f8 01       	movw	r30, r16
 * Performs a TWI operation, waits for completion and updates status
 * If timeout control is enabled, will return error (TRUE) on timeout
 *****************/
static bool i2c_execCmd(uint8_t cmdReg) {
	// send command
	TWCR = cmdReg;
    24fe:	34 e8       	ldi	r19, 0x84	; 132
	// status bits.
	i2c_status_ = TWSR & 0xF8;
	return FALSE;
#else
	// wait for command to complete with timeout
	rt_timeout_i2c=I2C_TIMEOUT; 	// initialize timer
    2500:	62 e3       	ldi	r22, 0x32	; 50
    2502:	70 e0       	ldi	r23, 0x00	; 0
	if(i2c_start(address, I2C_WRITE)) return TRUE;

	// send the bytes, return if error
	for(uint8_t i=0; i<datalength; i++)
	{
		if(i2c_write(databuffer[i])) return TRUE;
    2504:	81 91       	ld	r24, Z+
 * ***********************/
bool i2c_write(uint8_t databyte)
{

	// write the byte on the bus
	TWDR = databyte;
    2506:	80 93 bb 00 	sts	0x00BB, r24
 * Performs a TWI operation, waits for completion and updates status
 * If timeout control is enabled, will return error (TRUE) on timeout
 *****************/
static bool i2c_execCmd(uint8_t cmdReg) {
	// send command
	TWCR = cmdReg;
    250a:	30 93 bc 00 	sts	0x00BC, r19
	// status bits.
	i2c_status_ = TWSR & 0xF8;
	return FALSE;
#else
	// wait for command to complete with timeout
	rt_timeout_i2c=I2C_TIMEOUT; 	// initialize timer
    250e:	70 93 9a 02 	sts	0x029A, r23
    2512:	60 93 99 02 	sts	0x0299, r22
    2516:	06 c0       	rjmp	.+12     	; 0x2524 <i2c_send_data+0x98>
	while (!(TWCR & (1 << TWINT)))
	{
	  if(!rt_timeout_i2c)	// bus is hanged, we timed out
    2518:	80 91 99 02 	lds	r24, 0x0299
    251c:	90 91 9a 02 	lds	r25, 0x029A
    2520:	89 2b       	or	r24, r25
    2522:	69 f1       	breq	.+90     	; 0x257e <i2c_send_data+0xf2>
	i2c_status_ = TWSR & 0xF8;
	return FALSE;
#else
	// wait for command to complete with timeout
	rt_timeout_i2c=I2C_TIMEOUT; 	// initialize timer
	while (!(TWCR & (1 << TWINT)))
    2524:	80 91 bc 00 	lds	r24, 0x00BC
    2528:	87 ff       	sbrs	r24, 7
    252a:	f6 cf       	rjmp	.-20     	; 0x2518 <i2c_send_data+0x8c>
			// return with error
			return TRUE;
	  }
	}
	// return with no error
	i2c_status_ = TWSR & 0xF8;
    252c:	80 91 b9 00 	lds	r24, 0x00B9
    2530:	88 7f       	andi	r24, 0xF8	; 248
    2532:	80 93 53 02 	sts	0x0253, r24
		#endif
		i2c_stop();
		return TRUE;
	}
	//in case of NACK, issue a stop, so user doesn't have to remember
	if(i2c_status() != TW_MT_DATA_ACK)
    2536:	88 32       	cpi	r24, 0x28	; 40
    2538:	09 f4       	brne	.+2      	; 0x253c <i2c_send_data+0xb0>
    253a:	40 c0       	rjmp	.+128    	; 0x25bc <i2c_send_data+0x130>
 * Release the bus
 * ***********************/
bool i2c_stop()
{
	// send stop, no time out
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
    253c:	84 e9       	ldi	r24, 0x94	; 148
    253e:	80 93 bc 00 	sts	0x00BC, r24
	while (TWCR & (1 << TWSTO));
	i2c_status_ = TWSR & 0xF8;
	return FALSE;
#else
	// wait for stop to complete with timeout
	rt_timeout_i2c=I2C_TIMEOUT; 	// initialize timer
    2542:	82 e3       	ldi	r24, 0x32	; 50
    2544:	90 e0       	ldi	r25, 0x00	; 0
    2546:	90 93 9a 02 	sts	0x029A, r25
    254a:	80 93 99 02 	sts	0x0299, r24
    254e:	06 c0       	rjmp	.+12     	; 0x255c <i2c_send_data+0xd0>
	while (TWCR & (1 << TWSTO))
	{
	  if(!rt_timeout_i2c)	// bus is hanged, we timed out
    2550:	80 91 99 02 	lds	r24, 0x0299
    2554:	90 91 9a 02 	lds	r25, 0x029A
    2558:	89 2b       	or	r24, r25
    255a:	21 f0       	breq	.+8      	; 0x2564 <i2c_send_data+0xd8>
	i2c_status_ = TWSR & 0xF8;
	return FALSE;
#else
	// wait for stop to complete with timeout
	rt_timeout_i2c=I2C_TIMEOUT; 	// initialize timer
	while (TWCR & (1 << TWSTO))
    255c:	80 91 bc 00 	lds	r24, 0x00BC
    2560:	84 fd       	sbrc	r24, 4
    2562:	f6 cf       	rjmp	.-20     	; 0x2550 <i2c_send_data+0xc4>
			i2c_status_ = TWSR & 0xF8;
			return TRUE;
	  }
	}
	// return with no error
	i2c_status_ = TWSR & 0xF8;
    2564:	80 91 b9 00 	lds	r24, 0x00B9
    2568:	88 7f       	andi	r24, 0xF8	; 248
    256a:	80 93 53 02 	sts	0x0253, r24
	if(i2c_start(address, I2C_WRITE)) return TRUE;

	// send the bytes, return if error
	for(uint8_t i=0; i<datalength; i++)
	{
		if(i2c_write(databuffer[i])) return TRUE;
    256e:	81 e0       	ldi	r24, 0x01	; 1
	}

	// only send a stop if requested, if not, user needs to restart and stop with a read
	if(sendStop) i2c_stop();
	return FALSE;
}
    2570:	0f 90       	pop	r0
    2572:	0f 90       	pop	r0
    2574:	df 91       	pop	r29
    2576:	cf 91       	pop	r28
    2578:	1f 91       	pop	r17
    257a:	0f 91       	pop	r16
    257c:	08 95       	ret
	  {
			#ifdef I2C_DEBUG
			uart0_puts("**i2c bus timed out \n\r");
			#endif
			// status bits.
			i2c_status_ = TWSR & 0xF8;
    257e:	80 91 b9 00 	lds	r24, 0x00B9
    2582:	88 7f       	andi	r24, 0xF8	; 248
    2584:	80 93 53 02 	sts	0x0253, r24
 * Release the bus
 * ***********************/
bool i2c_stop()
{
	// send stop, no time out
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
    2588:	84 e9       	ldi	r24, 0x94	; 148
    258a:	80 93 bc 00 	sts	0x00BC, r24
	while (TWCR & (1 << TWSTO));
	i2c_status_ = TWSR & 0xF8;
	return FALSE;
#else
	// wait for stop to complete with timeout
	rt_timeout_i2c=I2C_TIMEOUT; 	// initialize timer
    258e:	82 e3       	ldi	r24, 0x32	; 50
    2590:	90 e0       	ldi	r25, 0x00	; 0
    2592:	90 93 9a 02 	sts	0x029A, r25
    2596:	80 93 99 02 	sts	0x0299, r24
    259a:	06 c0       	rjmp	.+12     	; 0x25a8 <i2c_send_data+0x11c>
	while (TWCR & (1 << TWSTO))
	{
	  if(!rt_timeout_i2c)	// bus is hanged, we timed out
    259c:	80 91 99 02 	lds	r24, 0x0299
    25a0:	90 91 9a 02 	lds	r25, 0x029A
    25a4:	89 2b       	or	r24, r25
    25a6:	f1 f2       	breq	.-68     	; 0x2564 <i2c_send_data+0xd8>
	i2c_status_ = TWSR & 0xF8;
	return FALSE;
#else
	// wait for stop to complete with timeout
	rt_timeout_i2c=I2C_TIMEOUT; 	// initialize timer
	while (TWCR & (1 << TWSTO))
    25a8:	80 91 bc 00 	lds	r24, 0x00BC
    25ac:	84 fd       	sbrc	r24, 4
    25ae:	f6 cf       	rjmp	.-20     	; 0x259c <i2c_send_data+0x110>
			i2c_status_ = TWSR & 0xF8;
			return TRUE;
	  }
	}
	// return with no error
	i2c_status_ = TWSR & 0xF8;
    25b0:	80 91 b9 00 	lds	r24, 0x00B9
    25b4:	88 7f       	andi	r24, 0xF8	; 248
    25b6:	80 93 53 02 	sts	0x0253, r24
    25ba:	d9 cf       	rjmp	.-78     	; 0x256e <i2c_send_data+0xe2>
    25bc:	8e 2f       	mov	r24, r30
    25be:	85 1b       	sub	r24, r21

	// generate start condition, return if error
	if(i2c_start(address, I2C_WRITE)) return TRUE;

	// send the bytes, return if error
	for(uint8_t i=0; i<datalength; i++)
    25c0:	84 17       	cp	r24, r20
    25c2:	08 f4       	brcc	.+2      	; 0x25c6 <i2c_send_data+0x13a>
    25c4:	9f cf       	rjmp	.-194    	; 0x2504 <i2c_send_data+0x78>
	{
		if(i2c_write(databuffer[i])) return TRUE;
	}

	// only send a stop if requested, if not, user needs to restart and stop with a read
	if(sendStop) i2c_stop();
    25c6:	21 11       	cpse	r18, r1
    25c8:	02 c0       	rjmp	.+4      	; 0x25ce <i2c_send_data+0x142>
	return FALSE;
    25ca:	80 e0       	ldi	r24, 0x00	; 0
    25cc:	86 cf       	rjmp	.-244    	; 0x24da <i2c_send_data+0x4e>
 * Release the bus
 * ***********************/
bool i2c_stop()
{
	// send stop, no time out
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
    25ce:	84 e9       	ldi	r24, 0x94	; 148
    25d0:	80 93 bc 00 	sts	0x00BC, r24
	while (TWCR & (1 << TWSTO));
	i2c_status_ = TWSR & 0xF8;
	return FALSE;
#else
	// wait for stop to complete with timeout
	rt_timeout_i2c=I2C_TIMEOUT; 	// initialize timer
    25d4:	82 e3       	ldi	r24, 0x32	; 50
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	90 93 9a 02 	sts	0x029A, r25
    25dc:	80 93 99 02 	sts	0x0299, r24
    25e0:	06 c0       	rjmp	.+12     	; 0x25ee <i2c_send_data+0x162>
	while (TWCR & (1 << TWSTO))
	{
	  if(!rt_timeout_i2c)	// bus is hanged, we timed out
    25e2:	80 91 99 02 	lds	r24, 0x0299
    25e6:	90 91 9a 02 	lds	r25, 0x029A
    25ea:	89 2b       	or	r24, r25
    25ec:	21 f0       	breq	.+8      	; 0x25f6 <i2c_send_data+0x16a>
	i2c_status_ = TWSR & 0xF8;
	return FALSE;
#else
	// wait for stop to complete with timeout
	rt_timeout_i2c=I2C_TIMEOUT; 	// initialize timer
	while (TWCR & (1 << TWSTO))
    25ee:	80 91 bc 00 	lds	r24, 0x00BC
    25f2:	84 fd       	sbrc	r24, 4
    25f4:	f6 cf       	rjmp	.-20     	; 0x25e2 <i2c_send_data+0x156>
			i2c_status_ = TWSR & 0xF8;
			return TRUE;
	  }
	}
	// return with no error
	i2c_status_ = TWSR & 0xF8;
    25f6:	80 91 b9 00 	lds	r24, 0x00B9
    25fa:	88 7f       	andi	r24, 0xF8	; 248
    25fc:	80 93 53 02 	sts	0x0253, r24
		if(i2c_write(databuffer[i])) return TRUE;
	}

	// only send a stop if requested, if not, user needs to restart and stop with a read
	if(sendStop) i2c_stop();
	return FALSE;
    2600:	80 e0       	ldi	r24, 0x00	; 0
    2602:	6b cf       	rjmp	.-298    	; 0x24da <i2c_send_data+0x4e>

00002604 <i2c_receive_data>:
 * and sends a stop at the end
 * Returns TRUE if an error happened
 * Returns FALSE if no error
 ****************************/
bool i2c_receive_data(uint8_t address, uint8_t *databuffer, uint8_t datalength)
{
    2604:	0f 93       	push	r16
    2606:	1f 93       	push	r17
    2608:	cf 93       	push	r28
    260a:	df 93       	push	r29
    260c:	1f 92       	push	r1
    260e:	cd b7       	in	r28, 0x3d	; 61
    2610:	de b7       	in	r29, 0x3e	; 62
    2612:	8b 01       	movw	r16, r22
	uint8_t databyte;
	// check that we got a pointer and at least one character
	if(databuffer==0 || datalength==0)
    2614:	61 15       	cp	r22, r1
    2616:	71 05       	cpc	r23, r1
    2618:	11 f0       	breq	.+4      	; 0x261e <i2c_receive_data+0x1a>
    261a:	41 11       	cpse	r20, r1
    261c:	20 c0       	rjmp	.+64     	; 0x265e <i2c_receive_data+0x5a>
 * Release the bus
 * ***********************/
bool i2c_stop()
{
	// send stop, no time out
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
    261e:	84 e9       	ldi	r24, 0x94	; 148
    2620:	80 93 bc 00 	sts	0x00BC, r24
	while (TWCR & (1 << TWSTO));
	i2c_status_ = TWSR & 0xF8;
	return FALSE;
#else
	// wait for stop to complete with timeout
	rt_timeout_i2c=I2C_TIMEOUT; 	// initialize timer
    2624:	82 e3       	ldi	r24, 0x32	; 50
    2626:	90 e0       	ldi	r25, 0x00	; 0
    2628:	90 93 9a 02 	sts	0x029A, r25
    262c:	80 93 99 02 	sts	0x0299, r24
    2630:	06 c0       	rjmp	.+12     	; 0x263e <i2c_receive_data+0x3a>
	while (TWCR & (1 << TWSTO))
	{
	  if(!rt_timeout_i2c)	// bus is hanged, we timed out
    2632:	80 91 99 02 	lds	r24, 0x0299
    2636:	90 91 9a 02 	lds	r25, 0x029A
    263a:	89 2b       	or	r24, r25
    263c:	21 f0       	breq	.+8      	; 0x2646 <i2c_receive_data+0x42>
	i2c_status_ = TWSR & 0xF8;
	return FALSE;
#else
	// wait for stop to complete with timeout
	rt_timeout_i2c=I2C_TIMEOUT; 	// initialize timer
	while (TWCR & (1 << TWSTO))
    263e:	80 91 bc 00 	lds	r24, 0x00BC
    2642:	84 fd       	sbrc	r24, 4
    2644:	f6 cf       	rjmp	.-20     	; 0x2632 <i2c_receive_data+0x2e>
			i2c_status_ = TWSR & 0xF8;
			return TRUE;
	  }
	}
	// return with no error
	i2c_status_ = TWSR & 0xF8;
    2646:	80 91 b9 00 	lds	r24, 0x00B9
    264a:	88 7f       	andi	r24, 0xF8	; 248
    264c:	80 93 53 02 	sts	0x0253, r24
	// this should now be the last read (datalength-1), NACK it
	if(i2c_read(&databyte, TRUE))
	{
		//error happened, bus did hang while reading.
		i2c_stop();
		return TRUE;
    2650:	81 e0       	ldi	r24, 0x01	; 1
	databuffer[i]=databyte;

	// generate stop condition
	i2c_stop();
	return FALSE;
}
    2652:	0f 90       	pop	r0
    2654:	df 91       	pop	r29
    2656:	cf 91       	pop	r28
    2658:	1f 91       	pop	r17
    265a:	0f 91       	pop	r16
    265c:	08 95       	ret
		i2c_stop();
		return TRUE;
	}

	// generate start or re-start condition
	if(i2c_start(address, I2C_READ))
    265e:	61 e0       	ldi	r22, 0x01	; 1
    2660:	49 83       	std	Y+1, r20	; 0x01
    2662:	0e 94 b9 10 	call	0x2172	; 0x2172 <i2c_start>
    2666:	49 81       	ldd	r20, Y+1	; 0x01
    2668:	81 11       	cpse	r24, r1
    266a:	9c c0       	rjmp	.+312    	; 0x27a4 <i2c_receive_data+0x1a0>
			return TRUE;
	}

	// read all bytes except the last one
	uint8_t i=0;
	while(i<datalength-1)
    266c:	50 e0       	ldi	r21, 0x00	; 0
    266e:	41 50       	subi	r20, 0x01	; 1
    2670:	51 09       	sbc	r21, r1
    2672:	60 e0       	ldi	r22, 0x00	; 0
    2674:	41 15       	cp	r20, r1
    2676:	51 05       	cpc	r21, r1
    2678:	31 f1       	breq	.+76     	; 0x26c6 <i2c_receive_data+0xc2>
 * Performs a TWI operation, waits for completion and updates status
 * If timeout control is enabled, will return error (TRUE) on timeout
 *****************/
static bool i2c_execCmd(uint8_t cmdReg) {
	// send command
	TWCR = cmdReg;
    267a:	74 ec       	ldi	r23, 0xC4	; 196
	// status bits.
	i2c_status_ = TWSR & 0xF8;
	return FALSE;
#else
	// wait for command to complete with timeout
	rt_timeout_i2c=I2C_TIMEOUT; 	// initialize timer
    267c:	22 e3       	ldi	r18, 0x32	; 50
    267e:	30 e0       	ldi	r19, 0x00	; 0
 * Performs a TWI operation, waits for completion and updates status
 * If timeout control is enabled, will return error (TRUE) on timeout
 *****************/
static bool i2c_execCmd(uint8_t cmdReg) {
	// send command
	TWCR = cmdReg;
    2680:	70 93 bc 00 	sts	0x00BC, r23
	// status bits.
	i2c_status_ = TWSR & 0xF8;
	return FALSE;
#else
	// wait for command to complete with timeout
	rt_timeout_i2c=I2C_TIMEOUT; 	// initialize timer
    2684:	30 93 9a 02 	sts	0x029A, r19
    2688:	20 93 99 02 	sts	0x0299, r18
    268c:	07 c0       	rjmp	.+14     	; 0x269c <i2c_receive_data+0x98>
	while (!(TWCR & (1 << TWINT)))
	{
	  if(!rt_timeout_i2c)	// bus is hanged, we timed out
    268e:	80 91 99 02 	lds	r24, 0x0299
    2692:	90 91 9a 02 	lds	r25, 0x029A
    2696:	89 2b       	or	r24, r25
    2698:	09 f4       	brne	.+2      	; 0x269c <i2c_receive_data+0x98>
    269a:	50 c0       	rjmp	.+160    	; 0x273c <i2c_receive_data+0x138>
	i2c_status_ = TWSR & 0xF8;
	return FALSE;
#else
	// wait for command to complete with timeout
	rt_timeout_i2c=I2C_TIMEOUT; 	// initialize timer
	while (!(TWCR & (1 << TWINT)))
    269c:	80 91 bc 00 	lds	r24, 0x00BC
    26a0:	87 ff       	sbrs	r24, 7
    26a2:	f5 cf       	rjmp	.-22     	; 0x268e <i2c_receive_data+0x8a>
			// return with error
			return TRUE;
	  }
	}
	// return with no error
	i2c_status_ = TWSR & 0xF8;
    26a4:	80 91 b9 00 	lds	r24, 0x00B9
    26a8:	88 7f       	andi	r24, 0xF8	; 248
    26aa:	80 93 53 02 	sts	0x0253, r24
		#endif
		i2c_stop();
		return TRUE;
	}

	*databyte=TWDR;
    26ae:	80 91 bb 00 	lds	r24, 0x00BB
			//error happened, bus did hang while reading.
			i2c_stop();
			return TRUE;
		}
		// only fill the databuffer with valid bytes
		databuffer[i]=databyte;
    26b2:	f8 01       	movw	r30, r16
    26b4:	e6 0f       	add	r30, r22
    26b6:	f1 1d       	adc	r31, r1
    26b8:	80 83       	st	Z, r24
		i++;
    26ba:	6f 5f       	subi	r22, 0xFF	; 255
			return TRUE;
	}

	// read all bytes except the last one
	uint8_t i=0;
	while(i<datalength-1)
    26bc:	86 2f       	mov	r24, r22
    26be:	90 e0       	ldi	r25, 0x00	; 0
    26c0:	84 17       	cp	r24, r20
    26c2:	95 07       	cpc	r25, r21
    26c4:	ec f2       	brlt	.-70     	; 0x2680 <i2c_receive_data+0x7c>
 * Performs a TWI operation, waits for completion and updates status
 * If timeout control is enabled, will return error (TRUE) on timeout
 *****************/
static bool i2c_execCmd(uint8_t cmdReg) {
	// send command
	TWCR = cmdReg;
    26c6:	84 e8       	ldi	r24, 0x84	; 132
    26c8:	80 93 bc 00 	sts	0x00BC, r24
	// status bits.
	i2c_status_ = TWSR & 0xF8;
	return FALSE;
#else
	// wait for command to complete with timeout
	rt_timeout_i2c=I2C_TIMEOUT; 	// initialize timer
    26cc:	82 e3       	ldi	r24, 0x32	; 50
    26ce:	90 e0       	ldi	r25, 0x00	; 0
    26d0:	90 93 9a 02 	sts	0x029A, r25
    26d4:	80 93 99 02 	sts	0x0299, r24
    26d8:	07 c0       	rjmp	.+14     	; 0x26e8 <i2c_receive_data+0xe4>
	while (!(TWCR & (1 << TWINT)))
	{
	  if(!rt_timeout_i2c)	// bus is hanged, we timed out
    26da:	80 91 99 02 	lds	r24, 0x0299
    26de:	90 91 9a 02 	lds	r25, 0x029A
    26e2:	89 2b       	or	r24, r25
    26e4:	09 f4       	brne	.+2      	; 0x26e8 <i2c_receive_data+0xe4>
    26e6:	74 c0       	rjmp	.+232    	; 0x27d0 <i2c_receive_data+0x1cc>
	i2c_status_ = TWSR & 0xF8;
	return FALSE;
#else
	// wait for command to complete with timeout
	rt_timeout_i2c=I2C_TIMEOUT; 	// initialize timer
	while (!(TWCR & (1 << TWINT)))
    26e8:	80 91 bc 00 	lds	r24, 0x00BC
    26ec:	87 ff       	sbrs	r24, 7
    26ee:	f5 cf       	rjmp	.-22     	; 0x26da <i2c_receive_data+0xd6>
			// return with error
			return TRUE;
	  }
	}
	// return with no error
	i2c_status_ = TWSR & 0xF8;
    26f0:	80 91 b9 00 	lds	r24, 0x00B9
    26f4:	88 7f       	andi	r24, 0xF8	; 248
    26f6:	80 93 53 02 	sts	0x0253, r24
		#endif
		i2c_stop();
		return TRUE;
	}

	*databyte=TWDR;
    26fa:	80 91 bb 00 	lds	r24, 0x00BB
	{
		//error happened, bus did hang while reading.
		i2c_stop();
		return TRUE;
	}
	databuffer[i]=databyte;
    26fe:	f8 01       	movw	r30, r16
    2700:	e6 0f       	add	r30, r22
    2702:	f1 1d       	adc	r31, r1
    2704:	80 83       	st	Z, r24
 * Release the bus
 * ***********************/
bool i2c_stop()
{
	// send stop, no time out
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
    2706:	84 e9       	ldi	r24, 0x94	; 148
    2708:	80 93 bc 00 	sts	0x00BC, r24
	while (TWCR & (1 << TWSTO));
	i2c_status_ = TWSR & 0xF8;
	return FALSE;
#else
	// wait for stop to complete with timeout
	rt_timeout_i2c=I2C_TIMEOUT; 	// initialize timer
    270c:	82 e3       	ldi	r24, 0x32	; 50
    270e:	90 e0       	ldi	r25, 0x00	; 0
    2710:	90 93 9a 02 	sts	0x029A, r25
    2714:	80 93 99 02 	sts	0x0299, r24
    2718:	06 c0       	rjmp	.+12     	; 0x2726 <i2c_receive_data+0x122>
	while (TWCR & (1 << TWSTO))
	{
	  if(!rt_timeout_i2c)	// bus is hanged, we timed out
    271a:	80 91 99 02 	lds	r24, 0x0299
    271e:	90 91 9a 02 	lds	r25, 0x029A
    2722:	89 2b       	or	r24, r25
    2724:	21 f0       	breq	.+8      	; 0x272e <i2c_receive_data+0x12a>
	i2c_status_ = TWSR & 0xF8;
	return FALSE;
#else
	// wait for stop to complete with timeout
	rt_timeout_i2c=I2C_TIMEOUT; 	// initialize timer
	while (TWCR & (1 << TWSTO))
    2726:	80 91 bc 00 	lds	r24, 0x00BC
    272a:	84 fd       	sbrc	r24, 4
    272c:	f6 cf       	rjmp	.-20     	; 0x271a <i2c_receive_data+0x116>
			i2c_status_ = TWSR & 0xF8;
			return TRUE;
	  }
	}
	// return with no error
	i2c_status_ = TWSR & 0xF8;
    272e:	80 91 b9 00 	lds	r24, 0x00B9
    2732:	88 7f       	andi	r24, 0xF8	; 248
    2734:	80 93 53 02 	sts	0x0253, r24
	}
	databuffer[i]=databyte;

	// generate stop condition
	i2c_stop();
	return FALSE;
    2738:	80 e0       	ldi	r24, 0x00	; 0
    273a:	8b cf       	rjmp	.-234    	; 0x2652 <i2c_receive_data+0x4e>
	  {
			#ifdef I2C_DEBUG
			uart0_puts("**i2c bus timed out \n\r");
			#endif
			// status bits.
			i2c_status_ = TWSR & 0xF8;
    273c:	80 91 b9 00 	lds	r24, 0x00B9
    2740:	88 7f       	andi	r24, 0xF8	; 248
    2742:	80 93 53 02 	sts	0x0253, r24
 * Release the bus
 * ***********************/
bool i2c_stop()
{
	// send stop, no time out
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
    2746:	84 e9       	ldi	r24, 0x94	; 148
    2748:	80 93 bc 00 	sts	0x00BC, r24
	while (TWCR & (1 << TWSTO));
	i2c_status_ = TWSR & 0xF8;
	return FALSE;
#else
	// wait for stop to complete with timeout
	rt_timeout_i2c=I2C_TIMEOUT; 	// initialize timer
    274c:	82 e3       	ldi	r24, 0x32	; 50
    274e:	90 e0       	ldi	r25, 0x00	; 0
    2750:	90 93 9a 02 	sts	0x029A, r25
    2754:	80 93 99 02 	sts	0x0299, r24
    2758:	06 c0       	rjmp	.+12     	; 0x2766 <i2c_receive_data+0x162>
	while (TWCR & (1 << TWSTO))
	{
	  if(!rt_timeout_i2c)	// bus is hanged, we timed out
    275a:	80 91 99 02 	lds	r24, 0x0299
    275e:	90 91 9a 02 	lds	r25, 0x029A
    2762:	89 2b       	or	r24, r25
    2764:	21 f0       	breq	.+8      	; 0x276e <i2c_receive_data+0x16a>
	i2c_status_ = TWSR & 0xF8;
	return FALSE;
#else
	// wait for stop to complete with timeout
	rt_timeout_i2c=I2C_TIMEOUT; 	// initialize timer
	while (TWCR & (1 << TWSTO))
    2766:	80 91 bc 00 	lds	r24, 0x00BC
    276a:	84 fd       	sbrc	r24, 4
    276c:	f6 cf       	rjmp	.-20     	; 0x275a <i2c_receive_data+0x156>
			i2c_status_ = TWSR & 0xF8;
			return TRUE;
	  }
	}
	// return with no error
	i2c_status_ = TWSR & 0xF8;
    276e:	80 91 b9 00 	lds	r24, 0x00B9
    2772:	88 7f       	andi	r24, 0xF8	; 248
    2774:	80 93 53 02 	sts	0x0253, r24
 * Release the bus
 * ***********************/
bool i2c_stop()
{
	// send stop, no time out
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
    2778:	84 e9       	ldi	r24, 0x94	; 148
    277a:	80 93 bc 00 	sts	0x00BC, r24
	while (TWCR & (1 << TWSTO));
	i2c_status_ = TWSR & 0xF8;
	return FALSE;
#else
	// wait for stop to complete with timeout
	rt_timeout_i2c=I2C_TIMEOUT; 	// initialize timer
    277e:	82 e3       	ldi	r24, 0x32	; 50
    2780:	90 e0       	ldi	r25, 0x00	; 0
    2782:	90 93 9a 02 	sts	0x029A, r25
    2786:	80 93 99 02 	sts	0x0299, r24
    278a:	07 c0       	rjmp	.+14     	; 0x279a <i2c_receive_data+0x196>
	while (TWCR & (1 << TWSTO))
	{
	  if(!rt_timeout_i2c)	// bus is hanged, we timed out
    278c:	80 91 99 02 	lds	r24, 0x0299
    2790:	90 91 9a 02 	lds	r25, 0x029A
    2794:	89 2b       	or	r24, r25
    2796:	09 f4       	brne	.+2      	; 0x279a <i2c_receive_data+0x196>
    2798:	56 cf       	rjmp	.-340    	; 0x2646 <i2c_receive_data+0x42>
	i2c_status_ = TWSR & 0xF8;
	return FALSE;
#else
	// wait for stop to complete with timeout
	rt_timeout_i2c=I2C_TIMEOUT; 	// initialize timer
	while (TWCR & (1 << TWSTO))
    279a:	80 91 bc 00 	lds	r24, 0x00BC
    279e:	84 fd       	sbrc	r24, 4
    27a0:	f5 cf       	rjmp	.-22     	; 0x278c <i2c_receive_data+0x188>
    27a2:	51 cf       	rjmp	.-350    	; 0x2646 <i2c_receive_data+0x42>
 * Release the bus
 * ***********************/
bool i2c_stop()
{
	// send stop, no time out
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
    27a4:	84 e9       	ldi	r24, 0x94	; 148
    27a6:	80 93 bc 00 	sts	0x00BC, r24
	while (TWCR & (1 << TWSTO));
	i2c_status_ = TWSR & 0xF8;
	return FALSE;
#else
	// wait for stop to complete with timeout
	rt_timeout_i2c=I2C_TIMEOUT; 	// initialize timer
    27aa:	82 e3       	ldi	r24, 0x32	; 50
    27ac:	90 e0       	ldi	r25, 0x00	; 0
    27ae:	90 93 9a 02 	sts	0x029A, r25
    27b2:	80 93 99 02 	sts	0x0299, r24
    27b6:	07 c0       	rjmp	.+14     	; 0x27c6 <i2c_receive_data+0x1c2>
	while (TWCR & (1 << TWSTO))
	{
	  if(!rt_timeout_i2c)	// bus is hanged, we timed out
    27b8:	80 91 99 02 	lds	r24, 0x0299
    27bc:	90 91 9a 02 	lds	r25, 0x029A
    27c0:	89 2b       	or	r24, r25
    27c2:	09 f4       	brne	.+2      	; 0x27c6 <i2c_receive_data+0x1c2>
    27c4:	40 cf       	rjmp	.-384    	; 0x2646 <i2c_receive_data+0x42>
	i2c_status_ = TWSR & 0xF8;
	return FALSE;
#else
	// wait for stop to complete with timeout
	rt_timeout_i2c=I2C_TIMEOUT; 	// initialize timer
	while (TWCR & (1 << TWSTO))
    27c6:	80 91 bc 00 	lds	r24, 0x00BC
    27ca:	84 fd       	sbrc	r24, 4
    27cc:	f5 cf       	rjmp	.-22     	; 0x27b8 <i2c_receive_data+0x1b4>
    27ce:	3b cf       	rjmp	.-394    	; 0x2646 <i2c_receive_data+0x42>
	  {
			#ifdef I2C_DEBUG
			uart0_puts("**i2c bus timed out \n\r");
			#endif
			// status bits.
			i2c_status_ = TWSR & 0xF8;
    27d0:	80 91 b9 00 	lds	r24, 0x00B9
    27d4:	88 7f       	andi	r24, 0xF8	; 248
    27d6:	80 93 53 02 	sts	0x0253, r24
 * Release the bus
 * ***********************/
bool i2c_stop()
{
	// send stop, no time out
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
    27da:	84 e9       	ldi	r24, 0x94	; 148
    27dc:	80 93 bc 00 	sts	0x00BC, r24
	while (TWCR & (1 << TWSTO));
	i2c_status_ = TWSR & 0xF8;
	return FALSE;
#else
	// wait for stop to complete with timeout
	rt_timeout_i2c=I2C_TIMEOUT; 	// initialize timer
    27e0:	82 e3       	ldi	r24, 0x32	; 50
    27e2:	90 e0       	ldi	r25, 0x00	; 0
    27e4:	90 93 9a 02 	sts	0x029A, r25
    27e8:	80 93 99 02 	sts	0x0299, r24
    27ec:	06 c0       	rjmp	.+12     	; 0x27fa <i2c_receive_data+0x1f6>
	while (TWCR & (1 << TWSTO))
	{
	  if(!rt_timeout_i2c)	// bus is hanged, we timed out
    27ee:	80 91 99 02 	lds	r24, 0x0299
    27f2:	90 91 9a 02 	lds	r25, 0x029A
    27f6:	89 2b       	or	r24, r25
    27f8:	21 f0       	breq	.+8      	; 0x2802 <i2c_receive_data+0x1fe>
	i2c_status_ = TWSR & 0xF8;
	return FALSE;
#else
	// wait for stop to complete with timeout
	rt_timeout_i2c=I2C_TIMEOUT; 	// initialize timer
	while (TWCR & (1 << TWSTO))
    27fa:	80 91 bc 00 	lds	r24, 0x00BC
    27fe:	84 fd       	sbrc	r24, 4
    2800:	f6 cf       	rjmp	.-20     	; 0x27ee <i2c_receive_data+0x1ea>
			i2c_status_ = TWSR & 0xF8;
			return TRUE;
	  }
	}
	// return with no error
	i2c_status_ = TWSR & 0xF8;
    2802:	80 91 b9 00 	lds	r24, 0x00B9
    2806:	88 7f       	andi	r24, 0xF8	; 248
    2808:	80 93 53 02 	sts	0x0253, r24
 * Release the bus
 * ***********************/
bool i2c_stop()
{
	// send stop, no time out
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
    280c:	84 e9       	ldi	r24, 0x94	; 148
    280e:	80 93 bc 00 	sts	0x00BC, r24
	while (TWCR & (1 << TWSTO));
	i2c_status_ = TWSR & 0xF8;
	return FALSE;
#else
	// wait for stop to complete with timeout
	rt_timeout_i2c=I2C_TIMEOUT; 	// initialize timer
    2812:	82 e3       	ldi	r24, 0x32	; 50
    2814:	90 e0       	ldi	r25, 0x00	; 0
    2816:	90 93 9a 02 	sts	0x029A, r25
    281a:	80 93 99 02 	sts	0x0299, r24
    281e:	07 c0       	rjmp	.+14     	; 0x282e <i2c_receive_data+0x22a>
	while (TWCR & (1 << TWSTO))
	{
	  if(!rt_timeout_i2c)	// bus is hanged, we timed out
    2820:	80 91 99 02 	lds	r24, 0x0299
    2824:	90 91 9a 02 	lds	r25, 0x029A
    2828:	89 2b       	or	r24, r25
    282a:	09 f4       	brne	.+2      	; 0x282e <i2c_receive_data+0x22a>
    282c:	0c cf       	rjmp	.-488    	; 0x2646 <i2c_receive_data+0x42>
	i2c_status_ = TWSR & 0xF8;
	return FALSE;
#else
	// wait for stop to complete with timeout
	rt_timeout_i2c=I2C_TIMEOUT; 	// initialize timer
	while (TWCR & (1 << TWSTO))
    282e:	80 91 bc 00 	lds	r24, 0x00BC
    2832:	84 fd       	sbrc	r24, 4
    2834:	f5 cf       	rjmp	.-22     	; 0x2820 <i2c_receive_data+0x21c>
    2836:	07 cf       	rjmp	.-498    	; 0x2646 <i2c_receive_data+0x42>

00002838 <resetJEDIcallback>:
}

// callback to reset JEDI to normal after a sequence, works only once
void resetJEDIcallback()
{
	suart_puts("*H000\r");	// quick way to turn off holos if connected to MarcDuino
    2838:	8a e3       	ldi	r24, 0x3A	; 58
    283a:	91 e0       	ldi	r25, 0x01	; 1
    283c:	0e 94 2a 32 	call	0x6454	; 0x6454 <suart_puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2840:	2f ef       	ldi	r18, 0xFF	; 255
    2842:	81 ee       	ldi	r24, 0xE1	; 225
    2844:	94 e0       	ldi	r25, 0x04	; 4
    2846:	21 50       	subi	r18, 0x01	; 1
    2848:	80 40       	sbci	r24, 0x00	; 0
    284a:	90 40       	sbci	r25, 0x00	; 0
    284c:	e1 f7       	brne	.-8      	; 0x2846 <resetJEDIcallback+0xe>
    284e:	00 c0       	rjmp	.+0      	; 0x2850 <resetJEDIcallback+0x18>
    2850:	00 00       	nop
	_delay_ms(100);
	suart_puts("@0T1\r");	// abort test routine, reset all to normal
    2852:	81 e4       	ldi	r24, 0x41	; 65
    2854:	91 e0       	ldi	r25, 0x01	; 1
    2856:	0e 94 2a 32 	call	0x6454	; 0x6454 <suart_puts>
    285a:	2f ef       	ldi	r18, 0xFF	; 255
    285c:	89 ef       	ldi	r24, 0xF9	; 249
    285e:	90 e0       	ldi	r25, 0x00	; 0
    2860:	21 50       	subi	r18, 0x01	; 1
    2862:	80 40       	sbci	r24, 0x00	; 0
    2864:	90 40       	sbci	r25, 0x00	; 0
    2866:	e1 f7       	brne	.-8      	; 0x2860 <resetJEDIcallback+0x28>
    2868:	00 c0       	rjmp	.+0      	; 0x286a <resetJEDIcallback+0x32>
    286a:	00 00       	nop
	_delay_ms(20);
	seq_remove_completion_callback();	// one shot, remove yourself
    286c:	0c 94 c1 28 	jmp	0x5182	; 0x5182 <seq_remove_completion_callback>

00002870 <echo>:

// utility to echo characters back cleanly
void echo(char ch)
{
	// echo return and line feeds nicely on a terminal
	if(ch=='\r' || ch=='\n' || ch == 0x0D )
    2870:	8d 30       	cpi	r24, 0x0D	; 13
    2872:	21 f0       	breq	.+8      	; 0x287c <echo+0xc>
    2874:	8a 30       	cpi	r24, 0x0A	; 10
    2876:	11 f0       	breq	.+4      	; 0x287c <echo+0xc>
	{
		serial_putc('\n');
		serial_putc('\r');
	}
	else serial_putc(ch);
    2878:	0c 94 4d 2b 	jmp	0x569a	; 0x569a <serial_putc>
void echo(char ch)
{
	// echo return and line feeds nicely on a terminal
	if(ch=='\r' || ch=='\n' || ch == 0x0D )
	{
		serial_putc('\n');
    287c:	8a e0       	ldi	r24, 0x0A	; 10
    287e:	0e 94 4d 2b 	call	0x569a	; 0x569a <serial_putc>
		serial_putc('\r');
    2882:	8d e0       	ldi	r24, 0x0D	; 13
    2884:	0c 94 4d 2b 	jmp	0x569a	; 0x569a <serial_putc>

00002888 <build_command>:
return 0;
}

// builds the command string from the character input
uint8_t build_command(char ch, char* output_str)
{
    2888:	9b 01       	movw	r18, r22
	static uint8_t pos=0;

	switch(ch)
    288a:	8d 30       	cpi	r24, 0x0D	; 13
    288c:	81 f0       	breq	.+32     	; 0x28ae <build_command+0x26>
			strcpy(output_str, (char*)command_buffer);	// copy result
			return TRUE;								// return and signal command ready
			break;

		default:										// regular character
			command_buffer[pos]=ch;						// append the  character to the command string
    288e:	90 91 54 02 	lds	r25, 0x0254
    2892:	e9 2f       	mov	r30, r25
    2894:	f0 e0       	ldi	r31, 0x00	; 0
    2896:	ef 54       	subi	r30, 0x4F	; 79
    2898:	fd 4f       	sbci	r31, 0xFD	; 253
    289a:	80 83       	st	Z, r24
			if(pos<=CMD_MAX_LENGTH-1)pos++;				// too many characters, discard them.
    289c:	90 34       	cpi	r25, 0x40	; 64
    289e:	28 f4       	brcc	.+10     	; 0x28aa <build_command+0x22>
    28a0:	9f 5f       	subi	r25, 0xFF	; 255
    28a2:	90 93 54 02 	sts	0x0254, r25
			break;
	}
	return FALSE;
    28a6:	80 e0       	ldi	r24, 0x00	; 0
    28a8:	08 95       	ret
    28aa:	80 e0       	ldi	r24, 0x00	; 0
}
    28ac:	08 95       	ret
	static uint8_t pos=0;

	switch(ch)
	{
		case CMD_END_CHAR:								// end character recognized
			command_buffer[pos]='\0';					// append the end of string character
    28ae:	e0 91 54 02 	lds	r30, 0x0254
    28b2:	f0 e0       	ldi	r31, 0x00	; 0
    28b4:	ef 54       	subi	r30, 0x4F	; 79
    28b6:	fd 4f       	sbci	r31, 0xFD	; 253
    28b8:	10 82       	st	Z, r1
			pos=0;										// reset buffer pointer
    28ba:	10 92 54 02 	sts	0x0254, r1
			strcpy(output_str, (char*)command_buffer);	// copy result
    28be:	61 eb       	ldi	r22, 0xB1	; 177
    28c0:	72 e0       	ldi	r23, 0x02	; 2
    28c2:	c9 01       	movw	r24, r18
    28c4:	0e 94 4e 36 	call	0x6c9c	; 0x6c9c <strcpy>
			return TRUE;								// return and signal command ready
    28c8:	81 e0       	ldi	r24, 0x01	; 1
    28ca:	08 95       	ret

000028cc <parse_hp_command>:
	}
}

const char strHPCommand[] PROGMEM="HP command\r\n";
void parse_hp_command(char* command, uint8_t length)
{
    28cc:	cf 93       	push	r28
    28ce:	df 93       	push	r29
    28d0:	ec 01       	movw	r28, r24
	if(feedbackmessageon) serial_puts_p(strHPCommand);
    28d2:	80 91 55 02 	lds	r24, 0x0255
    28d6:	88 23       	and	r24, r24
    28d8:	21 f0       	breq	.+8      	; 0x28e2 <parse_hp_command+0x16>
    28da:	85 ec       	ldi	r24, 0xC5	; 197
    28dc:	93 e0       	ldi	r25, 0x03	; 3
    28de:	0e 94 d0 2b 	call	0x57a0	; 0x57a0 <serial_puts_p>
	// pass on command to hp controller on suart
	suart_puts(command);
    28e2:	ce 01       	movw	r24, r28
    28e4:	0e 94 2a 32 	call	0x6454	; 0x6454 <suart_puts>
	// need to add the \r which is not part of the command string
	suart_putc('\r');
    28e8:	8d e0       	ldi	r24, 0x0D	; 13
}
    28ea:	df 91       	pop	r29
    28ec:	cf 91       	pop	r28
{
	if(feedbackmessageon) serial_puts_p(strHPCommand);
	// pass on command to hp controller on suart
	suart_puts(command);
	// need to add the \r which is not part of the command string
	suart_putc('\r');
    28ee:	0c 94 21 32 	jmp	0x6442	; 0x6442 <suart_putc>

000028f2 <parse_display_command>:
}

const char strDisplayCommand[] PROGMEM="Display command\r\n";
void parse_display_command(char* command, uint8_t length)
{
    28f2:	cf 93       	push	r28
    28f4:	df 93       	push	r29
    28f6:	ec 01       	movw	r28, r24
	if(feedbackmessageon) serial_puts_p(strDisplayCommand);
    28f8:	80 91 55 02 	lds	r24, 0x0255
    28fc:	88 23       	and	r24, r24
    28fe:	21 f0       	breq	.+8      	; 0x2908 <parse_display_command+0x16>
    2900:	83 eb       	ldi	r24, 0xB3	; 179
    2902:	93 e0       	ldi	r25, 0x03	; 3
    2904:	0e 94 d0 2b 	call	0x57a0	; 0x57a0 <serial_puts_p>
	// pass on command to hp controller on suart
	suart_puts(command);
    2908:	ce 01       	movw	r24, r28
    290a:	0e 94 2a 32 	call	0x6454	; 0x6454 <suart_puts>
	// need to add the \r which is not part of the command string
	suart_putc('\r');
    290e:	8d e0       	ldi	r24, 0x0D	; 13
}
    2910:	df 91       	pop	r29
    2912:	cf 91       	pop	r28
{
	if(feedbackmessageon) serial_puts_p(strDisplayCommand);
	// pass on command to hp controller on suart
	suart_puts(command);
	// need to add the \r which is not part of the command string
	suart_putc('\r');
    2914:	0c 94 21 32 	jmp	0x6442	; 0x6442 <suart_putc>

00002918 <parse_sound_command>:
}

const char strSoundCommand[] PROGMEM="Sound command\r\n";
void parse_sound_command(char* command,uint8_t length)
{
    2918:	cf 93       	push	r28
    291a:	df 93       	push	r29
    291c:	ec 01       	movw	r28, r24
	if(feedbackmessageon) serial_puts_p(strSoundCommand);
    291e:	80 91 55 02 	lds	r24, 0x0255
    2922:	88 23       	and	r24, r24
    2924:	21 f0       	breq	.+8      	; 0x292e <parse_sound_command+0x16>
    2926:	83 ea       	ldi	r24, 0xA3	; 163
    2928:	93 e0       	ldi	r25, 0x03	; 3
    292a:	0e 94 d0 2b 	call	0x57a0	; 0x57a0 <serial_puts_p>

#ifdef _MP3TRIGGER_
	// pass on command to our own MP3_Trigger interpreter
	mp3_parse_command(command);
    292e:	ce 01       	movw	r24, r28
	// pass on raw command to CF-III via suart2
	suart2_puts(command);
	// need to add the \r which is not part of the command string
	suart2_putc('\r');
#endif
}
    2930:	df 91       	pop	r29
    2932:	cf 91       	pop	r28
{
	if(feedbackmessageon) serial_puts_p(strSoundCommand);

#ifdef _MP3TRIGGER_
	// pass on command to our own MP3_Trigger interpreter
	mp3_parse_command(command);
    2934:	0c 94 14 0d 	jmp	0x1a28	; 0x1a28 <mp3_parse_command>

00002938 <parse_alt1_command>:
}

// for custom/future expansion, forwarded to suart2 with start character dropped
const char strAlt1Command[] PROGMEM="Alt1 command, output to sound\r\n";
void parse_alt1_command(char* command, uint8_t length)
{
    2938:	cf 93       	push	r28
    293a:	df 93       	push	r29
    293c:	ec 01       	movw	r28, r24
	if(feedbackmessageon) serial_puts_p(strAlt1Command);
    293e:	80 91 55 02 	lds	r24, 0x0255
    2942:	88 23       	and	r24, r24
    2944:	21 f0       	breq	.+8      	; 0x294e <parse_alt1_command+0x16>
    2946:	83 e8       	ldi	r24, 0x83	; 131
    2948:	93 e0       	ldi	r25, 0x03	; 3
    294a:	0e 94 d0 2b 	call	0x57a0	; 0x57a0 <serial_puts_p>
	suart2_puts(command+1);  // discard the start character
    294e:	ce 01       	movw	r24, r28
    2950:	01 96       	adiw	r24, 0x01	; 1
    2952:	0e 94 89 33 	call	0x6712	; 0x6712 <suart2_puts>
	suart2_putc('\r');		 // add the termination character
    2956:	8d e0       	ldi	r24, 0x0D	; 13

}
    2958:	df 91       	pop	r29
    295a:	cf 91       	pop	r28
const char strAlt1Command[] PROGMEM="Alt1 command, output to sound\r\n";
void parse_alt1_command(char* command, uint8_t length)
{
	if(feedbackmessageon) serial_puts_p(strAlt1Command);
	suart2_puts(command+1);  // discard the start character
	suart2_putc('\r');		 // add the termination character
    295c:	0c 94 80 33 	jmp	0x6700	; 0x6700 <suart2_putc>

00002960 <parse_alt2_command>:

// for custom/future expansion, forwarded to HP MarcDuino,
// which will forward it to it's suart2 after stripping
const char strAlt2Command[] PROGMEM="Alt2 command, forward to slave\r\n";
void parse_alt2_command(char* command, uint8_t length)
{
    2960:	cf 93       	push	r28
    2962:	df 93       	push	r29
    2964:	ec 01       	movw	r28, r24
	if(feedbackmessageon) serial_puts_p(strAlt1Command);
    2966:	80 91 55 02 	lds	r24, 0x0255
    296a:	88 23       	and	r24, r24
    296c:	21 f0       	breq	.+8      	; 0x2976 <parse_alt2_command+0x16>
    296e:	83 e8       	ldi	r24, 0x83	; 131
    2970:	93 e0       	ldi	r25, 0x03	; 3
    2972:	0e 94 d0 2b 	call	0x57a0	; 0x57a0 <serial_puts_p>
	suart_puts(command);   	// keep the start character
    2976:	ce 01       	movw	r24, r28
    2978:	0e 94 2a 32 	call	0x6454	; 0x6454 <suart_puts>
	suart_putc('\r');		// add the termination character
    297c:	8d e0       	ldi	r24, 0x0D	; 13
}
    297e:	df 91       	pop	r29
    2980:	cf 91       	pop	r28
const char strAlt2Command[] PROGMEM="Alt2 command, forward to slave\r\n";
void parse_alt2_command(char* command, uint8_t length)
{
	if(feedbackmessageon) serial_puts_p(strAlt1Command);
	suart_puts(command);   	// keep the start character
	suart_putc('\r');		// add the termination character
    2982:	0c 94 21 32 	jmp	0x6442	; 0x6442 <suart_putc>

00002986 <parse_i2c_command>:
}


const char strI2CCmdErr[] PROGMEM="**Invalid I2C Command\r\n";
void parse_i2c_command(char* cmd, uint8_t length)
{
    2986:	7f 92       	push	r7
    2988:	8f 92       	push	r8
    298a:	9f 92       	push	r9
    298c:	af 92       	push	r10
    298e:	bf 92       	push	r11
    2990:	cf 92       	push	r12
    2992:	df 92       	push	r13
    2994:	ef 92       	push	r14
    2996:	ff 92       	push	r15
    2998:	0f 93       	push	r16
    299a:	1f 93       	push	r17
    299c:	cf 93       	push	r28
    299e:	df 93       	push	r29
    29a0:	cd b7       	in	r28, 0x3d	; 61
    29a2:	de b7       	in	r29, 0x3e	; 62
    29a4:	c6 50       	subi	r28, 0x06	; 6
    29a6:	d1 40       	sbci	r29, 0x01	; 1
    29a8:	0f b6       	in	r0, 0x3f	; 63
    29aa:	f8 94       	cli
    29ac:	de bf       	out	0x3e, r29	; 62
    29ae:	0f be       	out	0x3f, r0	; 63
    29b0:	cd bf       	out	0x3d, r28	; 61
    29b2:	8c 01       	movw	r16, r24

	uint8_t i2caddress=0;
	uint8_t payload[256];
	uint8_t payloadIndex=0;
	uint8_t success=0;
	const char delim[]=",";
    29b4:	2c e2       	ldi	r18, 0x2C	; 44
    29b6:	30 e0       	ldi	r19, 0x00	; 0
    29b8:	cb 5f       	subi	r28, 0xFB	; 251
    29ba:	de 4f       	sbci	r29, 0xFE	; 254
    29bc:	39 83       	std	Y+1, r19	; 0x01
    29be:	28 83       	st	Y, r18
    29c0:	c5 50       	subi	r28, 0x05	; 5
    29c2:	d1 40       	sbci	r29, 0x01	; 1
#if _FEEDBACK_MSG_ == 1
	char str[65];
#endif

	// a properly constructed command should have at least 2 chars
	if (length<2)
    29c4:	62 30       	cpi	r22, 0x02	; 2
    29c6:	20 f0       	brcs	.+8      	; 0x29d0 <parse_i2c_command+0x4a>
#endif
		return;
	}

	// check first character '&' begins command
	if(cmd[0]!=I2C_START_CHAR)
    29c8:	dc 01       	movw	r26, r24
    29ca:	8c 91       	ld	r24, X
    29cc:	86 32       	cpi	r24, 0x26	; 38
    29ce:	f1 f0       	breq	.+60     	; 0x2a0c <parse_i2c_command+0x86>

	// send the I2C command if good payload
	if(success && payloadIndex!=0)	sendI2C(i2caddress, payload, payloadIndex);
	else
	{
		if(errormessageon) serial_puts_p(strI2CCmdErr);
    29d0:	80 91 56 02 	lds	r24, 0x0256
    29d4:	81 11       	cpse	r24, r1
    29d6:	15 c0       	rjmp	.+42     	; 0x2a02 <parse_i2c_command+0x7c>
#if _FEEDBACK_MSG_ == 1
		serial_puts("Err 5\n\r");
#endif
	}
}
    29d8:	ca 5f       	subi	r28, 0xFA	; 250
    29da:	de 4f       	sbci	r29, 0xFE	; 254
    29dc:	0f b6       	in	r0, 0x3f	; 63
    29de:	f8 94       	cli
    29e0:	de bf       	out	0x3e, r29	; 62
    29e2:	0f be       	out	0x3f, r0	; 63
    29e4:	cd bf       	out	0x3d, r28	; 61
    29e6:	df 91       	pop	r29
    29e8:	cf 91       	pop	r28
    29ea:	1f 91       	pop	r17
    29ec:	0f 91       	pop	r16
    29ee:	ff 90       	pop	r15
    29f0:	ef 90       	pop	r14
    29f2:	df 90       	pop	r13
    29f4:	cf 90       	pop	r12
    29f6:	bf 90       	pop	r11
    29f8:	af 90       	pop	r10
    29fa:	9f 90       	pop	r9
    29fc:	8f 90       	pop	r8
    29fe:	7f 90       	pop	r7
    2a00:	08 95       	ret

	// send the I2C command if good payload
	if(success && payloadIndex!=0)	sendI2C(i2caddress, payload, payloadIndex);
	else
	{
		if(errormessageon) serial_puts_p(strI2CCmdErr);
    2a02:	8a e4       	ldi	r24, 0x4A	; 74
    2a04:	93 e0       	ldi	r25, 0x03	; 3
    2a06:	0e 94 d0 2b 	call	0x57a0	; 0x57a0 <serial_puts_p>
    2a0a:	e6 cf       	rjmp	.-52     	; 0x29d8 <parse_i2c_command+0x52>
		return;
	}

	// good enough to send on to the next slave
	// so all slaves execute the same I2C command
	suart_puts(cmd);
    2a0c:	c8 01       	movw	r24, r16
    2a0e:	0e 94 2a 32 	call	0x6454	; 0x6454 <suart_puts>
	suart_putc('\r');	// add the termination character
    2a12:	8d e0       	ldi	r24, 0x0D	; 13
    2a14:	0e 94 21 32 	call	0x6442	; 0x6442 <suart_putc>

	// get the address field. Need to tokenize on the next "," or "\0"
	token = strtok(cmd+1, delim);
    2a18:	be 01       	movw	r22, r28
    2a1a:	6b 5f       	subi	r22, 0xFB	; 251
    2a1c:	7e 4f       	sbci	r23, 0xFE	; 254
    2a1e:	c8 01       	movw	r24, r16
    2a20:	01 96       	adiw	r24, 0x01	; 1
    2a22:	0e 94 39 36 	call	0x6c72	; 0x6c72 <strtok>
	if(token == NULL )
    2a26:	00 97       	sbiw	r24, 0x00	; 0
    2a28:	99 f2       	breq	.-90     	; 0x29d0 <parse_i2c_command+0x4a>
		return;
	}

	// convert and check the address
	unsigned int temp;
	success=sscanf(token, "%u", &temp);
    2a2a:	8e 01       	movw	r16, r28
    2a2c:	0d 5f       	subi	r16, 0xFD	; 253
    2a2e:	1e 4f       	sbci	r17, 0xFE	; 254
    2a30:	1f 93       	push	r17
    2a32:	0f 93       	push	r16
    2a34:	27 e4       	ldi	r18, 0x47	; 71
    2a36:	31 e0       	ldi	r19, 0x01	; 1
    2a38:	3f 93       	push	r19
    2a3a:	2f 93       	push	r18
    2a3c:	9f 93       	push	r25
    2a3e:	8f 93       	push	r24
    2a40:	0e 94 a6 36 	call	0x6d4c	; 0x6d4c <sscanf>
	//i2caddress=atoi(token);
	// make sure I can do the conversion to uint8_t
	if(temp<255) i2caddress=(uint8_t)temp;
    2a44:	f8 01       	movw	r30, r16
    2a46:	80 80       	ld	r8, Z
    2a48:	91 80       	ldd	r9, Z+1	; 0x01
    2a4a:	0f 90       	pop	r0
    2a4c:	0f 90       	pop	r0
    2a4e:	0f 90       	pop	r0
    2a50:	0f 90       	pop	r0
    2a52:	0f 90       	pop	r0
    2a54:	0f 90       	pop	r0
    2a56:	ff ef       	ldi	r31, 0xFF	; 255
    2a58:	8f 16       	cp	r8, r31
    2a5a:	91 04       	cpc	r9, r1
    2a5c:	08 f0       	brcs	.+2      	; 0x2a60 <parse_i2c_command+0xda>
    2a5e:	b8 cf       	rjmp	.-144    	; 0x29d0 <parse_i2c_command+0x4a>
	if (success) sprintf(str, "Token: %s, recognized address: %u \r\n", token, i2caddress);
	else sprintf(str, "Token: %s, unrecognized address\r\n", token);
	serial_puts(str);
#endif

	if(i2caddress > 127 || !success)
    2a60:	87 fc       	sbrc	r8, 7
    2a62:	b6 cf       	rjmp	.-148    	; 0x29d0 <parse_i2c_command+0x4a>
    2a64:	88 23       	and	r24, r24
    2a66:	09 f4       	brne	.+2      	; 0x2a6a <parse_i2c_command+0xe4>
    2a68:	b3 cf       	rjmp	.-154    	; 0x29d0 <parse_i2c_command+0x4a>
    2a6a:	71 2c       	mov	r7, r1
				i++;						// advance string index
			}
			result=1;
			break;
		case '\'':	// single character
			result=sscanf(token+1, "%c", &ch);
    2a6c:	8e 01       	movw	r16, r28
    2a6e:	0f 5f       	subi	r16, 0xFF	; 255
    2a70:	1e 4f       	sbci	r17, 0xFE	; 254
    2a72:	8d e4       	ldi	r24, 0x4D	; 77
    2a74:	a8 2e       	mov	r10, r24
    2a76:	81 e0       	ldi	r24, 0x01	; 1
    2a78:	b8 2e       	mov	r11, r24
	char ch;
	uint8_t i;
	switch(token[0])
	{
		case 'x':	// hex character
			result=sscanf(token+1, "%x", &unum); // skip the x and read the hex number
    2a7a:	9a e4       	ldi	r25, 0x4A	; 74
    2a7c:	c9 2e       	mov	r12, r25
    2a7e:	91 e0       	ldi	r25, 0x01	; 1
    2a80:	d9 2e       	mov	r13, r25
			}
			break;
		default:
			// I have problem here if I get a 16 bit int and it doesn't fit in an int8_t or uint8_t.
			// So I am reducing the allowed range to -128 / +255
			result=sscanf(token, "%d", &num);
    2a82:	20 e5       	ldi	r18, 0x50	; 80
    2a84:	e2 2e       	mov	r14, r18
    2a86:	21 e0       	ldi	r18, 0x01	; 1
    2a88:	f2 2e       	mov	r15, r18
	}

	// get all arguments separated by commas
	while(token!=NULL)
	{
		token=strtok(NULL, delim); 	// get next token
    2a8a:	be 01       	movw	r22, r28
    2a8c:	6b 5f       	subi	r22, 0xFB	; 251
    2a8e:	7e 4f       	sbci	r23, 0xFE	; 254
    2a90:	80 e0       	ldi	r24, 0x00	; 0
    2a92:	90 e0       	ldi	r25, 0x00	; 0
    2a94:	0e 94 39 36 	call	0x6c72	; 0x6c72 <strtok>
		if(token==NULL) break;		// exit immediately if token no good
    2a98:	00 97       	sbiw	r24, 0x00	; 0
    2a9a:	09 f4       	brne	.+2      	; 0x2a9e <parse_i2c_command+0x118>
    2a9c:	81 c0       	rjmp	.+258    	; 0x2ba0 <parse_i2c_command+0x21a>
	uint8_t result=0;
	unsigned int unum;
	int num;
	char ch;
	uint8_t i;
	switch(token[0])
    2a9e:	dc 01       	movw	r26, r24
    2aa0:	2c 91       	ld	r18, X
    2aa2:	27 32       	cpi	r18, 0x27	; 39
    2aa4:	59 f1       	breq	.+86     	; 0x2afc <parse_i2c_command+0x176>
    2aa6:	28 37       	cpi	r18, 0x78	; 120
    2aa8:	09 f4       	brne	.+2      	; 0x2aac <parse_i2c_command+0x126>
    2aaa:	5f c0       	rjmp	.+190    	; 0x2b6a <parse_i2c_command+0x1e4>
    2aac:	22 32       	cpi	r18, 0x22	; 34
    2aae:	09 f4       	brne	.+2      	; 0x2ab2 <parse_i2c_command+0x12c>
    2ab0:	44 c0       	rjmp	.+136    	; 0x2b3a <parse_i2c_command+0x1b4>
			}
			break;
		default:
			// I have problem here if I get a 16 bit int and it doesn't fit in an int8_t or uint8_t.
			// So I am reducing the allowed range to -128 / +255
			result=sscanf(token, "%d", &num);
    2ab2:	1f 93       	push	r17
    2ab4:	0f 93       	push	r16
    2ab6:	ff 92       	push	r15
    2ab8:	ef 92       	push	r14
    2aba:	9f 93       	push	r25
    2abc:	8f 93       	push	r24
    2abe:	0e 94 a6 36 	call	0x6d4c	; 0x6d4c <sscanf>
			if(result)
    2ac2:	0f 90       	pop	r0
    2ac4:	0f 90       	pop	r0
    2ac6:	0f 90       	pop	r0
    2ac8:	0f 90       	pop	r0
    2aca:	0f 90       	pop	r0
    2acc:	0f 90       	pop	r0
    2ace:	88 23       	and	r24, r24
    2ad0:	09 f4       	brne	.+2      	; 0x2ad4 <parse_i2c_command+0x14e>
    2ad2:	7e cf       	rjmp	.-260    	; 0x29d0 <parse_i2c_command+0x4a>
			{
				if(num>255 || num<-128) return 0; 				// limited to 8 bit signed or unsigned arguments
    2ad4:	f8 01       	movw	r30, r16
    2ad6:	80 81       	ld	r24, Z
    2ad8:	91 81       	ldd	r25, Z+1	; 0x01
    2ada:	9c 01       	movw	r18, r24
    2adc:	20 58       	subi	r18, 0x80	; 128
    2ade:	3f 4f       	sbci	r19, 0xFF	; 255
    2ae0:	20 38       	cpi	r18, 0x80	; 128
    2ae2:	31 40       	sbci	r19, 0x01	; 1
    2ae4:	08 f0       	brcs	.+2      	; 0x2ae8 <parse_i2c_command+0x162>
    2ae6:	74 cf       	rjmp	.-280    	; 0x29d0 <parse_i2c_command+0x4a>
				if(num<=127) payload[*index]=(int8_t)num;	// allow signed from -128 to 127
    2ae8:	e1 e0       	ldi	r30, 0x01	; 1
    2aea:	f0 e0       	ldi	r31, 0x00	; 0
    2aec:	ec 0f       	add	r30, r28
    2aee:	fd 1f       	adc	r31, r29
    2af0:	e7 0d       	add	r30, r7
    2af2:	f1 1d       	adc	r31, r1
    2af4:	80 83       	st	Z, r24
				else payload[*index]=(uint8_t)num;			// but allow unsigned numbers up to 255
				(*index)++;
    2af6:	73 94       	inc	r7
				if (*index==0) return 0; // force error on max payload overrun
    2af8:	41 f6       	brne	.-112    	; 0x2a8a <parse_i2c_command+0x104>
    2afa:	6a cf       	rjmp	.-300    	; 0x29d0 <parse_i2c_command+0x4a>
				i++;						// advance string index
			}
			result=1;
			break;
		case '\'':	// single character
			result=sscanf(token+1, "%c", &ch);
    2afc:	1f 93       	push	r17
    2afe:	0f 93       	push	r16
    2b00:	bf 92       	push	r11
    2b02:	af 92       	push	r10
    2b04:	01 96       	adiw	r24, 0x01	; 1
    2b06:	9f 93       	push	r25
    2b08:	8f 93       	push	r24
    2b0a:	0e 94 a6 36 	call	0x6d4c	; 0x6d4c <sscanf>
			if(result)
    2b0e:	0f 90       	pop	r0
    2b10:	0f 90       	pop	r0
    2b12:	0f 90       	pop	r0
    2b14:	0f 90       	pop	r0
    2b16:	0f 90       	pop	r0
    2b18:	0f 90       	pop	r0
    2b1a:	88 23       	and	r24, r24
    2b1c:	09 f4       	brne	.+2      	; 0x2b20 <parse_i2c_command+0x19a>
    2b1e:	58 cf       	rjmp	.-336    	; 0x29d0 <parse_i2c_command+0x4a>
			{
				payload[*index]=ch;
    2b20:	e1 e0       	ldi	r30, 0x01	; 1
    2b22:	f0 e0       	ldi	r31, 0x00	; 0
    2b24:	ec 0f       	add	r30, r28
    2b26:	fd 1f       	adc	r31, r29
    2b28:	e7 0d       	add	r30, r7
    2b2a:	f1 1d       	adc	r31, r1
    2b2c:	d8 01       	movw	r26, r16
    2b2e:	8c 91       	ld	r24, X
    2b30:	80 83       	st	Z, r24
				(*index)++;
    2b32:	73 94       	inc	r7
				if (*index==0) return 0;
    2b34:	09 f0       	breq	.+2      	; 0x2b38 <parse_i2c_command+0x1b2>
    2b36:	a9 cf       	rjmp	.-174    	; 0x2a8a <parse_i2c_command+0x104>
    2b38:	4b cf       	rjmp	.-362    	; 0x29d0 <parse_i2c_command+0x4a>
    2b3a:	fc 01       	movw	r30, r24
    2b3c:	31 96       	adiw	r30, 0x01	; 1
    2b3e:	9e ef       	ldi	r25, 0xFE	; 254
    2b40:	97 0d       	add	r25, r7
    2b42:	0d c0       	rjmp	.+26     	; 0x2b5e <parse_i2c_command+0x1d8>
			i=1; 	// start after the "
			while(i<255)
			{
				ch=token[i];				// read all the characters in the token
				if(ch=='\0') break;			// end of string
				payload[*index]=ch;			// put in the payload
    2b44:	a1 e0       	ldi	r26, 0x01	; 1
    2b46:	b0 e0       	ldi	r27, 0x00	; 0
    2b48:	ac 0f       	add	r26, r28
    2b4a:	bd 1f       	adc	r27, r29
    2b4c:	a7 0d       	add	r26, r7
    2b4e:	b1 1d       	adc	r27, r1
    2b50:	8c 93       	st	X, r24
				(*index)++;					// advance payload index
    2b52:	73 94       	inc	r7
				if (*index==0) return 0; 	// index wrapped around, exit with error
    2b54:	09 f4       	brne	.+2      	; 0x2b58 <parse_i2c_command+0x1d2>
    2b56:	3c cf       	rjmp	.-392    	; 0x29d0 <parse_i2c_command+0x4a>
				if (*index==0) return 0; // force error on max payload overrun
			}
			break;
		case '"':	// string
			i=1; 	// start after the "
			while(i<255)
    2b58:	79 16       	cp	r7, r25
    2b5a:	09 f4       	brne	.+2      	; 0x2b5e <parse_i2c_command+0x1d8>
    2b5c:	96 cf       	rjmp	.-212    	; 0x2a8a <parse_i2c_command+0x104>
			{
				ch=token[i];				// read all the characters in the token
    2b5e:	81 91       	ld	r24, Z+
    2b60:	d8 01       	movw	r26, r16
    2b62:	8c 93       	st	X, r24
				if(ch=='\0') break;			// end of string
    2b64:	81 11       	cpse	r24, r1
    2b66:	ee cf       	rjmp	.-36     	; 0x2b44 <parse_i2c_command+0x1be>
    2b68:	90 cf       	rjmp	.-224    	; 0x2a8a <parse_i2c_command+0x104>
	char ch;
	uint8_t i;
	switch(token[0])
	{
		case 'x':	// hex character
			result=sscanf(token+1, "%x", &unum); // skip the x and read the hex number
    2b6a:	1f 93       	push	r17
    2b6c:	0f 93       	push	r16
    2b6e:	df 92       	push	r13
    2b70:	cf 92       	push	r12
    2b72:	01 96       	adiw	r24, 0x01	; 1
    2b74:	9f 93       	push	r25
    2b76:	8f 93       	push	r24
    2b78:	0e 94 a6 36 	call	0x6d4c	; 0x6d4c <sscanf>
			if(result)
    2b7c:	0f 90       	pop	r0
    2b7e:	0f 90       	pop	r0
    2b80:	0f 90       	pop	r0
    2b82:	0f 90       	pop	r0
    2b84:	0f 90       	pop	r0
    2b86:	0f 90       	pop	r0
    2b88:	88 23       	and	r24, r24
    2b8a:	09 f4       	brne	.+2      	; 0x2b8e <parse_i2c_command+0x208>
    2b8c:	21 cf       	rjmp	.-446    	; 0x29d0 <parse_i2c_command+0x4a>
			{
				if(unum>255) return 0; // limited to 8 bit hex values
    2b8e:	f8 01       	movw	r30, r16
    2b90:	80 81       	ld	r24, Z
    2b92:	91 81       	ldd	r25, Z+1	; 0x01
    2b94:	8f 3f       	cpi	r24, 0xFF	; 255
    2b96:	91 05       	cpc	r25, r1
    2b98:	09 f0       	breq	.+2      	; 0x2b9c <parse_i2c_command+0x216>
    2b9a:	08 f4       	brcc	.+2      	; 0x2b9e <parse_i2c_command+0x218>
    2b9c:	a5 cf       	rjmp	.-182    	; 0x2ae8 <parse_i2c_command+0x162>
    2b9e:	18 cf       	rjmp	.-464    	; 0x29d0 <parse_i2c_command+0x4a>
		//break immediately on payload error
		if(!success) break;
	}

	// send the I2C command if good payload
	if(success && payloadIndex!=0)	sendI2C(i2caddress, payload, payloadIndex);
    2ba0:	77 20       	and	r7, r7
    2ba2:	09 f4       	brne	.+2      	; 0x2ba6 <parse_i2c_command+0x220>
    2ba4:	15 cf       	rjmp	.-470    	; 0x29d0 <parse_i2c_command+0x4a>
		serial_puts(str);
	}
	serial_puts("\r\n");
#endif
	// send the data via i2c
	i2c_send_data(address,payload, payload_length, TRUE);
    2ba6:	21 e0       	ldi	r18, 0x01	; 1
    2ba8:	47 2d       	mov	r20, r7
    2baa:	be 01       	movw	r22, r28
    2bac:	6f 5f       	subi	r22, 0xFF	; 255
    2bae:	7f 4f       	sbci	r23, 0xFF	; 255
    2bb0:	88 2d       	mov	r24, r8
    2bb2:	0e 94 46 12 	call	0x248c	; 0x248c <i2c_send_data>
    2bb6:	10 cf       	rjmp	.-480    	; 0x29d8 <parse_i2c_command+0x52>

00002bb8 <append_token>:
#endif
	}
}

uint8_t append_token(uint8_t* payload, uint8_t* index, char* token)
{
    2bb8:	ef 92       	push	r14
    2bba:	ff 92       	push	r15
    2bbc:	0f 93       	push	r16
    2bbe:	1f 93       	push	r17
    2bc0:	cf 93       	push	r28
    2bc2:	df 93       	push	r29
    2bc4:	00 d0       	rcall	.+0      	; 0x2bc6 <append_token+0xe>
    2bc6:	cd b7       	in	r28, 0x3d	; 61
    2bc8:	de b7       	in	r29, 0x3e	; 62
    2bca:	7c 01       	movw	r14, r24
    2bcc:	8b 01       	movw	r16, r22
	uint8_t result=0;
	unsigned int unum;
	int num;
	char ch;
	uint8_t i;
	switch(token[0])
    2bce:	da 01       	movw	r26, r20
    2bd0:	8c 91       	ld	r24, X
    2bd2:	87 32       	cpi	r24, 0x27	; 39
    2bd4:	09 f4       	brne	.+2      	; 0x2bd8 <append_token+0x20>
    2bd6:	75 c0       	rjmp	.+234    	; 0x2cc2 <append_token+0x10a>
    2bd8:	88 37       	cpi	r24, 0x78	; 120
    2bda:	09 f4       	brne	.+2      	; 0x2bde <append_token+0x26>
    2bdc:	4f c0       	rjmp	.+158    	; 0x2c7c <append_token+0xc4>
    2bde:	82 32       	cpi	r24, 0x22	; 34
    2be0:	b1 f1       	breq	.+108    	; 0x2c4e <append_token+0x96>
			}
			break;
		default:
			// I have problem here if I get a 16 bit int and it doesn't fit in an int8_t or uint8_t.
			// So I am reducing the allowed range to -128 / +255
			result=sscanf(token, "%d", &num);
    2be2:	ce 01       	movw	r24, r28
    2be4:	01 96       	adiw	r24, 0x01	; 1
    2be6:	9f 93       	push	r25
    2be8:	8f 93       	push	r24
    2bea:	80 e5       	ldi	r24, 0x50	; 80
    2bec:	91 e0       	ldi	r25, 0x01	; 1
    2bee:	9f 93       	push	r25
    2bf0:	8f 93       	push	r24
    2bf2:	5f 93       	push	r21
    2bf4:	4f 93       	push	r20
    2bf6:	0e 94 a6 36 	call	0x6d4c	; 0x6d4c <sscanf>
			if(result)
    2bfa:	0f 90       	pop	r0
    2bfc:	0f 90       	pop	r0
    2bfe:	0f 90       	pop	r0
    2c00:	0f 90       	pop	r0
    2c02:	0f 90       	pop	r0
    2c04:	0f 90       	pop	r0
    2c06:	88 23       	and	r24, r24
    2c08:	c1 f0       	breq	.+48     	; 0x2c3a <append_token+0x82>
			{
				if(num>255 || num<-128) return 0; 				// limited to 8 bit signed or unsigned arguments
    2c0a:	29 81       	ldd	r18, Y+1	; 0x01
    2c0c:	3a 81       	ldd	r19, Y+2	; 0x02
    2c0e:	a9 01       	movw	r20, r18
    2c10:	40 58       	subi	r20, 0x80	; 128
    2c12:	5f 4f       	sbci	r21, 0xFF	; 255
    2c14:	40 38       	cpi	r20, 0x80	; 128
    2c16:	51 40       	sbci	r21, 0x01	; 1
    2c18:	80 f4       	brcc	.+32     	; 0x2c3a <append_token+0x82>
				if(num<=127) payload[*index]=(int8_t)num;	// allow signed from -128 to 127
    2c1a:	20 38       	cpi	r18, 0x80	; 128
    2c1c:	31 05       	cpc	r19, r1
    2c1e:	0c f4       	brge	.+2      	; 0x2c22 <append_token+0x6a>
    2c20:	75 c0       	rjmp	.+234    	; 0x2d0c <append_token+0x154>
				else payload[*index]=(uint8_t)num;			// but allow unsigned numbers up to 255
    2c22:	d8 01       	movw	r26, r16
    2c24:	9c 91       	ld	r25, X
    2c26:	f7 01       	movw	r30, r14
    2c28:	e9 0f       	add	r30, r25
    2c2a:	f1 1d       	adc	r31, r1
    2c2c:	20 83       	st	Z, r18
				(*index)++;
    2c2e:	f8 01       	movw	r30, r16
    2c30:	90 81       	ld	r25, Z
    2c32:	9f 5f       	subi	r25, 0xFF	; 255
    2c34:	90 83       	st	Z, r25
				if (*index==0) return 0; // force error on max payload overrun
    2c36:	91 11       	cpse	r25, r1
    2c38:	01 c0       	rjmp	.+2      	; 0x2c3c <append_token+0x84>
    2c3a:	80 e0       	ldi	r24, 0x00	; 0
			}
			break;
	}
	return result;
 }
    2c3c:	0f 90       	pop	r0
    2c3e:	0f 90       	pop	r0
    2c40:	df 91       	pop	r29
    2c42:	cf 91       	pop	r28
    2c44:	1f 91       	pop	r17
    2c46:	0f 91       	pop	r16
    2c48:	ff 90       	pop	r15
    2c4a:	ef 90       	pop	r14
    2c4c:	08 95       	ret
    2c4e:	fa 01       	movw	r30, r20
    2c50:	31 96       	adiw	r30, 0x01	; 1
	uint8_t result=0;
	unsigned int unum;
	int num;
	char ch;
	uint8_t i;
	switch(token[0])
    2c52:	9e ef       	ldi	r25, 0xFE	; 254
    2c54:	0e c0       	rjmp	.+28     	; 0x2c72 <append_token+0xba>
			i=1; 	// start after the "
			while(i<255)
			{
				ch=token[i];				// read all the characters in the token
				if(ch=='\0') break;			// end of string
				payload[*index]=ch;			// put in the payload
    2c56:	d8 01       	movw	r26, r16
    2c58:	2c 91       	ld	r18, X
    2c5a:	d7 01       	movw	r26, r14
    2c5c:	a2 0f       	add	r26, r18
    2c5e:	b1 1d       	adc	r27, r1
    2c60:	8c 93       	st	X, r24
				(*index)++;					// advance payload index
    2c62:	d8 01       	movw	r26, r16
    2c64:	8c 91       	ld	r24, X
    2c66:	8f 5f       	subi	r24, 0xFF	; 255
    2c68:	8c 93       	st	X, r24
				if (*index==0) return 0; 	// index wrapped around, exit with error
    2c6a:	88 23       	and	r24, r24
    2c6c:	31 f3       	breq	.-52     	; 0x2c3a <append_token+0x82>
    2c6e:	91 50       	subi	r25, 0x01	; 1
				if (*index==0) return 0; // force error on max payload overrun
			}
			break;
		case '"':	// string
			i=1; 	// start after the "
			while(i<255)
    2c70:	19 f0       	breq	.+6      	; 0x2c78 <append_token+0xc0>
			{
				ch=token[i];				// read all the characters in the token
    2c72:	81 91       	ld	r24, Z+
				if(ch=='\0') break;			// end of string
    2c74:	81 11       	cpse	r24, r1
    2c76:	ef cf       	rjmp	.-34     	; 0x2c56 <append_token+0x9e>
				payload[*index]=ch;			// put in the payload
				(*index)++;					// advance payload index
				if (*index==0) return 0; 	// index wrapped around, exit with error
				i++;						// advance string index
			}
			result=1;
    2c78:	81 e0       	ldi	r24, 0x01	; 1
    2c7a:	e0 cf       	rjmp	.-64     	; 0x2c3c <append_token+0x84>
	char ch;
	uint8_t i;
	switch(token[0])
	{
		case 'x':	// hex character
			result=sscanf(token+1, "%x", &unum); // skip the x and read the hex number
    2c7c:	ce 01       	movw	r24, r28
    2c7e:	01 96       	adiw	r24, 0x01	; 1
    2c80:	9f 93       	push	r25
    2c82:	8f 93       	push	r24
    2c84:	8a e4       	ldi	r24, 0x4A	; 74
    2c86:	91 e0       	ldi	r25, 0x01	; 1
    2c88:	9f 93       	push	r25
    2c8a:	8f 93       	push	r24
    2c8c:	4f 5f       	subi	r20, 0xFF	; 255
    2c8e:	5f 4f       	sbci	r21, 0xFF	; 255
    2c90:	5f 93       	push	r21
    2c92:	4f 93       	push	r20
    2c94:	0e 94 a6 36 	call	0x6d4c	; 0x6d4c <sscanf>
			if(result)
    2c98:	0f 90       	pop	r0
    2c9a:	0f 90       	pop	r0
    2c9c:	0f 90       	pop	r0
    2c9e:	0f 90       	pop	r0
    2ca0:	0f 90       	pop	r0
    2ca2:	0f 90       	pop	r0
    2ca4:	88 23       	and	r24, r24
    2ca6:	49 f2       	breq	.-110    	; 0x2c3a <append_token+0x82>
			{
				if(unum>255) return 0; // limited to 8 bit hex values
    2ca8:	29 81       	ldd	r18, Y+1	; 0x01
    2caa:	3a 81       	ldd	r19, Y+2	; 0x02
    2cac:	2f 3f       	cpi	r18, 0xFF	; 255
    2cae:	31 05       	cpc	r19, r1
    2cb0:	09 f0       	breq	.+2      	; 0x2cb4 <append_token+0xfc>
    2cb2:	18 f6       	brcc	.-122    	; 0x2c3a <append_token+0x82>
				payload[*index]=(uint8_t)unum;
    2cb4:	f8 01       	movw	r30, r16
    2cb6:	90 81       	ld	r25, Z
    2cb8:	f7 01       	movw	r30, r14
    2cba:	e9 0f       	add	r30, r25
    2cbc:	f1 1d       	adc	r31, r1
    2cbe:	20 83       	st	Z, r18
    2cc0:	1e c0       	rjmp	.+60     	; 0x2cfe <append_token+0x146>
				i++;						// advance string index
			}
			result=1;
			break;
		case '\'':	// single character
			result=sscanf(token+1, "%c", &ch);
    2cc2:	ce 01       	movw	r24, r28
    2cc4:	01 96       	adiw	r24, 0x01	; 1
    2cc6:	9f 93       	push	r25
    2cc8:	8f 93       	push	r24
    2cca:	8d e4       	ldi	r24, 0x4D	; 77
    2ccc:	91 e0       	ldi	r25, 0x01	; 1
    2cce:	9f 93       	push	r25
    2cd0:	8f 93       	push	r24
    2cd2:	4f 5f       	subi	r20, 0xFF	; 255
    2cd4:	5f 4f       	sbci	r21, 0xFF	; 255
    2cd6:	5f 93       	push	r21
    2cd8:	4f 93       	push	r20
    2cda:	0e 94 a6 36 	call	0x6d4c	; 0x6d4c <sscanf>
			if(result)
    2cde:	0f 90       	pop	r0
    2ce0:	0f 90       	pop	r0
    2ce2:	0f 90       	pop	r0
    2ce4:	0f 90       	pop	r0
    2ce6:	0f 90       	pop	r0
    2ce8:	0f 90       	pop	r0
    2cea:	88 23       	and	r24, r24
    2cec:	09 f4       	brne	.+2      	; 0x2cf0 <append_token+0x138>
    2cee:	a5 cf       	rjmp	.-182    	; 0x2c3a <append_token+0x82>
			{
				payload[*index]=ch;
    2cf0:	f8 01       	movw	r30, r16
    2cf2:	90 81       	ld	r25, Z
    2cf4:	f7 01       	movw	r30, r14
    2cf6:	e9 0f       	add	r30, r25
    2cf8:	f1 1d       	adc	r31, r1
    2cfa:	99 81       	ldd	r25, Y+1	; 0x01
    2cfc:	90 83       	st	Z, r25
				(*index)++;
    2cfe:	d8 01       	movw	r26, r16
    2d00:	9c 91       	ld	r25, X
    2d02:	9f 5f       	subi	r25, 0xFF	; 255
    2d04:	9c 93       	st	X, r25
				if (*index==0) return 0;
    2d06:	91 11       	cpse	r25, r1
    2d08:	99 cf       	rjmp	.-206    	; 0x2c3c <append_token+0x84>
    2d0a:	97 cf       	rjmp	.-210    	; 0x2c3a <append_token+0x82>
			// So I am reducing the allowed range to -128 / +255
			result=sscanf(token, "%d", &num);
			if(result)
			{
				if(num>255 || num<-128) return 0; 				// limited to 8 bit signed or unsigned arguments
				if(num<=127) payload[*index]=(int8_t)num;	// allow signed from -128 to 127
    2d0c:	f8 01       	movw	r30, r16
    2d0e:	90 81       	ld	r25, Z
    2d10:	f7 01       	movw	r30, r14
    2d12:	e9 0f       	add	r30, r25
    2d14:	f1 1d       	adc	r31, r1
    2d16:	20 83       	st	Z, r18
    2d18:	8a cf       	rjmp	.-236    	; 0x2c2e <append_token+0x76>

00002d1a <sendI2C>:
		serial_puts(str);
	}
	serial_puts("\r\n");
#endif
	// send the data via i2c
	i2c_send_data(address,payload, payload_length, TRUE);
    2d1a:	21 e0       	ldi	r18, 0x01	; 1
    2d1c:	0c 94 46 12 	jmp	0x248c	; 0x248c <i2c_send_data>

00002d20 <sequence_command>:
const char strSeqRythmicPanels[] PROGMEM="(Rythmic Panels) \r\n";
const char strSeqMarchingAnts[] PROGMEM="(Marching Ants Panels) \r\n";


void sequence_command(uint8_t value)
{
    2d20:	ff 92       	push	r15
    2d22:	0f 93       	push	r16
    2d24:	1f 93       	push	r17
    2d26:	cf 93       	push	r28
    2d28:	df 93       	push	r29
    2d2a:	cd b7       	in	r28, 0x3d	; 61
    2d2c:	de b7       	in	r29, 0x3e	; 62
    2d2e:	a3 97       	sbiw	r28, 0x23	; 35
    2d30:	0f b6       	in	r0, 0x3f	; 63
    2d32:	f8 94       	cli
    2d34:	de bf       	out	0x3e, r29	; 62
    2d36:	0f be       	out	0x3f, r0	; 63
    2d38:	cd bf       	out	0x3d, r28	; 61
	char string[35];
	switch(value)
    2d3a:	48 2f       	mov	r20, r24
    2d3c:	50 e0       	ldi	r21, 0x00	; 0
    2d3e:	4a 33       	cpi	r20, 0x3A	; 58
    2d40:	51 05       	cpc	r21, r1
    2d42:	28 f1       	brcs	.+74     	; 0x2d8e <sequence_command+0x6e>
			if(feedbackmessageon) serial_puts_p(strSeqRythmicPanels);
			seq_startsequence();
			break;

		default:
			sprintf(string, "(Sequence %02d not implemented) \r\n", value);
    2d44:	1f 92       	push	r1
    2d46:	8f 93       	push	r24
    2d48:	8d ef       	ldi	r24, 0xFD	; 253
    2d4a:	91 e0       	ldi	r25, 0x01	; 1
    2d4c:	9f 93       	push	r25
    2d4e:	8f 93       	push	r24
    2d50:	8e 01       	movw	r16, r28
    2d52:	0f 5f       	subi	r16, 0xFF	; 255
    2d54:	1f 4f       	sbci	r17, 0xFF	; 255
    2d56:	1f 93       	push	r17
    2d58:	0f 93       	push	r16
    2d5a:	0e 94 84 36 	call	0x6d08	; 0x6d08 <sprintf>
			seq_resetspeed();
    2d5e:	0e 94 04 29 	call	0x5208	; 0x5208 <seq_resetspeed>
			if(errormessageon) serial_puts(string);
    2d62:	0f 90       	pop	r0
    2d64:	0f 90       	pop	r0
    2d66:	0f 90       	pop	r0
    2d68:	0f 90       	pop	r0
    2d6a:	0f 90       	pop	r0
    2d6c:	0f 90       	pop	r0
    2d6e:	80 91 56 02 	lds	r24, 0x0256
    2d72:	81 11       	cpse	r24, r1
    2d74:	1a c5       	rjmp	.+2612   	; 0x37aa <sequence_command+0xa8a>
			break;
	}
}
    2d76:	a3 96       	adiw	r28, 0x23	; 35
    2d78:	0f b6       	in	r0, 0x3f	; 63
    2d7a:	f8 94       	cli
    2d7c:	de bf       	out	0x3e, r29	; 62
    2d7e:	0f be       	out	0x3f, r0	; 63
    2d80:	cd bf       	out	0x3d, r28	; 61
    2d82:	df 91       	pop	r29
    2d84:	cf 91       	pop	r28
    2d86:	1f 91       	pop	r17
    2d88:	0f 91       	pop	r16
    2d8a:	ff 90       	pop	r15
    2d8c:	08 95       	ret


void sequence_command(uint8_t value)
{
	char string[35];
	switch(value)
    2d8e:	fa 01       	movw	r30, r20
    2d90:	e3 58       	subi	r30, 0x83	; 131
    2d92:	ff 4f       	sbci	r31, 0xFF	; 255
    2d94:	0c 94 2c 35 	jmp	0x6a58	; 0x6a58 <__tablejump2__>
			seq_loadspeed(panel_super_slow_speed);	// very slow close
			seq_startsequence();
			if(feedbackmessageon) serial_puts_p(strSeqShortCircuit);
			break;
		case 57: // Rhythmic Panels
			seq_loadsequence(panel_dance, SEQ_SIZE(panel_dance));
    2d98:	6a e5       	ldi	r22, 0x5A	; 90
    2d9a:	88 ef       	ldi	r24, 0xF8	; 248
    2d9c:	96 e0       	ldi	r25, 0x06	; 6
    2d9e:	0e 94 0c 29 	call	0x5218	; 0x5218 <seq_loadsequence>
			seq_resetspeed();
    2da2:	0e 94 04 29 	call	0x5208	; 0x5208 <seq_resetspeed>
			if(feedbackmessageon) serial_puts_p(strSeqRythmicPanels);
    2da6:	80 91 55 02 	lds	r24, 0x0255
    2daa:	88 23       	and	r24, r24
    2dac:	21 f0       	breq	.+8      	; 0x2db6 <sequence_command+0x96>
    2dae:	89 ee       	ldi	r24, 0xE9	; 233
    2db0:	91 e0       	ldi	r25, 0x01	; 1
    2db2:	0e 94 d0 2b 	call	0x57a0	; 0x57a0 <serial_puts_p>
			seq_startsequence();
    2db6:	0e 94 34 29 	call	0x5268	; 0x5268 <seq_startsequence>
			break;
    2dba:	dd cf       	rjmp	.-70     	; 0x2d76 <sequence_command+0x56>
			seq_loadspeed(panel_slow_speed);	// softer close
			seq_startsequence();
			if(feedbackmessageon) serial_puts_p(strSeqMarchingAnts);
			break;
		case 56: // SHORT CIRCUIT / FAINT
			seq_loadsequence(panel_all_open_long, SEQ_SIZE(panel_all_open_long));
    2dbc:	64 e0       	ldi	r22, 0x04	; 4
    2dbe:	88 e2       	ldi	r24, 0x28	; 40
    2dc0:	98 e1       	ldi	r25, 0x18	; 24
    2dc2:	0e 94 0c 29 	call	0x5218	; 0x5218 <seq_loadsequence>
			seq_loadspeed(panel_super_slow_speed);	// very slow close
    2dc6:	89 e0       	ldi	r24, 0x09	; 9
    2dc8:	91 e0       	ldi	r25, 0x01	; 1
    2dca:	0e 94 c6 28 	call	0x518c	; 0x518c <seq_loadspeed>
			seq_startsequence();
    2dce:	0e 94 34 29 	call	0x5268	; 0x5268 <seq_startsequence>
			if(feedbackmessageon) serial_puts_p(strSeqShortCircuit);
    2dd2:	80 91 55 02 	lds	r24, 0x0255
    2dd6:	88 23       	and	r24, r24
    2dd8:	71 f2       	breq	.-100    	; 0x2d76 <sequence_command+0x56>
			DisplayShortCircuit();  				// short circuit display
			SoundFaint(); 							// Faint sound
			MagicFlicker(10);  						// Magic Panel Flicker for 10 seconds
			HPFlicker(10);  						// HPs flicker 10 seconds
			seq_startsequence();					// start panel sequence
			if(feedbackmessageon) serial_puts_p(strSeqShortCircuit);		// debug console feedback
    2dda:	82 eb       	ldi	r24, 0xB2	; 178
    2ddc:	92 e0       	ldi	r25, 0x02	; 2
    2dde:	0e 94 d0 2b 	call	0x57a0	; 0x57a0 <serial_puts_p>
    2de2:	c9 cf       	rjmp	.-110    	; 0x2d76 <sequence_command+0x56>
			seq_resetspeed();
			seq_startsequence();
			if(feedbackmessageon) serial_puts_p(strSeqOpenCloseWave);
			break;
		case 55: // Marching ant
			seq_loadsequence(panel_marching_ants, SEQ_SIZE(panel_marching_ants));
    2de4:	61 e2       	ldi	r22, 0x21	; 33
    2de6:	84 eb       	ldi	r24, 0xB4	; 180
    2de8:	9e e0       	ldi	r25, 0x0E	; 14
    2dea:	0e 94 0c 29 	call	0x5218	; 0x5218 <seq_loadsequence>
			seq_loadspeed(panel_slow_speed);	// softer close
    2dee:	8d e1       	ldi	r24, 0x1D	; 29
    2df0:	91 e0       	ldi	r25, 0x01	; 1
    2df2:	0e 94 c6 28 	call	0x518c	; 0x518c <seq_loadspeed>
			seq_startsequence();
    2df6:	0e 94 34 29 	call	0x5268	; 0x5268 <seq_startsequence>
			if(feedbackmessageon) serial_puts_p(strSeqMarchingAnts);
    2dfa:	80 91 55 02 	lds	r24, 0x0255
    2dfe:	88 23       	and	r24, r24
    2e00:	09 f4       	brne	.+2      	; 0x2e04 <sequence_command+0xe4>
    2e02:	b9 cf       	rjmp	.-142    	; 0x2d76 <sequence_command+0x56>
    2e04:	8f ec       	ldi	r24, 0xCF	; 207
    2e06:	91 e0       	ldi	r25, 0x01	; 1
    2e08:	0e 94 d0 2b 	call	0x57a0	; 0x57a0 <serial_puts_p>
    2e0c:	b4 cf       	rjmp	.-152    	; 0x2d76 <sequence_command+0x56>
			seq_resetspeed();
			seq_startsequence();
			if(feedbackmessageon) serial_puts_p(strSeqFastWave);
			break;
		case 54: // WAVE2
			seq_loadsequence(panel_open_close_wave, SEQ_SIZE(panel_open_close_wave));
    2e0e:	66 e1       	ldi	r22, 0x16	; 22
    2e10:	8a e8       	ldi	r24, 0x8A	; 138
    2e12:	91 e1       	ldi	r25, 0x11	; 17
    2e14:	0e 94 0c 29 	call	0x5218	; 0x5218 <seq_loadsequence>
			seq_resetspeed();
    2e18:	0e 94 04 29 	call	0x5208	; 0x5208 <seq_resetspeed>
			seq_startsequence();
    2e1c:	0e 94 34 29 	call	0x5268	; 0x5268 <seq_startsequence>
			if(feedbackmessageon) serial_puts_p(strSeqOpenCloseWave);
    2e20:	80 91 55 02 	lds	r24, 0x0255
    2e24:	88 23       	and	r24, r24
    2e26:	09 f4       	brne	.+2      	; 0x2e2a <sequence_command+0x10a>
    2e28:	a6 cf       	rjmp	.-180    	; 0x2d76 <sequence_command+0x56>
			seq_loadsequence(panel_open_close_wave, SEQ_SIZE(panel_open_close_wave));
			seq_resetspeed();
			HPFlash(5); 	 					// HPs flash for 5 seconds
			SoundOpenWave(); 					// long happy sound
			seq_startsequence();				// start panel sequence
			if(feedbackmessageon) serial_puts_p(strSeqOpenCloseWave);	// debug console feedback
    2e2a:	80 ee       	ldi	r24, 0xE0	; 224
    2e2c:	92 e0       	ldi	r25, 0x02	; 2
    2e2e:	0e 94 d0 2b 	call	0x57a0	; 0x57a0 <serial_puts_p>
    2e32:	a1 cf       	rjmp	.-190    	; 0x2d76 <sequence_command+0x56>
			seq_resetspeed();
			seq_startsequence();
			if(feedbackmessageon) serial_puts_p(strSeqWave);
			break;
		case 53: // MOODY FAST WAVE
			seq_loadsequence(panel_fast_wave, SEQ_SIZE(panel_fast_wave));
    2e34:	68 e1       	ldi	r22, 0x18	; 24
    2e36:	8e e6       	ldi	r24, 0x6E	; 110
    2e38:	93 e1       	ldi	r25, 0x13	; 19
    2e3a:	0e 94 0c 29 	call	0x5218	; 0x5218 <seq_loadsequence>
			seq_resetspeed();
    2e3e:	0e 94 04 29 	call	0x5208	; 0x5208 <seq_resetspeed>
			seq_startsequence();
    2e42:	0e 94 34 29 	call	0x5268	; 0x5268 <seq_startsequence>
			if(feedbackmessageon) serial_puts_p(strSeqFastWave);
    2e46:	80 91 55 02 	lds	r24, 0x0255
    2e4a:	88 23       	and	r24, r24
    2e4c:	09 f4       	brne	.+2      	; 0x2e50 <sequence_command+0x130>
    2e4e:	93 cf       	rjmp	.-218    	; 0x2d76 <sequence_command+0x56>
			seq_resetspeed();
			DisplayFlash4();  					// 4 seconds flash display
			HPFlicker(4);						// HPs flicker for 4 seconds
			SoundFastWave(); 					// moody sound
			seq_startsequence();				// start panel sequence
			if(feedbackmessageon) serial_puts_p(strSeqFastWave);		// debug console feedback
    2e50:	85 ef       	ldi	r24, 0xF5	; 245
    2e52:	92 e0       	ldi	r25, 0x02	; 2
    2e54:	0e 94 d0 2b 	call	0x57a0	; 0x57a0 <serial_puts_p>
    2e58:	8e cf       	rjmp	.-228    	; 0x2d76 <sequence_command+0x56>
			seq_loadspeed(panel_slow_speed);	// softer close
			seq_startsequence();
			if(feedbackmessageon) serial_puts_p(strSeqScream);
			break;
		case 52: // WAVE1
			seq_loadsequence(panel_wave, SEQ_SIZE(panel_wave));
    2e5a:	6d e0       	ldi	r22, 0x0D	; 13
    2e5c:	8e e7       	ldi	r24, 0x7E	; 126
    2e5e:	95 e1       	ldi	r25, 0x15	; 21
    2e60:	0e 94 0c 29 	call	0x5218	; 0x5218 <seq_loadsequence>
			seq_resetspeed();
    2e64:	0e 94 04 29 	call	0x5208	; 0x5208 <seq_resetspeed>
			seq_startsequence();
    2e68:	0e 94 34 29 	call	0x5268	; 0x5268 <seq_startsequence>
			if(feedbackmessageon) serial_puts_p(strSeqWave);
    2e6c:	80 91 55 02 	lds	r24, 0x0255
    2e70:	88 23       	and	r24, r24
    2e72:	09 f4       	brne	.+2      	; 0x2e76 <sequence_command+0x156>
    2e74:	80 cf       	rjmp	.-256    	; 0x2d76 <sequence_command+0x56>
			seq_loadsequence(panel_wave, SEQ_SIZE(panel_wave));
			seq_resetspeed();
			HPFlash(4);							// flash holos for 4 seconds
			SoundWave(); 						// happy sound
			seq_startsequence();				// start sequence
			if(feedbackmessageon) serial_puts_p(strSeqWave);			// debug console feedback
    2e76:	84 e0       	ldi	r24, 0x04	; 4
    2e78:	93 e0       	ldi	r25, 0x03	; 3
    2e7a:	0e 94 d0 2b 	call	0x57a0	; 0x57a0 <serial_puts_p>
    2e7e:	7b cf       	rjmp	.-266    	; 0x2d76 <sequence_command+0x56>
		//	:SE56 Faint/Short Circuit
		//	:SE57 Rythmic panel dance
		//////////////////////////////////////////

		case 51: // SCREAM
			seq_loadsequence(panel_all_open, SEQ_SIZE(panel_all_open));
    2e80:	64 e0       	ldi	r22, 0x04	; 4
    2e82:	80 e8       	ldi	r24, 0x80	; 128
    2e84:	98 e1       	ldi	r25, 0x18	; 24
    2e86:	0e 94 0c 29 	call	0x5218	; 0x5218 <seq_loadsequence>
			seq_loadspeed(panel_slow_speed);	// softer close
    2e8a:	8d e1       	ldi	r24, 0x1D	; 29
    2e8c:	91 e0       	ldi	r25, 0x01	; 1
    2e8e:	0e 94 c6 28 	call	0x518c	; 0x518c <seq_loadspeed>
			seq_startsequence();
    2e92:	0e 94 34 29 	call	0x5268	; 0x5268 <seq_startsequence>
			if(feedbackmessageon) serial_puts_p(strSeqScream);
    2e96:	80 91 55 02 	lds	r24, 0x0255
    2e9a:	88 23       	and	r24, r24
    2e9c:	09 f4       	brne	.+2      	; 0x2ea0 <sequence_command+0x180>
    2e9e:	6b cf       	rjmp	.-298    	; 0x2d76 <sequence_command+0x56>
			SoundScream();						// scream sound
			DisplayScream(); 					// scream display
			MagicFlicker(4); 					// magic panel on for 4 seconds
			HPFlicker(4);						// HPs flicker for 4 seconds
			seq_startsequence();				// start panel sequence
			if(feedbackmessageon) serial_puts_p(strSeqScream);		// debug console feedback
    2ea0:	8e e0       	ldi	r24, 0x0E	; 14
    2ea2:	93 e0       	ldi	r25, 0x03	; 3
    2ea4:	0e 94 d0 2b 	call	0x57a0	; 0x57a0 <serial_puts_p>
    2ea8:	66 cf       	rjmp	.-308    	; 0x2d76 <sequence_command+0x56>
}

const char strSoundCommand[] PROGMEM="Sound command\r\n";
void parse_sound_command(char* command,uint8_t length)
{
	if(feedbackmessageon) serial_puts_p(strSoundCommand);
    2eaa:	80 91 55 02 	lds	r24, 0x0255
    2eae:	88 23       	and	r24, r24
    2eb0:	21 f0       	breq	.+8      	; 0x2eba <sequence_command+0x19a>
    2eb2:	83 ea       	ldi	r24, 0xA3	; 163
    2eb4:	93 e0       	ldi	r25, 0x03	; 3
    2eb6:	0e 94 d0 2b 	call	0x57a0	; 0x57a0 <serial_puts_p>

#ifdef _MP3TRIGGER_
	// pass on command to our own MP3_Trigger interpreter
	mp3_parse_command(command);
    2eba:	83 e5       	ldi	r24, 0x53	; 83
    2ebc:	91 e0       	ldi	r25, 0x01	; 1
    2ebe:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <mp3_parse_command>
// JEDI Actions Commands
/////////////////////////////////////////////////

void DisplayScream()
{
	suart_puts("@0T5\r"); 	// scream display
    2ec2:	86 e5       	ldi	r24, 0x56	; 86
    2ec4:	91 e0       	ldi	r25, 0x01	; 1
    2ec6:	0e 94 2a 32 	call	0x6454	; 0x6454 <suart_puts>
    2eca:	2f ef       	ldi	r18, 0xFF	; 255
    2ecc:	81 ee       	ldi	r24, 0xE1	; 225
    2ece:	94 e0       	ldi	r25, 0x04	; 4
    2ed0:	21 50       	subi	r18, 0x01	; 1
    2ed2:	80 40       	sbci	r24, 0x00	; 0
    2ed4:	90 40       	sbci	r25, 0x00	; 0
    2ed6:	e1 f7       	brne	.-8      	; 0x2ed0 <sequence_command+0x1b0>
    2ed8:	00 c0       	rjmp	.+0      	; 0x2eda <sequence_command+0x1ba>
    2eda:	00 00       	nop
}

void HPFlicker(uint8_t seconds)	// all HP flicer seconds from 0 (off) to 99
{
	char string[7];
	sprintf(string, "*F0%02d\r", seconds);
    2edc:	1f 92       	push	r1
    2ede:	33 e0       	ldi	r19, 0x03	; 3
    2ee0:	f3 2e       	mov	r15, r19
    2ee2:	ff 92       	push	r15
    2ee4:	85 e6       	ldi	r24, 0x65	; 101
    2ee6:	91 e0       	ldi	r25, 0x01	; 1
    2ee8:	9f 93       	push	r25
    2eea:	8f 93       	push	r24
    2eec:	8e 01       	movw	r16, r28
    2eee:	0f 5f       	subi	r16, 0xFF	; 255
    2ef0:	1f 4f       	sbci	r17, 0xFF	; 255
    2ef2:	1f 93       	push	r17
    2ef4:	0f 93       	push	r16
    2ef6:	0e 94 84 36 	call	0x6d08	; 0x6d08 <sprintf>
	suart_puts(string);
    2efa:	c8 01       	movw	r24, r16
    2efc:	0e 94 2a 32 	call	0x6454	; 0x6454 <suart_puts>
}

void MagicFlicker(uint8_t seconds)	// seconds from 0 (off) to 99 (always on)
{
	char string[7];
	sprintf(string, "*MF%02d\r", seconds);
    2f00:	1f 92       	push	r1
    2f02:	ff 92       	push	r15
    2f04:	8c e5       	ldi	r24, 0x5C	; 92
    2f06:	91 e0       	ldi	r25, 0x01	; 1
    2f08:	9f 93       	push	r25
    2f0a:	8f 93       	push	r24
    2f0c:	1f 93       	push	r17
    2f0e:	0f 93       	push	r16
    2f10:	0e 94 84 36 	call	0x6d08	; 0x6d08 <sprintf>
	suart_puts(string);
    2f14:	c8 01       	movw	r24, r16
    2f16:	0e 94 2a 32 	call	0x6454	; 0x6454 <suart_puts>
    2f1a:	ef ef       	ldi	r30, 0xFF	; 255
    2f1c:	f0 e7       	ldi	r31, 0x70	; 112
    2f1e:	22 e0       	ldi	r18, 0x02	; 2
    2f20:	e1 50       	subi	r30, 0x01	; 1
    2f22:	f0 40       	sbci	r31, 0x00	; 0
    2f24:	20 40       	sbci	r18, 0x00	; 0
    2f26:	e1 f7       	brne	.-8      	; 0x2f20 <sequence_command+0x200>
    2f28:	00 c0       	rjmp	.+0      	; 0x2f2a <sequence_command+0x20a>
    2f2a:	00 00       	nop
		case 15: // SCREAM no panels: sound + lights but no panels
			SoundScream();		 				// code for scream sound
			DisplayScream(); 					// scream display
			HPFlicker(3);						// holos flicker for 4 seconds
			MagicFlicker(3); 					// magic panel on for 4 seconds
			if(feedbackmessageon) serial_puts_p(strSeqScreamNoPanels); // debug console feedback
    2f2c:	0f b6       	in	r0, 0x3f	; 63
    2f2e:	f8 94       	cli
    2f30:	de bf       	out	0x3e, r29	; 62
    2f32:	0f be       	out	0x3f, r0	; 63
    2f34:	cd bf       	out	0x3d, r28	; 61
    2f36:	80 91 55 02 	lds	r24, 0x0255
    2f3a:	88 23       	and	r24, r24
    2f3c:	09 f4       	brne	.+2      	; 0x2f40 <sequence_command+0x220>
    2f3e:	1b cf       	rjmp	.-458    	; 0x2d76 <sequence_command+0x56>
    2f40:	8d ef       	ldi	r24, 0xFD	; 253
    2f42:	91 e0       	ldi	r25, 0x01	; 1
    2f44:	0e 94 d0 2b 	call	0x57a0	; 0x57a0 <serial_puts_p>
    2f48:	16 cf       	rjmp	.-468    	; 0x2d76 <sequence_command+0x56>
			seq_resetspeed();					// sequence speed to fast
			stop_command(0);					// all panels off RC and closed
			if(feedbackmessageon) serial_puts_p(strSeqAwake);			// debug console feedback
			break;
		case 14: // EXCITED	random sounds, holos movement, holo lights on, panels closed
			seq_stopsequence(); 				// abort any previous sequence immediately
    2f4a:	0e 94 3e 29 	call	0x527c	; 0x527c <seq_stopsequence>
			seq_loadspeed(panel_slow_speed);	// go slow
    2f4e:	8d e1       	ldi	r24, 0x1D	; 29
    2f50:	91 e0       	ldi	r25, 0x01	; 1
    2f52:	0e 94 c6 28 	call	0x518c	; 0x518c <seq_loadspeed>
			seq_loadsequence(panel_init, SEQ_SIZE(panel_init));
    2f56:	62 e0       	ldi	r22, 0x02	; 2
    2f58:	8c ec       	ldi	r24, 0xCC	; 204
    2f5a:	96 e0       	ldi	r25, 0x06	; 6
    2f5c:	0e 94 0c 29 	call	0x5218	; 0x5218 <seq_loadsequence>
			seq_startsequence();				// close panels
    2f60:	0e 94 34 29 	call	0x5268	; 0x5268 <seq_startsequence>
}

// sets JEDI display and Holos in their default state
void init_jedi()
{
	seq_remove_completion_callback(); // remove any competing completion callback
    2f64:	0e 94 c1 28 	call	0x5182	; 0x5182 <seq_remove_completion_callback>
	suart_puts("*H000\r");	// quick way to turn off holos if connected to MarcDuino
    2f68:	8a e3       	ldi	r24, 0x3A	; 58
    2f6a:	91 e0       	ldi	r25, 0x01	; 1
    2f6c:	0e 94 2a 32 	call	0x6454	; 0x6454 <suart_puts>
    2f70:	2f ef       	ldi	r18, 0xFF	; 255
    2f72:	81 ee       	ldi	r24, 0xE1	; 225
    2f74:	94 e0       	ldi	r25, 0x04	; 4
    2f76:	21 50       	subi	r18, 0x01	; 1
    2f78:	80 40       	sbci	r24, 0x00	; 0
    2f7a:	90 40       	sbci	r25, 0x00	; 0
    2f7c:	e1 f7       	brne	.-8      	; 0x2f76 <sequence_command+0x256>
    2f7e:	00 c0       	rjmp	.+0      	; 0x2f80 <sequence_command+0x260>
    2f80:	00 00       	nop
	_delay_ms(100);
	suart_puts("@0T1\r");	// abort test routine, reset all to normal
    2f82:	81 e4       	ldi	r24, 0x41	; 65
    2f84:	91 e0       	ldi	r25, 0x01	; 1
    2f86:	0e 94 2a 32 	call	0x6454	; 0x6454 <suart_puts>
    2f8a:	ef ef       	ldi	r30, 0xFF	; 255
    2f8c:	f9 ef       	ldi	r31, 0xF9	; 249
    2f8e:	20 e0       	ldi	r18, 0x00	; 0
    2f90:	e1 50       	subi	r30, 0x01	; 1
    2f92:	f0 40       	sbci	r31, 0x00	; 0
    2f94:	20 40       	sbci	r18, 0x00	; 0
    2f96:	e1 f7       	brne	.-8      	; 0x2f90 <sequence_command+0x270>
    2f98:	00 c0       	rjmp	.+0      	; 0x2f9a <sequence_command+0x27a>
    2f9a:	00 00       	nop
	suart_puts("*ST00\r"); 	// all holos to stop and lights off
}

void HPRandom()
{
	suart_puts("*RD00\r"); 	// all holos to random
    2f9c:	8c ee       	ldi	r24, 0xEC	; 236
    2f9e:	91 e0       	ldi	r25, 0x01	; 1
    2fa0:	0e 94 2a 32 	call	0x6454	; 0x6454 <suart_puts>
	suart_puts("*H000\r");
}

void HPOn()
{
	suart_puts("*ON00\r"); 	// holo lights on
    2fa4:	86 ef       	ldi	r24, 0xF6	; 246
    2fa6:	91 e0       	ldi	r25, 0x01	; 1
    2fa8:	0e 94 2a 32 	call	0x6454	; 0x6454 <suart_puts>
}

const char strSoundCommand[] PROGMEM="Sound command\r\n";
void parse_sound_command(char* command,uint8_t length)
{
	if(feedbackmessageon) serial_puts_p(strSoundCommand);
    2fac:	80 91 55 02 	lds	r24, 0x0255
    2fb0:	88 23       	and	r24, r24
    2fb2:	21 f0       	breq	.+8      	; 0x2fbc <sequence_command+0x29c>
    2fb4:	83 ea       	ldi	r24, 0xA3	; 163
    2fb6:	93 e0       	ldi	r25, 0x03	; 3
    2fb8:	0e 94 d0 2b 	call	0x57a0	; 0x57a0 <serial_puts_p>

#ifdef _MP3TRIGGER_
	// pass on command to our own MP3_Trigger interpreter
	mp3_parse_command(command);
    2fbc:	83 ef       	ldi	r24, 0xF3	; 243
    2fbe:	91 e0       	ldi	r25, 0x01	; 1
    2fc0:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <mp3_parse_command>

			init_jedi();						// JEDI back to default
			HPRandom();			 				// all HPs to random
			HPOn(); 							// all HPs lights on
			SoundRandom();						// random sounds mode
			seq_resetspeed();					// sequence speed to fast
    2fc4:	0e 94 04 29 	call	0x5208	; 0x5208 <seq_resetspeed>
    2fc8:	0b e9       	ldi	r16, 0x9B	; 155
    2fca:	12 e0       	ldi	r17, 0x02	; 2
    2fcc:	ff 24       	eor	r15, r15
    2fce:	f3 94       	inc	r15
	// all panels hold to last position and servo off
	if(value==0)
	{
		for(i=1; i<=SERVO_NUM; i++)
		 {
			 panel_rc_control[i-1]=0;
    2fd0:	f8 01       	movw	r30, r16
    2fd2:	11 92       	st	Z+, r1
    2fd4:	8f 01       	movw	r16, r30
			 servo_set(i,SERVO_NO_PULSE);
    2fd6:	6f ef       	ldi	r22, 0xFF	; 255
    2fd8:	7f ef       	ldi	r23, 0xFF	; 255
    2fda:	8f 2d       	mov	r24, r15
    2fdc:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <servo_set>
	if(value>SERVO_NUM) return;

	// all panels hold to last position and servo off
	if(value==0)
	{
		for(i=1; i<=SERVO_NUM; i++)
    2fe0:	f3 94       	inc	r15
    2fe2:	fb e0       	ldi	r31, 0x0B	; 11
    2fe4:	ff 12       	cpse	r15, r31
    2fe6:	f4 cf       	rjmp	.-24     	; 0x2fd0 <sequence_command+0x2b0>
			HPRandom();			 				// all HPs to random
			HPOn(); 							// all HPs lights on
			SoundRandom();						// random sounds mode
			seq_resetspeed();					// sequence speed to fast
			stop_command(0);					// all panels off RC and closed
			if(feedbackmessageon) serial_puts_p(strSeqExcited);		// debug console feedback
    2fe8:	80 91 55 02 	lds	r24, 0x0255
    2fec:	88 23       	and	r24, r24
    2fee:	09 f4       	brne	.+2      	; 0x2ff2 <sequence_command+0x2d2>
    2ff0:	c2 ce       	rjmp	.-636    	; 0x2d76 <sequence_command+0x56>
    2ff2:	83 e1       	ldi	r24, 0x13	; 19
    2ff4:	92 e0       	ldi	r25, 0x02	; 2
    2ff6:	0e 94 d0 2b 	call	0x57a0	; 0x57a0 <serial_puts_p>
    2ffa:	bd ce       	rjmp	.-646    	; 0x2d76 <sequence_command+0x56>
			if(feedbackmessageon) serial_puts_p(strSeqTopRC);
			break;

		case 13: // AWAKE	random sounds, holos off, panels closed

			seq_stopsequence(); 				// abort any previous sequence immediately
    2ffc:	0e 94 3e 29 	call	0x527c	; 0x527c <seq_stopsequence>
			seq_loadspeed(panel_slow_speed);	// go slow
    3000:	8d e1       	ldi	r24, 0x1D	; 29
    3002:	91 e0       	ldi	r25, 0x01	; 1
    3004:	0e 94 c6 28 	call	0x518c	; 0x518c <seq_loadspeed>
			seq_loadsequence(panel_init, SEQ_SIZE(panel_init));
    3008:	62 e0       	ldi	r22, 0x02	; 2
    300a:	8c ec       	ldi	r24, 0xCC	; 204
    300c:	96 e0       	ldi	r25, 0x06	; 6
    300e:	0e 94 0c 29 	call	0x5218	; 0x5218 <seq_loadsequence>
			seq_startsequence();				// close panels
    3012:	0e 94 34 29 	call	0x5268	; 0x5268 <seq_startsequence>
}

// sets JEDI display and Holos in their default state
void init_jedi()
{
	seq_remove_completion_callback(); // remove any competing completion callback
    3016:	0e 94 c1 28 	call	0x5182	; 0x5182 <seq_remove_completion_callback>
	suart_puts("*H000\r");	// quick way to turn off holos if connected to MarcDuino
    301a:	8a e3       	ldi	r24, 0x3A	; 58
    301c:	91 e0       	ldi	r25, 0x01	; 1
    301e:	0e 94 2a 32 	call	0x6454	; 0x6454 <suart_puts>
    3022:	2f ef       	ldi	r18, 0xFF	; 255
    3024:	81 ee       	ldi	r24, 0xE1	; 225
    3026:	94 e0       	ldi	r25, 0x04	; 4
    3028:	21 50       	subi	r18, 0x01	; 1
    302a:	80 40       	sbci	r24, 0x00	; 0
    302c:	90 40       	sbci	r25, 0x00	; 0
    302e:	e1 f7       	brne	.-8      	; 0x3028 <sequence_command+0x308>
    3030:	00 c0       	rjmp	.+0      	; 0x3032 <sequence_command+0x312>
    3032:	00 00       	nop
	_delay_ms(100);
	suart_puts("@0T1\r");	// abort test routine, reset all to normal
    3034:	81 e4       	ldi	r24, 0x41	; 65
    3036:	91 e0       	ldi	r25, 0x01	; 1
    3038:	0e 94 2a 32 	call	0x6454	; 0x6454 <suart_puts>
    303c:	ef ef       	ldi	r30, 0xFF	; 255
    303e:	f9 ef       	ldi	r31, 0xF9	; 249
    3040:	20 e0       	ldi	r18, 0x00	; 0
    3042:	e1 50       	subi	r30, 0x01	; 1
    3044:	f0 40       	sbci	r31, 0x00	; 0
    3046:	20 40       	sbci	r18, 0x00	; 0
    3048:	e1 f7       	brne	.-8      	; 0x3042 <sequence_command+0x322>
    304a:	00 c0       	rjmp	.+0      	; 0x304c <sequence_command+0x32c>
    304c:	00 00       	nop
	suart_puts("*ON00\r"); 	// holo lights on
}

void HPStop()
{
	suart_puts("*ST00\r"); 	// all holos to stop and lights off
    304e:	82 ee       	ldi	r24, 0xE2	; 226
    3050:	91 e0       	ldi	r25, 0x01	; 1
    3052:	0e 94 2a 32 	call	0x6454	; 0x6454 <suart_puts>
}

const char strSoundCommand[] PROGMEM="Sound command\r\n";
void parse_sound_command(char* command,uint8_t length)
{
	if(feedbackmessageon) serial_puts_p(strSoundCommand);
    3056:	80 91 55 02 	lds	r24, 0x0255
    305a:	88 23       	and	r24, r24
    305c:	21 f0       	breq	.+8      	; 0x3066 <sequence_command+0x346>
    305e:	83 ea       	ldi	r24, 0xA3	; 163
    3060:	93 e0       	ldi	r25, 0x03	; 3
    3062:	0e 94 d0 2b 	call	0x57a0	; 0x57a0 <serial_puts_p>

#ifdef _MP3TRIGGER_
	// pass on command to our own MP3_Trigger interpreter
	mp3_parse_command(command);
    3066:	83 ef       	ldi	r24, 0xF3	; 243
    3068:	91 e0       	ldi	r25, 0x01	; 1
    306a:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <mp3_parse_command>
			seq_startsequence();				// close panels

			init_jedi();						// JEDI back to default
			HPStop(); 							// all HPs to stop
			SoundRandom();						// random sounds mode
			seq_resetspeed();					// sequence speed to fast
    306e:	0e 94 04 29 	call	0x5208	; 0x5208 <seq_resetspeed>
    3072:	0b e9       	ldi	r16, 0x9B	; 155
    3074:	12 e0       	ldi	r17, 0x02	; 2
    3076:	ff 24       	eor	r15, r15
    3078:	f3 94       	inc	r15
	// all panels hold to last position and servo off
	if(value==0)
	{
		for(i=1; i<=SERVO_NUM; i++)
		 {
			 panel_rc_control[i-1]=0;
    307a:	f8 01       	movw	r30, r16
    307c:	11 92       	st	Z+, r1
    307e:	8f 01       	movw	r16, r30
			 servo_set(i,SERVO_NO_PULSE);
    3080:	6f ef       	ldi	r22, 0xFF	; 255
    3082:	7f ef       	ldi	r23, 0xFF	; 255
    3084:	8f 2d       	mov	r24, r15
    3086:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <servo_set>
	if(value>SERVO_NUM) return;

	// all panels hold to last position and servo off
	if(value==0)
	{
		for(i=1; i<=SERVO_NUM; i++)
    308a:	f3 94       	inc	r15
    308c:	fb e0       	ldi	r31, 0x0B	; 11
    308e:	ff 12       	cpse	r15, r31
    3090:	f4 cf       	rjmp	.-24     	; 0x307a <sequence_command+0x35a>
			init_jedi();						// JEDI back to default
			HPStop(); 							// all HPs to stop
			SoundRandom();						// random sounds mode
			seq_resetspeed();					// sequence speed to fast
			stop_command(0);					// all panels off RC and closed
			if(feedbackmessageon) serial_puts_p(strSeqAwake);			// debug console feedback
    3092:	80 91 55 02 	lds	r24, 0x0255
    3096:	88 23       	and	r24, r24
    3098:	09 f4       	brne	.+2      	; 0x309c <sequence_command+0x37c>
    309a:	6d ce       	rjmp	.-806    	; 0x2d76 <sequence_command+0x56>
    309c:	87 e2       	ldi	r24, 0x27	; 39
    309e:	92 e0       	ldi	r25, 0x02	; 2
    30a0:	0e 94 d0 2b 	call	0x57a0	; 0x57a0 <serial_puts_p>
    30a4:	68 ce       	rjmp	.-816    	; 0x2d76 <sequence_command+0x56>
		}
		return;
	}

	// add the panel to RC controlled list
	panel_rc_control[value-1]=1;
    30a6:	81 e0       	ldi	r24, 0x01	; 1
    30a8:	80 93 a1 02 	sts	0x02A1, r24
    30ac:	80 93 a2 02 	sts	0x02A2, r24
    30b0:	80 93 a3 02 	sts	0x02A3, r24
    30b4:	80 93 a4 02 	sts	0x02A4, r24
		case 12: // TOP PIE PANELS RC
			rc_command(7);
			rc_command(8);
			rc_command(9);
			rc_command(10);
			if(feedbackmessageon) serial_puts_p(strSeqTopRC);
    30b8:	80 91 55 02 	lds	r24, 0x0255
    30bc:	88 23       	and	r24, r24
    30be:	09 f4       	brne	.+2      	; 0x30c2 <sequence_command+0x3a2>
    30c0:	5a ce       	rjmp	.-844    	; 0x2d76 <sequence_command+0x56>
    30c2:	89 e3       	ldi	r24, 0x39	; 57
    30c4:	92 e0       	ldi	r25, 0x02	; 2
    30c6:	0e 94 d0 2b 	call	0x57a0	; 0x57a0 <serial_puts_p>
    30ca:	55 ce       	rjmp	.-854    	; 0x2d76 <sequence_command+0x56>
			if(feedbackmessageon) serial_puts_p(strSeqQuiet);			// debug console feedback
			break;

		case 11: // WIDE AWAKE	random sounds, holos on random, panels closed

			seq_stopsequence(); 				// abort any previous sequence immediately
    30cc:	0e 94 3e 29 	call	0x527c	; 0x527c <seq_stopsequence>
			seq_loadspeed(panel_slow_speed);	// go slow
    30d0:	8d e1       	ldi	r24, 0x1D	; 29
    30d2:	91 e0       	ldi	r25, 0x01	; 1
    30d4:	0e 94 c6 28 	call	0x518c	; 0x518c <seq_loadspeed>
			seq_loadsequence(panel_init, SEQ_SIZE(panel_init));
    30d8:	62 e0       	ldi	r22, 0x02	; 2
    30da:	8c ec       	ldi	r24, 0xCC	; 204
    30dc:	96 e0       	ldi	r25, 0x06	; 6
    30de:	0e 94 0c 29 	call	0x5218	; 0x5218 <seq_loadsequence>
			seq_startsequence();				// close panels
    30e2:	0e 94 34 29 	call	0x5268	; 0x5268 <seq_startsequence>
}

// sets JEDI display and Holos in their default state
void init_jedi()
{
	seq_remove_completion_callback(); // remove any competing completion callback
    30e6:	0e 94 c1 28 	call	0x5182	; 0x5182 <seq_remove_completion_callback>
	suart_puts("*H000\r");	// quick way to turn off holos if connected to MarcDuino
    30ea:	8a e3       	ldi	r24, 0x3A	; 58
    30ec:	91 e0       	ldi	r25, 0x01	; 1
    30ee:	0e 94 2a 32 	call	0x6454	; 0x6454 <suart_puts>
    30f2:	2f ef       	ldi	r18, 0xFF	; 255
    30f4:	81 ee       	ldi	r24, 0xE1	; 225
    30f6:	94 e0       	ldi	r25, 0x04	; 4
    30f8:	21 50       	subi	r18, 0x01	; 1
    30fa:	80 40       	sbci	r24, 0x00	; 0
    30fc:	90 40       	sbci	r25, 0x00	; 0
    30fe:	e1 f7       	brne	.-8      	; 0x30f8 <sequence_command+0x3d8>
    3100:	00 c0       	rjmp	.+0      	; 0x3102 <sequence_command+0x3e2>
    3102:	00 00       	nop
	_delay_ms(100);
	suart_puts("@0T1\r");	// abort test routine, reset all to normal
    3104:	81 e4       	ldi	r24, 0x41	; 65
    3106:	91 e0       	ldi	r25, 0x01	; 1
    3108:	0e 94 2a 32 	call	0x6454	; 0x6454 <suart_puts>
    310c:	ef ef       	ldi	r30, 0xFF	; 255
    310e:	f9 ef       	ldi	r31, 0xF9	; 249
    3110:	20 e0       	ldi	r18, 0x00	; 0
    3112:	e1 50       	subi	r30, 0x01	; 1
    3114:	f0 40       	sbci	r31, 0x00	; 0
    3116:	20 40       	sbci	r18, 0x00	; 0
    3118:	e1 f7       	brne	.-8      	; 0x3112 <sequence_command+0x3f2>
    311a:	00 c0       	rjmp	.+0      	; 0x311c <sequence_command+0x3fc>
    311c:	00 00       	nop
	suart_puts("*ST00\r"); 	// all holos to stop and lights off
}

void HPRandom()
{
	suart_puts("*RD00\r"); 	// all holos to random
    311e:	8c ee       	ldi	r24, 0xEC	; 236
    3120:	91 e0       	ldi	r25, 0x01	; 1
    3122:	0e 94 2a 32 	call	0x6454	; 0x6454 <suart_puts>
}

const char strSoundCommand[] PROGMEM="Sound command\r\n";
void parse_sound_command(char* command,uint8_t length)
{
	if(feedbackmessageon) serial_puts_p(strSoundCommand);
    3126:	80 91 55 02 	lds	r24, 0x0255
    312a:	88 23       	and	r24, r24
    312c:	21 f0       	breq	.+8      	; 0x3136 <sequence_command+0x416>
    312e:	83 ea       	ldi	r24, 0xA3	; 163
    3130:	93 e0       	ldi	r25, 0x03	; 3
    3132:	0e 94 d0 2b 	call	0x57a0	; 0x57a0 <serial_puts_p>

#ifdef _MP3TRIGGER_
	// pass on command to our own MP3_Trigger interpreter
	mp3_parse_command(command);
    3136:	83 ef       	ldi	r24, 0xF3	; 243
    3138:	91 e0       	ldi	r25, 0x01	; 1
    313a:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <mp3_parse_command>
			seq_startsequence();				// close panels

			init_jedi();						// JEDI back to default
			HPRandom();			 				// all HPs to random
			SoundRandom();						// random sounds mode
			seq_resetspeed();					// sequence speed to fast
    313e:	0e 94 04 29 	call	0x5208	; 0x5208 <seq_resetspeed>
    3142:	0b e9       	ldi	r16, 0x9B	; 155
    3144:	12 e0       	ldi	r17, 0x02	; 2
    3146:	ff 24       	eor	r15, r15
    3148:	f3 94       	inc	r15
	// all panels hold to last position and servo off
	if(value==0)
	{
		for(i=1; i<=SERVO_NUM; i++)
		 {
			 panel_rc_control[i-1]=0;
    314a:	f8 01       	movw	r30, r16
    314c:	11 92       	st	Z+, r1
    314e:	8f 01       	movw	r16, r30
			 servo_set(i,SERVO_NO_PULSE);
    3150:	6f ef       	ldi	r22, 0xFF	; 255
    3152:	7f ef       	ldi	r23, 0xFF	; 255
    3154:	8f 2d       	mov	r24, r15
    3156:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <servo_set>
	if(value>SERVO_NUM) return;

	// all panels hold to last position and servo off
	if(value==0)
	{
		for(i=1; i<=SERVO_NUM; i++)
    315a:	f3 94       	inc	r15
    315c:	fb e0       	ldi	r31, 0x0B	; 11
    315e:	ff 12       	cpse	r15, r31
    3160:	f4 cf       	rjmp	.-24     	; 0x314a <sequence_command+0x42a>
			init_jedi();						// JEDI back to default
			HPRandom();			 				// all HPs to random
			SoundRandom();						// random sounds mode
			seq_resetspeed();					// sequence speed to fast
			stop_command(0);					// all panels off RC and closed
			if(feedbackmessageon) serial_puts_p(strSeqWideAwake);		// debug console feedback
    3162:	80 91 55 02 	lds	r24, 0x0255
    3166:	88 23       	and	r24, r24
    3168:	09 f4       	brne	.+2      	; 0x316c <sequence_command+0x44c>
    316a:	05 ce       	rjmp	.-1014   	; 0x2d76 <sequence_command+0x56>
    316c:	83 e5       	ldi	r24, 0x53	; 83
    316e:	92 e0       	ldi	r25, 0x02	; 2
    3170:	0e 94 d0 2b 	call	0x57a0	; 0x57a0 <serial_puts_p>
    3174:	00 ce       	rjmp	.-1024   	; 0x2d76 <sequence_command+0x56>
			seq_startsequence();				// start panel sequence
			if(feedbackmessageon) serial_puts_p(strSeqDisco);			// debug console feedback
			break;

		case 10: // QUIET   sounds off, holo stop, panel closed
			seq_stopsequence(); 				// abort any previous sequence immediately
    3176:	0e 94 3e 29 	call	0x527c	; 0x527c <seq_stopsequence>
			seq_loadspeed(panel_slow_speed);	// go slow
    317a:	8d e1       	ldi	r24, 0x1D	; 29
    317c:	91 e0       	ldi	r25, 0x01	; 1
    317e:	0e 94 c6 28 	call	0x518c	; 0x518c <seq_loadspeed>
			seq_loadsequence(panel_init, SEQ_SIZE(panel_init));
    3182:	62 e0       	ldi	r22, 0x02	; 2
    3184:	8c ec       	ldi	r24, 0xCC	; 204
    3186:	96 e0       	ldi	r25, 0x06	; 6
    3188:	0e 94 0c 29 	call	0x5218	; 0x5218 <seq_loadsequence>
			seq_startsequence();				// close panels
    318c:	0e 94 34 29 	call	0x5268	; 0x5268 <seq_startsequence>
}

// sets JEDI display and Holos in their default state
void init_jedi()
{
	seq_remove_completion_callback(); // remove any competing completion callback
    3190:	0e 94 c1 28 	call	0x5182	; 0x5182 <seq_remove_completion_callback>
	suart_puts("*H000\r");	// quick way to turn off holos if connected to MarcDuino
    3194:	8a e3       	ldi	r24, 0x3A	; 58
    3196:	91 e0       	ldi	r25, 0x01	; 1
    3198:	0e 94 2a 32 	call	0x6454	; 0x6454 <suart_puts>
    319c:	9f ef       	ldi	r25, 0xFF	; 255
    319e:	e1 ee       	ldi	r30, 0xE1	; 225
    31a0:	f4 e0       	ldi	r31, 0x04	; 4
    31a2:	91 50       	subi	r25, 0x01	; 1
    31a4:	e0 40       	sbci	r30, 0x00	; 0
    31a6:	f0 40       	sbci	r31, 0x00	; 0
    31a8:	e1 f7       	brne	.-8      	; 0x31a2 <sequence_command+0x482>
    31aa:	00 c0       	rjmp	.+0      	; 0x31ac <sequence_command+0x48c>
    31ac:	00 00       	nop
	_delay_ms(100);
	suart_puts("@0T1\r");	// abort test routine, reset all to normal
    31ae:	81 e4       	ldi	r24, 0x41	; 65
    31b0:	91 e0       	ldi	r25, 0x01	; 1
    31b2:	0e 94 2a 32 	call	0x6454	; 0x6454 <suart_puts>
    31b6:	2f ef       	ldi	r18, 0xFF	; 255
    31b8:	89 ef       	ldi	r24, 0xF9	; 249
    31ba:	90 e0       	ldi	r25, 0x00	; 0
    31bc:	21 50       	subi	r18, 0x01	; 1
    31be:	80 40       	sbci	r24, 0x00	; 0
    31c0:	90 40       	sbci	r25, 0x00	; 0
    31c2:	e1 f7       	brne	.-8      	; 0x31bc <sequence_command+0x49c>
    31c4:	00 c0       	rjmp	.+0      	; 0x31c6 <sequence_command+0x4a6>
    31c6:	00 00       	nop
	suart_puts("*ON00\r"); 	// holo lights on
}

void HPStop()
{
	suart_puts("*ST00\r"); 	// all holos to stop and lights off
    31c8:	82 ee       	ldi	r24, 0xE2	; 226
    31ca:	91 e0       	ldi	r25, 0x01	; 1
    31cc:	0e 94 2a 32 	call	0x6454	; 0x6454 <suart_puts>
}

const char strSoundCommand[] PROGMEM="Sound command\r\n";
void parse_sound_command(char* command,uint8_t length)
{
	if(feedbackmessageon) serial_puts_p(strSoundCommand);
    31d0:	80 91 55 02 	lds	r24, 0x0255
    31d4:	88 23       	and	r24, r24
    31d6:	21 f0       	breq	.+8      	; 0x31e0 <sequence_command+0x4c0>
    31d8:	83 ea       	ldi	r24, 0xA3	; 163
    31da:	93 e0       	ldi	r25, 0x03	; 3
    31dc:	0e 94 d0 2b 	call	0x57a0	; 0x57a0 <serial_puts_p>

#ifdef _MP3TRIGGER_
	// pass on command to our own MP3_Trigger interpreter
	mp3_parse_command(command);
    31e0:	89 ee       	ldi	r24, 0xE9	; 233
    31e2:	91 e0       	ldi	r25, 0x01	; 1
    31e4:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <mp3_parse_command>
			seq_startsequence();				// close panels

			init_jedi();						// JEDI back to default
			HPStop(); 							// all holos to stop
			SoundStop();						// stop sounds
			seq_resetspeed();					// sequence speed to fast
    31e8:	0e 94 04 29 	call	0x5208	; 0x5208 <seq_resetspeed>
    31ec:	0b e9       	ldi	r16, 0x9B	; 155
    31ee:	12 e0       	ldi	r17, 0x02	; 2
    31f0:	ff 24       	eor	r15, r15
    31f2:	f3 94       	inc	r15
	// all panels hold to last position and servo off
	if(value==0)
	{
		for(i=1; i<=SERVO_NUM; i++)
		 {
			 panel_rc_control[i-1]=0;
    31f4:	f8 01       	movw	r30, r16
    31f6:	11 92       	st	Z+, r1
    31f8:	8f 01       	movw	r16, r30
			 servo_set(i,SERVO_NO_PULSE);
    31fa:	6f ef       	ldi	r22, 0xFF	; 255
    31fc:	7f ef       	ldi	r23, 0xFF	; 255
    31fe:	8f 2d       	mov	r24, r15
    3200:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <servo_set>
	if(value>SERVO_NUM) return;

	// all panels hold to last position and servo off
	if(value==0)
	{
		for(i=1; i<=SERVO_NUM; i++)
    3204:	f3 94       	inc	r15
    3206:	fb e0       	ldi	r31, 0x0B	; 11
    3208:	ff 12       	cpse	r15, r31
    320a:	f4 cf       	rjmp	.-24     	; 0x31f4 <sequence_command+0x4d4>
			init_jedi();						// JEDI back to default
			HPStop(); 							// all holos to stop
			SoundStop();						// stop sounds
			seq_resetspeed();					// sequence speed to fast
			stop_command(0);					// all panels off RC
			if(feedbackmessageon) serial_puts_p(strSeqQuiet);			// debug console feedback
    320c:	80 91 55 02 	lds	r24, 0x0255
    3210:	88 23       	and	r24, r24
    3212:	09 f4       	brne	.+2      	; 0x3216 <sequence_command+0x4f6>
    3214:	b0 cd       	rjmp	.-1184   	; 0x2d76 <sequence_command+0x56>
    3216:	8a e6       	ldi	r24, 0x6A	; 106
    3218:	92 e0       	ldi	r25, 0x02	; 2
    321a:	0e 94 d0 2b 	call	0x57a0	; 0x57a0 <serial_puts_p>
    321e:	ab cd       	rjmp	.-1194   	; 0x2d76 <sequence_command+0x56>
			DisplayLeia();		 				// Leia display
			if(feedbackmessageon) serial_puts_p(strSeqLeia);			// debug console feedback
			break;

		case 9:	// DISCO
			seq_add_completion_callback(resetJEDIcallback); // callback to reset displays at end of sequence
    3220:	8c e1       	ldi	r24, 0x1C	; 28
    3222:	94 e1       	ldi	r25, 0x14	; 20
    3224:	0e 94 bc 28 	call	0x5178	; 0x5178 <seq_add_completion_callback>
			seq_resetspeed();
    3228:	0e 94 04 29 	call	0x5208	; 0x5208 <seq_resetspeed>
			seq_loadsequence(panel_long_disco, SEQ_SIZE(panel_long_disco)); // 6:26 seconds sequence
    322c:	6a e1       	ldi	r22, 0x1A	; 26
    322e:	80 e9       	ldi	r24, 0x90	; 144
    3230:	94 e0       	ldi	r25, 0x04	; 4
    3232:	0e 94 0c 29 	call	0x5218	; 0x5218 <seq_loadsequence>
	_delay_ms(100);
}

void RLDSetMessage(char* message)
{
	suart_puts("@3M");
    3236:	86 ec       	ldi	r24, 0xC6	; 198
    3238:	91 e0       	ldi	r25, 0x01	; 1
    323a:	0e 94 2a 32 	call	0x6454	; 0x6454 <suart_puts>
	suart_puts(message);
    323e:	8a ec       	ldi	r24, 0xCA	; 202
    3240:	91 e0       	ldi	r25, 0x01	; 1
    3242:	0e 94 2a 32 	call	0x6454	; 0x6454 <suart_puts>
	suart_putc('\r');
    3246:	8d e0       	ldi	r24, 0x0D	; 13
    3248:	0e 94 21 32 	call	0x6442	; 0x6442 <suart_putc>
    324c:	ef ef       	ldi	r30, 0xFF	; 255
    324e:	f4 e3       	ldi	r31, 0x34	; 52
    3250:	2c e0       	ldi	r18, 0x0C	; 12
    3252:	e1 50       	subi	r30, 0x01	; 1
    3254:	f0 40       	sbci	r31, 0x00	; 0
    3256:	20 40       	sbci	r18, 0x00	; 0
    3258:	e1 f7       	brne	.-8      	; 0x3252 <sequence_command+0x532>
    325a:	00 c0       	rjmp	.+0      	; 0x325c <sequence_command+0x53c>
    325c:	00 00       	nop
	_delay_ms(50);
}

void DisplaySpectrum()
{
	suart_puts("@0T92\r"); 	// spectrum display
    325e:	80 e9       	ldi	r24, 0x90	; 144
    3260:	91 e0       	ldi	r25, 0x01	; 1
    3262:	0e 94 2a 32 	call	0x6454	; 0x6454 <suart_puts>
    3266:	8f ef       	ldi	r24, 0xFF	; 255
    3268:	93 ec       	ldi	r25, 0xC3	; 195
    326a:	e9 e0       	ldi	r30, 0x09	; 9
    326c:	81 50       	subi	r24, 0x01	; 1
    326e:	90 40       	sbci	r25, 0x00	; 0
    3270:	e0 40       	sbci	r30, 0x00	; 0
    3272:	e1 f7       	brne	.-8      	; 0x326c <sequence_command+0x54c>
    3274:	00 c0       	rjmp	.+0      	; 0x3276 <sequence_command+0x556>
    3276:	00 00       	nop
	_delay_ms(250);
}

void RLDDisplayMessage()
{
	suart_puts("@3T100\r");	// put rear logic in text mode
    3278:	87 ed       	ldi	r24, 0xD7	; 215
    327a:	91 e0       	ldi	r25, 0x01	; 1
    327c:	0e 94 2a 32 	call	0x6454	; 0x6454 <suart_puts>
    3280:	ff ef       	ldi	r31, 0xFF	; 255
    3282:	21 ee       	ldi	r18, 0xE1	; 225
    3284:	84 e0       	ldi	r24, 0x04	; 4
    3286:	f1 50       	subi	r31, 0x01	; 1
    3288:	20 40       	sbci	r18, 0x00	; 0
    328a:	80 40       	sbci	r24, 0x00	; 0
    328c:	e1 f7       	brne	.-8      	; 0x3286 <sequence_command+0x566>
    328e:	00 c0       	rjmp	.+0      	; 0x3290 <sequence_command+0x570>
    3290:	00 00       	nop
}

const char strSoundCommand[] PROGMEM="Sound command\r\n";
void parse_sound_command(char* command,uint8_t length)
{
	if(feedbackmessageon) serial_puts_p(strSoundCommand);
    3292:	80 91 55 02 	lds	r24, 0x0255
    3296:	88 23       	and	r24, r24
    3298:	21 f0       	breq	.+8      	; 0x32a2 <sequence_command+0x582>
    329a:	83 ea       	ldi	r24, 0xA3	; 163
    329c:	93 e0       	ldi	r25, 0x03	; 3
    329e:	0e 94 d0 2b 	call	0x57a0	; 0x57a0 <serial_puts_p>

#ifdef _MP3TRIGGER_
	// pass on command to our own MP3_Trigger interpreter
	mp3_parse_command(command);
    32a2:	8f ed       	ldi	r24, 0xDF	; 223
    32a4:	91 e0       	ldi	r25, 0x01	; 1
    32a6:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <mp3_parse_command>
}

void HPFlicker(uint8_t seconds)	// all HP flicer seconds from 0 (off) to 99
{
	char string[7];
	sprintf(string, "*F0%02d\r", seconds);
    32aa:	1f 92       	push	r1
    32ac:	83 e6       	ldi	r24, 0x63	; 99
    32ae:	8f 93       	push	r24
    32b0:	85 e6       	ldi	r24, 0x65	; 101
    32b2:	91 e0       	ldi	r25, 0x01	; 1
    32b4:	9f 93       	push	r25
    32b6:	8f 93       	push	r24
    32b8:	8e 01       	movw	r16, r28
    32ba:	0f 5f       	subi	r16, 0xFF	; 255
    32bc:	1f 4f       	sbci	r17, 0xFF	; 255
    32be:	1f 93       	push	r17
    32c0:	0f 93       	push	r16
    32c2:	0e 94 84 36 	call	0x6d08	; 0x6d08 <sprintf>
	suart_puts(string);
    32c6:	c8 01       	movw	r24, r16
    32c8:	0e 94 2a 32 	call	0x6454	; 0x6454 <suart_puts>
			//_delay_ms(100);
			DisplaySpectrum();	 				// all logics in disco spectrum mode
			RLDDisplayMessage();				// put rear logic in text mode
			SoundDisco();						// disco music
			HPFlicker(99);		 				// all holos flciker for as long as possible
			seq_startsequence();				// start panel sequence
    32cc:	0e 94 34 29 	call	0x5268	; 0x5268 <seq_startsequence>
			if(feedbackmessageon) serial_puts_p(strSeqDisco);			// debug console feedback
    32d0:	0f 90       	pop	r0
    32d2:	0f 90       	pop	r0
    32d4:	0f 90       	pop	r0
    32d6:	0f 90       	pop	r0
    32d8:	0f 90       	pop	r0
    32da:	0f 90       	pop	r0
    32dc:	80 91 55 02 	lds	r24, 0x0255
    32e0:	88 23       	and	r24, r24
    32e2:	09 f4       	brne	.+2      	; 0x32e6 <sequence_command+0x5c6>
    32e4:	48 cd       	rjmp	.-1392   	; 0x2d76 <sequence_command+0x56>
    32e6:	8c e7       	ldi	r24, 0x7C	; 124
    32e8:	92 e0       	ldi	r25, 0x02	; 2
    32ea:	0e 94 d0 2b 	call	0x57a0	; 0x57a0 <serial_puts_p>
    32ee:	43 cd       	rjmp	.-1402   	; 0x2d76 <sequence_command+0x56>
			seq_startsequence();				// start panel sequence
			if(feedbackmessageon) serial_puts_p(strSeqCantinaDance);	// debug console feedback
			break;

		case 8: // LEIA
			seq_stopsequence(); 				// Abort previous sequence
    32f0:	0e 94 3e 29 	call	0x527c	; 0x527c <seq_stopsequence>
			seq_loadspeed(panel_slow_speed);	// Go slow
    32f4:	8d e1       	ldi	r24, 0x1D	; 29
    32f6:	91 e0       	ldi	r25, 0x01	; 1
    32f8:	0e 94 c6 28 	call	0x518c	; 0x518c <seq_loadspeed>
			seq_loadsequence(panel_init, SEQ_SIZE(panel_init));	// Close panels
    32fc:	62 e0       	ldi	r22, 0x02	; 2
    32fe:	8c ec       	ldi	r24, 0xCC	; 204
    3300:	96 e0       	ldi	r25, 0x06	; 6
    3302:	0e 94 0c 29 	call	0x5218	; 0x5218 <seq_loadsequence>
			seq_startsequence();
    3306:	0e 94 34 29 	call	0x5268	; 0x5268 <seq_startsequence>
	suart_puts(string);
}

void HP1RC()
{
	suart_puts("*RC01\r"); 	// HP 01 (front) in RC mode
    330a:	8d ea       	ldi	r24, 0xAD	; 173
    330c:	91 e0       	ldi	r25, 0x01	; 1
    330e:	0e 94 2a 32 	call	0x6454	; 0x6454 <suart_puts>
}

const char strSoundCommand[] PROGMEM="Sound command\r\n";
void parse_sound_command(char* command,uint8_t length)
{
	if(feedbackmessageon) serial_puts_p(strSoundCommand);
    3312:	80 91 55 02 	lds	r24, 0x0255
    3316:	88 23       	and	r24, r24
    3318:	21 f0       	breq	.+8      	; 0x3322 <sequence_command+0x602>
    331a:	83 ea       	ldi	r24, 0xA3	; 163
    331c:	93 e0       	ldi	r25, 0x03	; 3
    331e:	0e 94 d0 2b 	call	0x57a0	; 0x57a0 <serial_puts_p>

#ifdef _MP3TRIGGER_
	// pass on command to our own MP3_Trigger interpreter
	mp3_parse_command(command);
    3322:	84 eb       	ldi	r24, 0xB4	; 180
    3324:	91 e0       	ldi	r25, 0x01	; 1
    3326:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <mp3_parse_command>
}

void HP1Flicker(uint8_t seconds) // front HP flicker
{
	char string[7];
	sprintf(string, "*F1%02d\r", seconds);
    332a:	1f 92       	push	r1
    332c:	82 e2       	ldi	r24, 0x22	; 34
    332e:	8f 93       	push	r24
    3330:	87 eb       	ldi	r24, 0xB7	; 183
    3332:	91 e0       	ldi	r25, 0x01	; 1
    3334:	9f 93       	push	r25
    3336:	8f 93       	push	r24
    3338:	8e 01       	movw	r16, r28
    333a:	0f 5f       	subi	r16, 0xFF	; 255
    333c:	1f 4f       	sbci	r17, 0xFF	; 255
    333e:	1f 93       	push	r17
    3340:	0f 93       	push	r16
    3342:	0e 94 84 36 	call	0x6d08	; 0x6d08 <sprintf>
	suart_puts(string);
    3346:	c8 01       	movw	r24, r16
    3348:	0e 94 2a 32 	call	0x6454	; 0x6454 <suart_puts>
	_delay_ms(20);
}

void DisplayLeia()
{
	suart_puts("@0T6\r"); 	// Leia display
    334c:	80 ec       	ldi	r24, 0xC0	; 192
    334e:	91 e0       	ldi	r25, 0x01	; 1
    3350:	0e 94 2a 32 	call	0x6454	; 0x6454 <suart_puts>
    3354:	2f ef       	ldi	r18, 0xFF	; 255
    3356:	81 ee       	ldi	r24, 0xE1	; 225
    3358:	94 e0       	ldi	r25, 0x04	; 4
    335a:	21 50       	subi	r18, 0x01	; 1
    335c:	80 40       	sbci	r24, 0x00	; 0
    335e:	90 40       	sbci	r25, 0x00	; 0
    3360:	e1 f7       	brne	.-8      	; 0x335a <sequence_command+0x63a>
    3362:	00 c0       	rjmp	.+0      	; 0x3364 <sequence_command+0x644>
    3364:	00 00       	nop

			HP1RC();			 				// HP 01 in RC mode
			SoundLeia();						// Leia message sound
			HP1Flicker(34); 					// front holos flicker for 34 sec
			DisplayLeia();		 				// Leia display
			if(feedbackmessageon) serial_puts_p(strSeqLeia);			// debug console feedback
    3366:	0f 90       	pop	r0
    3368:	0f 90       	pop	r0
    336a:	0f 90       	pop	r0
    336c:	0f 90       	pop	r0
    336e:	0f 90       	pop	r0
    3370:	0f 90       	pop	r0
    3372:	80 91 55 02 	lds	r24, 0x0255
    3376:	88 23       	and	r24, r24
    3378:	09 f4       	brne	.+2      	; 0x337c <sequence_command+0x65c>
    337a:	fd cc       	rjmp	.-1542   	; 0x2d76 <sequence_command+0x56>
    337c:	8d e8       	ldi	r24, 0x8D	; 141
    337e:	92 e0       	ldi	r25, 0x02	; 2
    3380:	0e 94 d0 2b 	call	0x57a0	; 0x57a0 <serial_puts_p>
    3384:	f8 cc       	rjmp	.-1552   	; 0x2d76 <sequence_command+0x56>
			seq_startsequence();					// start panel sequence
			if(feedbackmessageon) serial_puts_p(strSeqShortCircuit);		// debug console feedback
			break;

		case 7: // Cantina (Orchestral Cantina, Rhythmic Panels)
			seq_add_completion_callback(resetJEDIcallback); 	// callback to reset displays at end of sequence
    3386:	8c e1       	ldi	r24, 0x1C	; 28
    3388:	94 e1       	ldi	r25, 0x14	; 20
    338a:	0e 94 bc 28 	call	0x5178	; 0x5178 <seq_add_completion_callback>
			seq_loadsequence(panel_dance, SEQ_SIZE(panel_dance));
    338e:	6a e5       	ldi	r22, 0x5A	; 90
    3390:	88 ef       	ldi	r24, 0xF8	; 248
    3392:	96 e0       	ldi	r25, 0x06	; 6
    3394:	0e 94 0c 29 	call	0x5218	; 0x5218 <seq_loadsequence>
			seq_resetspeed();
    3398:	0e 94 04 29 	call	0x5208	; 0x5208 <seq_resetspeed>
}

const char strSoundCommand[] PROGMEM="Sound command\r\n";
void parse_sound_command(char* command,uint8_t length)
{
	if(feedbackmessageon) serial_puts_p(strSoundCommand);
    339c:	80 91 55 02 	lds	r24, 0x0255
    33a0:	88 23       	and	r24, r24
    33a2:	21 f0       	breq	.+8      	; 0x33ac <sequence_command+0x68c>
    33a4:	83 ea       	ldi	r24, 0xA3	; 163
    33a6:	93 e0       	ldi	r25, 0x03	; 3
    33a8:	0e 94 d0 2b 	call	0x57a0	; 0x57a0 <serial_puts_p>

#ifdef _MP3TRIGGER_
	// pass on command to our own MP3_Trigger interpreter
	mp3_parse_command(command);
    33ac:	8a ea       	ldi	r24, 0xAA	; 170
    33ae:	91 e0       	ldi	r25, 0x01	; 1
    33b0:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <mp3_parse_command>
	_delay_ms(50);
}

void DisplaySpectrum()
{
	suart_puts("@0T92\r"); 	// spectrum display
    33b4:	80 e9       	ldi	r24, 0x90	; 144
    33b6:	91 e0       	ldi	r25, 0x01	; 1
    33b8:	0e 94 2a 32 	call	0x6454	; 0x6454 <suart_puts>
    33bc:	9f ef       	ldi	r25, 0xFF	; 255
    33be:	e3 ec       	ldi	r30, 0xC3	; 195
    33c0:	f9 e0       	ldi	r31, 0x09	; 9
    33c2:	91 50       	subi	r25, 0x01	; 1
    33c4:	e0 40       	sbci	r30, 0x00	; 0
    33c6:	f0 40       	sbci	r31, 0x00	; 0
    33c8:	e1 f7       	brne	.-8      	; 0x33c2 <sequence_command+0x6a2>
    33ca:	00 c0       	rjmp	.+0      	; 0x33cc <sequence_command+0x6ac>
    33cc:	00 00       	nop
}

void HPFlicker(uint8_t seconds)	// all HP flicer seconds from 0 (off) to 99
{
	char string[7];
	sprintf(string, "*F0%02d\r", seconds);
    33ce:	1f 92       	push	r1
    33d0:	8e e2       	ldi	r24, 0x2E	; 46
    33d2:	8f 93       	push	r24
    33d4:	85 e6       	ldi	r24, 0x65	; 101
    33d6:	91 e0       	ldi	r25, 0x01	; 1
    33d8:	9f 93       	push	r25
    33da:	8f 93       	push	r24
    33dc:	8e 01       	movw	r16, r28
    33de:	0f 5f       	subi	r16, 0xFF	; 255
    33e0:	1f 4f       	sbci	r17, 0xFF	; 255
    33e2:	1f 93       	push	r17
    33e4:	0f 93       	push	r16
    33e6:	0e 94 84 36 	call	0x6d08	; 0x6d08 <sprintf>
	suart_puts(string);
    33ea:	c8 01       	movw	r24, r16
    33ec:	0e 94 2a 32 	call	0x6454	; 0x6454 <suart_puts>
			seq_loadsequence(panel_dance, SEQ_SIZE(panel_dance));
			seq_resetspeed();
			SoundCantina();		 				// code for dance sound
			DisplaySpectrum();	 				// spectrum display
			HPFlicker(46); 						// HPs flicker for 46 sec
			seq_startsequence();				// start panel sequence
    33f0:	0e 94 34 29 	call	0x5268	; 0x5268 <seq_startsequence>
			if(feedbackmessageon) serial_puts_p(strSeqCantinaDance);	// debug console feedback
    33f4:	0f 90       	pop	r0
    33f6:	0f 90       	pop	r0
    33f8:	0f 90       	pop	r0
    33fa:	0f 90       	pop	r0
    33fc:	0f 90       	pop	r0
    33fe:	0f 90       	pop	r0
    3400:	80 91 55 02 	lds	r24, 0x0255
    3404:	88 23       	and	r24, r24
    3406:	09 f4       	brne	.+2      	; 0x340a <sequence_command+0x6ea>
    3408:	b6 cc       	rjmp	.-1684   	; 0x2d76 <sequence_command+0x56>
    340a:	8f e9       	ldi	r24, 0x9F	; 159
    340c:	92 e0       	ldi	r25, 0x02	; 2
    340e:	0e 94 d0 2b 	call	0x57a0	; 0x57a0 <serial_puts_p>
    3412:	b1 cc       	rjmp	.-1694   	; 0x2d76 <sequence_command+0x56>
			seq_startsequence();								// start panel sequence
			if(feedbackmessageon) serial_puts_p(strSeqCantinaMarchingAnts);			// debug console feedback
			break;

		case 6: // SHORT CIRCUIT / FAINT
			seq_loadsequence(panel_all_open_long, SEQ_SIZE(panel_all_open_long));
    3414:	64 e0       	ldi	r22, 0x04	; 4
    3416:	88 e2       	ldi	r24, 0x28	; 40
    3418:	98 e1       	ldi	r25, 0x18	; 24
    341a:	0e 94 0c 29 	call	0x5218	; 0x5218 <seq_loadsequence>
			seq_loadspeed(panel_super_slow_speed);	// very slow speed open
    341e:	89 e0       	ldi	r24, 0x09	; 9
    3420:	91 e0       	ldi	r25, 0x01	; 1
    3422:	0e 94 c6 28 	call	0x518c	; 0x518c <seq_loadspeed>
	_delay_ms(200);			// JEDI needs a large amount of time to setup, 100 ms not enough
}

void DisplayShortCircuit()
{
	suart_puts("@0T4\r");	// short circuit display
    3426:	8a e9       	ldi	r24, 0x9A	; 154
    3428:	91 e0       	ldi	r25, 0x01	; 1
    342a:	0e 94 2a 32 	call	0x6454	; 0x6454 <suart_puts>
    342e:	8f ef       	ldi	r24, 0xFF	; 255
    3430:	91 ee       	ldi	r25, 0xE1	; 225
    3432:	e4 e0       	ldi	r30, 0x04	; 4
    3434:	81 50       	subi	r24, 0x01	; 1
    3436:	90 40       	sbci	r25, 0x00	; 0
    3438:	e0 40       	sbci	r30, 0x00	; 0
    343a:	e1 f7       	brne	.-8      	; 0x3434 <sequence_command+0x714>
    343c:	00 c0       	rjmp	.+0      	; 0x343e <sequence_command+0x71e>
    343e:	00 00       	nop
	_delay_ms(100);
	suart_puts("@0W10\r");  // for 10 seconds (this one does not seem to respond)
    3440:	80 ea       	ldi	r24, 0xA0	; 160
    3442:	91 e0       	ldi	r25, 0x01	; 1
    3444:	0e 94 2a 32 	call	0x6454	; 0x6454 <suart_puts>
    3448:	ff ef       	ldi	r31, 0xFF	; 255
    344a:	29 ef       	ldi	r18, 0xF9	; 249
    344c:	80 e0       	ldi	r24, 0x00	; 0
    344e:	f1 50       	subi	r31, 0x01	; 1
    3450:	20 40       	sbci	r18, 0x00	; 0
    3452:	80 40       	sbci	r24, 0x00	; 0
    3454:	e1 f7       	brne	.-8      	; 0x344e <sequence_command+0x72e>
    3456:	00 c0       	rjmp	.+0      	; 0x3458 <sequence_command+0x738>
    3458:	00 00       	nop
}

const char strSoundCommand[] PROGMEM="Sound command\r\n";
void parse_sound_command(char* command,uint8_t length)
{
	if(feedbackmessageon) serial_puts_p(strSoundCommand);
    345a:	80 91 55 02 	lds	r24, 0x0255
    345e:	88 23       	and	r24, r24
    3460:	21 f0       	breq	.+8      	; 0x346a <sequence_command+0x74a>
    3462:	83 ea       	ldi	r24, 0xA3	; 163
    3464:	93 e0       	ldi	r25, 0x03	; 3
    3466:	0e 94 d0 2b 	call	0x57a0	; 0x57a0 <serial_puts_p>

#ifdef _MP3TRIGGER_
	// pass on command to our own MP3_Trigger interpreter
	mp3_parse_command(command);
    346a:	87 ea       	ldi	r24, 0xA7	; 167
    346c:	91 e0       	ldi	r25, 0x01	; 1
    346e:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <mp3_parse_command>
}

void MagicFlicker(uint8_t seconds)	// seconds from 0 (off) to 99 (always on)
{
	char string[7];
	sprintf(string, "*MF%02d\r", seconds);
    3472:	1f 92       	push	r1
    3474:	8a e0       	ldi	r24, 0x0A	; 10
    3476:	8f 93       	push	r24
    3478:	8c e5       	ldi	r24, 0x5C	; 92
    347a:	91 e0       	ldi	r25, 0x01	; 1
    347c:	9f 93       	push	r25
    347e:	8f 93       	push	r24
    3480:	8e 01       	movw	r16, r28
    3482:	0f 5f       	subi	r16, 0xFF	; 255
    3484:	1f 4f       	sbci	r17, 0xFF	; 255
    3486:	1f 93       	push	r17
    3488:	0f 93       	push	r16
    348a:	0e 94 84 36 	call	0x6d08	; 0x6d08 <sprintf>
	suart_puts(string);
    348e:	c8 01       	movw	r24, r16
    3490:	0e 94 2a 32 	call	0x6454	; 0x6454 <suart_puts>
    3494:	9f ef       	ldi	r25, 0xFF	; 255
    3496:	e0 e7       	ldi	r30, 0x70	; 112
    3498:	f2 e0       	ldi	r31, 0x02	; 2
    349a:	91 50       	subi	r25, 0x01	; 1
    349c:	e0 40       	sbci	r30, 0x00	; 0
    349e:	f0 40       	sbci	r31, 0x00	; 0
    34a0:	e1 f7       	brne	.-8      	; 0x349a <sequence_command+0x77a>
    34a2:	00 c0       	rjmp	.+0      	; 0x34a4 <sequence_command+0x784>
    34a4:	00 00       	nop
}

void HPFlicker(uint8_t seconds)	// all HP flicer seconds from 0 (off) to 99
{
	char string[7];
	sprintf(string, "*F0%02d\r", seconds);
    34a6:	1f 92       	push	r1
    34a8:	8a e0       	ldi	r24, 0x0A	; 10
    34aa:	8f 93       	push	r24
    34ac:	85 e6       	ldi	r24, 0x65	; 101
    34ae:	91 e0       	ldi	r25, 0x01	; 1
    34b0:	9f 93       	push	r25
    34b2:	8f 93       	push	r24
    34b4:	1f 93       	push	r17
    34b6:	0f 93       	push	r16
    34b8:	0e 94 84 36 	call	0x6d08	; 0x6d08 <sprintf>
	suart_puts(string);
    34bc:	c8 01       	movw	r24, r16
    34be:	0e 94 2a 32 	call	0x6454	; 0x6454 <suart_puts>
			seq_loadspeed(panel_super_slow_speed);	// very slow speed open
			DisplayShortCircuit();  				// short circuit display
			SoundFaint(); 							// Faint sound
			MagicFlicker(10);  						// Magic Panel Flicker for 10 seconds
			HPFlicker(10);  						// HPs flicker 10 seconds
			seq_startsequence();					// start panel sequence
    34c2:	0e 94 34 29 	call	0x5268	; 0x5268 <seq_startsequence>
			if(feedbackmessageon) serial_puts_p(strSeqShortCircuit);		// debug console feedback
    34c6:	0f b6       	in	r0, 0x3f	; 63
    34c8:	f8 94       	cli
    34ca:	de bf       	out	0x3e, r29	; 62
    34cc:	0f be       	out	0x3f, r0	; 63
    34ce:	cd bf       	out	0x3d, r28	; 61
    34d0:	80 91 55 02 	lds	r24, 0x0255
    34d4:	88 23       	and	r24, r24
    34d6:	09 f4       	brne	.+2      	; 0x34da <sequence_command+0x7ba>
    34d8:	4e cc       	rjmp	.-1892   	; 0x2d76 <sequence_command+0x56>
    34da:	7f cc       	rjmp	.-1794   	; 0x2dda <sequence_command+0xba>
			seq_startsequence();				// start panel sequence
			if(feedbackmessageon) serial_puts_p(strSeqOpenCloseWave);	// debug console feedback
			break;

		case 5: // Beep Cantina (R2 beeping the cantina, panels doing marching ants)
			seq_add_completion_callback(resetJEDIcallback); 	// callback to reset displays at end of sequence
    34dc:	8c e1       	ldi	r24, 0x1C	; 28
    34de:	94 e1       	ldi	r25, 0x14	; 20
    34e0:	0e 94 bc 28 	call	0x5178	; 0x5178 <seq_add_completion_callback>
			seq_loadsequence(panel_marching_ants, SEQ_SIZE(panel_marching_ants));
    34e4:	61 e2       	ldi	r22, 0x21	; 33
    34e6:	84 eb       	ldi	r24, 0xB4	; 180
    34e8:	9e e0       	ldi	r25, 0x0E	; 14
    34ea:	0e 94 0c 29 	call	0x5218	; 0x5218 <seq_loadsequence>
			seq_loadspeed(panel_slow_speed);					// slow speed marching ants
    34ee:	8d e1       	ldi	r24, 0x1D	; 29
    34f0:	91 e0       	ldi	r25, 0x01	; 1
    34f2:	0e 94 c6 28 	call	0x518c	; 0x518c <seq_loadspeed>
	_delay_ms(50);
}

void DisplaySpectrum()
{
	suart_puts("@0T92\r"); 	// spectrum display
    34f6:	80 e9       	ldi	r24, 0x90	; 144
    34f8:	91 e0       	ldi	r25, 0x01	; 1
    34fa:	0e 94 2a 32 	call	0x6454	; 0x6454 <suart_puts>
    34fe:	ef ef       	ldi	r30, 0xFF	; 255
    3500:	f3 ec       	ldi	r31, 0xC3	; 195
    3502:	29 e0       	ldi	r18, 0x09	; 9
    3504:	e1 50       	subi	r30, 0x01	; 1
    3506:	f0 40       	sbci	r31, 0x00	; 0
    3508:	20 40       	sbci	r18, 0x00	; 0
    350a:	e1 f7       	brne	.-8      	; 0x3504 <sequence_command+0x7e4>
    350c:	00 c0       	rjmp	.+0      	; 0x350e <sequence_command+0x7ee>
    350e:	00 00       	nop
}

void HPFlash(uint8_t seconds)	// seconds from 0 (off) to 99 (always on)
{
	char string[7];
	sprintf(string, "*H0%02d\r", seconds);
    3510:	1f 92       	push	r1
    3512:	81 e1       	ldi	r24, 0x11	; 17
    3514:	8f 93       	push	r24
    3516:	8e e6       	ldi	r24, 0x6E	; 110
    3518:	91 e0       	ldi	r25, 0x01	; 1
    351a:	9f 93       	push	r25
    351c:	8f 93       	push	r24
    351e:	8e 01       	movw	r16, r28
    3520:	0f 5f       	subi	r16, 0xFF	; 255
    3522:	1f 4f       	sbci	r17, 0xFF	; 255
    3524:	1f 93       	push	r17
    3526:	0f 93       	push	r16
    3528:	0e 94 84 36 	call	0x6d08	; 0x6d08 <sprintf>
	suart_puts(string);
    352c:	c8 01       	movw	r24, r16
    352e:	0e 94 2a 32 	call	0x6454	; 0x6454 <suart_puts>
}

const char strSoundCommand[] PROGMEM="Sound command\r\n";
void parse_sound_command(char* command,uint8_t length)
{
	if(feedbackmessageon) serial_puts_p(strSoundCommand);
    3532:	0f 90       	pop	r0
    3534:	0f 90       	pop	r0
    3536:	0f 90       	pop	r0
    3538:	0f 90       	pop	r0
    353a:	0f 90       	pop	r0
    353c:	0f 90       	pop	r0
    353e:	80 91 55 02 	lds	r24, 0x0255
    3542:	88 23       	and	r24, r24
    3544:	21 f0       	breq	.+8      	; 0x354e <sequence_command+0x82e>
    3546:	83 ea       	ldi	r24, 0xA3	; 163
    3548:	93 e0       	ldi	r25, 0x03	; 3
    354a:	0e 94 d0 2b 	call	0x57a0	; 0x57a0 <serial_puts_p>

#ifdef _MP3TRIGGER_
	// pass on command to our own MP3_Trigger interpreter
	mp3_parse_command(command);
    354e:	87 e9       	ldi	r24, 0x97	; 151
    3550:	91 e0       	ldi	r25, 0x01	; 1
    3552:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <mp3_parse_command>
			seq_loadsequence(panel_marching_ants, SEQ_SIZE(panel_marching_ants));
			seq_loadspeed(panel_slow_speed);					// slow speed marching ants
			DisplaySpectrum();	 								// spectrum display
			HPFlash(17); 	 									// HPs flash for 17 seconds
			SoundBeepCantina(); 								// beeping cantina sound
			seq_startsequence();								// start panel sequence
    3556:	0e 94 34 29 	call	0x5268	; 0x5268 <seq_startsequence>
			if(feedbackmessageon) serial_puts_p(strSeqCantinaMarchingAnts);			// debug console feedback
    355a:	80 91 55 02 	lds	r24, 0x0255
    355e:	88 23       	and	r24, r24
    3560:	09 f4       	brne	.+2      	; 0x3564 <sequence_command+0x844>
    3562:	09 cc       	rjmp	.-2030   	; 0x2d76 <sequence_command+0x56>
    3564:	85 ec       	ldi	r24, 0xC5	; 197
    3566:	92 e0       	ldi	r25, 0x02	; 2
    3568:	0e 94 d0 2b 	call	0x57a0	; 0x57a0 <serial_puts_p>
    356c:	04 cc       	rjmp	.-2040   	; 0x2d76 <sequence_command+0x56>
			seq_startsequence();				// start panel sequence
			if(feedbackmessageon) serial_puts_p(strSeqFastWave);		// debug console feedback
			break;

		case 4: // OPEN WAVE
			seq_loadsequence(panel_open_close_wave, SEQ_SIZE(panel_open_close_wave));
    356e:	66 e1       	ldi	r22, 0x16	; 22
    3570:	8a e8       	ldi	r24, 0x8A	; 138
    3572:	91 e1       	ldi	r25, 0x11	; 17
    3574:	0e 94 0c 29 	call	0x5218	; 0x5218 <seq_loadsequence>
			seq_resetspeed();
    3578:	0e 94 04 29 	call	0x5208	; 0x5208 <seq_resetspeed>
}

void HPFlash(uint8_t seconds)	// seconds from 0 (off) to 99 (always on)
{
	char string[7];
	sprintf(string, "*H0%02d\r", seconds);
    357c:	1f 92       	push	r1
    357e:	85 e0       	ldi	r24, 0x05	; 5
    3580:	8f 93       	push	r24
    3582:	8e e6       	ldi	r24, 0x6E	; 110
    3584:	91 e0       	ldi	r25, 0x01	; 1
    3586:	9f 93       	push	r25
    3588:	8f 93       	push	r24
    358a:	8e 01       	movw	r16, r28
    358c:	0f 5f       	subi	r16, 0xFF	; 255
    358e:	1f 4f       	sbci	r17, 0xFF	; 255
    3590:	1f 93       	push	r17
    3592:	0f 93       	push	r16
    3594:	0e 94 84 36 	call	0x6d08	; 0x6d08 <sprintf>
	suart_puts(string);
    3598:	c8 01       	movw	r24, r16
    359a:	0e 94 2a 32 	call	0x6454	; 0x6454 <suart_puts>
}

const char strSoundCommand[] PROGMEM="Sound command\r\n";
void parse_sound_command(char* command,uint8_t length)
{
	if(feedbackmessageon) serial_puts_p(strSoundCommand);
    359e:	0f 90       	pop	r0
    35a0:	0f 90       	pop	r0
    35a2:	0f 90       	pop	r0
    35a4:	0f 90       	pop	r0
    35a6:	0f 90       	pop	r0
    35a8:	0f 90       	pop	r0
    35aa:	80 91 55 02 	lds	r24, 0x0255
    35ae:	88 23       	and	r24, r24
    35b0:	21 f0       	breq	.+8      	; 0x35ba <sequence_command+0x89a>
    35b2:	83 ea       	ldi	r24, 0xA3	; 163
    35b4:	93 e0       	ldi	r25, 0x03	; 3
    35b6:	0e 94 d0 2b 	call	0x57a0	; 0x57a0 <serial_puts_p>

#ifdef _MP3TRIGGER_
	// pass on command to our own MP3_Trigger interpreter
	mp3_parse_command(command);
    35ba:	8c e8       	ldi	r24, 0x8C	; 140
    35bc:	91 e0       	ldi	r25, 0x01	; 1
    35be:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <mp3_parse_command>
		case 4: // OPEN WAVE
			seq_loadsequence(panel_open_close_wave, SEQ_SIZE(panel_open_close_wave));
			seq_resetspeed();
			HPFlash(5); 	 					// HPs flash for 5 seconds
			SoundOpenWave(); 					// long happy sound
			seq_startsequence();				// start panel sequence
    35c2:	0e 94 34 29 	call	0x5268	; 0x5268 <seq_startsequence>
			if(feedbackmessageon) serial_puts_p(strSeqOpenCloseWave);	// debug console feedback
    35c6:	80 91 55 02 	lds	r24, 0x0255
    35ca:	88 23       	and	r24, r24
    35cc:	09 f4       	brne	.+2      	; 0x35d0 <sequence_command+0x8b0>
    35ce:	d3 cb       	rjmp	.-2138   	; 0x2d76 <sequence_command+0x56>
    35d0:	2c cc       	rjmp	.-1960   	; 0x2e2a <sequence_command+0x10a>
			seq_startsequence();				// start sequence
			if(feedbackmessageon) serial_puts_p(strSeqWave);			// debug console feedback
			break;

		case 3: // MOODY FAST WAVE
			seq_loadsequence(panel_fast_wave, SEQ_SIZE(panel_fast_wave));
    35d2:	68 e1       	ldi	r22, 0x18	; 24
    35d4:	8e e6       	ldi	r24, 0x6E	; 110
    35d6:	93 e1       	ldi	r25, 0x13	; 19
    35d8:	0e 94 0c 29 	call	0x5218	; 0x5218 <seq_loadsequence>
			seq_resetspeed();
    35dc:	0e 94 04 29 	call	0x5208	; 0x5208 <seq_resetspeed>
	suart_puts("@0T1\r");
}

void DisplayFlash4()
{
	suart_puts("@0T2\r");  	// flash display
    35e0:	8c e7       	ldi	r24, 0x7C	; 124
    35e2:	91 e0       	ldi	r25, 0x01	; 1
    35e4:	0e 94 2a 32 	call	0x6454	; 0x6454 <suart_puts>
    35e8:	9f ef       	ldi	r25, 0xFF	; 255
    35ea:	e1 ee       	ldi	r30, 0xE1	; 225
    35ec:	f4 e0       	ldi	r31, 0x04	; 4
    35ee:	91 50       	subi	r25, 0x01	; 1
    35f0:	e0 40       	sbci	r30, 0x00	; 0
    35f2:	f0 40       	sbci	r31, 0x00	; 0
    35f4:	e1 f7       	brne	.-8      	; 0x35ee <sequence_command+0x8ce>
    35f6:	00 c0       	rjmp	.+0      	; 0x35f8 <sequence_command+0x8d8>
    35f8:	00 00       	nop
	_delay_ms(100);
	suart_puts("@0W4\r");  	// for 4 seconds
    35fa:	82 e8       	ldi	r24, 0x82	; 130
    35fc:	91 e0       	ldi	r25, 0x01	; 1
    35fe:	0e 94 2a 32 	call	0x6454	; 0x6454 <suart_puts>
    3602:	2f ef       	ldi	r18, 0xFF	; 255
    3604:	80 e7       	ldi	r24, 0x70	; 112
    3606:	92 e0       	ldi	r25, 0x02	; 2
    3608:	21 50       	subi	r18, 0x01	; 1
    360a:	80 40       	sbci	r24, 0x00	; 0
    360c:	90 40       	sbci	r25, 0x00	; 0
    360e:	e1 f7       	brne	.-8      	; 0x3608 <sequence_command+0x8e8>
    3610:	00 c0       	rjmp	.+0      	; 0x3612 <sequence_command+0x8f2>
    3612:	00 00       	nop
}

void HPFlicker(uint8_t seconds)	// all HP flicer seconds from 0 (off) to 99
{
	char string[7];
	sprintf(string, "*F0%02d\r", seconds);
    3614:	1f 92       	push	r1
    3616:	84 e0       	ldi	r24, 0x04	; 4
    3618:	8f 93       	push	r24
    361a:	85 e6       	ldi	r24, 0x65	; 101
    361c:	91 e0       	ldi	r25, 0x01	; 1
    361e:	9f 93       	push	r25
    3620:	8f 93       	push	r24
    3622:	8e 01       	movw	r16, r28
    3624:	0f 5f       	subi	r16, 0xFF	; 255
    3626:	1f 4f       	sbci	r17, 0xFF	; 255
    3628:	1f 93       	push	r17
    362a:	0f 93       	push	r16
    362c:	0e 94 84 36 	call	0x6d08	; 0x6d08 <sprintf>
	suart_puts(string);
    3630:	c8 01       	movw	r24, r16
    3632:	0e 94 2a 32 	call	0x6454	; 0x6454 <suart_puts>
}

const char strSoundCommand[] PROGMEM="Sound command\r\n";
void parse_sound_command(char* command,uint8_t length)
{
	if(feedbackmessageon) serial_puts_p(strSoundCommand);
    3636:	0f 90       	pop	r0
    3638:	0f 90       	pop	r0
    363a:	0f 90       	pop	r0
    363c:	0f 90       	pop	r0
    363e:	0f 90       	pop	r0
    3640:	0f 90       	pop	r0
    3642:	80 91 55 02 	lds	r24, 0x0255
    3646:	88 23       	and	r24, r24
    3648:	21 f0       	breq	.+8      	; 0x3652 <sequence_command+0x932>
    364a:	83 ea       	ldi	r24, 0xA3	; 163
    364c:	93 e0       	ldi	r25, 0x03	; 3
    364e:	0e 94 d0 2b 	call	0x57a0	; 0x57a0 <serial_puts_p>

#ifdef _MP3TRIGGER_
	// pass on command to our own MP3_Trigger interpreter
	mp3_parse_command(command);
    3652:	88 e8       	ldi	r24, 0x88	; 136
    3654:	91 e0       	ldi	r25, 0x01	; 1
    3656:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <mp3_parse_command>
			seq_loadsequence(panel_fast_wave, SEQ_SIZE(panel_fast_wave));
			seq_resetspeed();
			DisplayFlash4();  					// 4 seconds flash display
			HPFlicker(4);						// HPs flicker for 4 seconds
			SoundFastWave(); 					// moody sound
			seq_startsequence();				// start panel sequence
    365a:	0e 94 34 29 	call	0x5268	; 0x5268 <seq_startsequence>
			if(feedbackmessageon) serial_puts_p(strSeqFastWave);		// debug console feedback
    365e:	80 91 55 02 	lds	r24, 0x0255
    3662:	88 23       	and	r24, r24
    3664:	09 f4       	brne	.+2      	; 0x3668 <sequence_command+0x948>
    3666:	87 cb       	rjmp	.-2290   	; 0x2d76 <sequence_command+0x56>
    3668:	f3 cb       	rjmp	.-2074   	; 0x2e50 <sequence_command+0x130>
			seq_startsequence();				// start panel sequence
			if(feedbackmessageon) serial_puts_p(strSeqScream);		// debug console feedback
			break;

		case 2: // WAVE
			seq_loadsequence(panel_wave, SEQ_SIZE(panel_wave));
    366a:	6d e0       	ldi	r22, 0x0D	; 13
    366c:	8e e7       	ldi	r24, 0x7E	; 126
    366e:	95 e1       	ldi	r25, 0x15	; 21
    3670:	0e 94 0c 29 	call	0x5218	; 0x5218 <seq_loadsequence>
			seq_resetspeed();
    3674:	0e 94 04 29 	call	0x5208	; 0x5208 <seq_resetspeed>
}

void HPFlash(uint8_t seconds)	// seconds from 0 (off) to 99 (always on)
{
	char string[7];
	sprintf(string, "*H0%02d\r", seconds);
    3678:	1f 92       	push	r1
    367a:	84 e0       	ldi	r24, 0x04	; 4
    367c:	8f 93       	push	r24
    367e:	8e e6       	ldi	r24, 0x6E	; 110
    3680:	91 e0       	ldi	r25, 0x01	; 1
    3682:	9f 93       	push	r25
    3684:	8f 93       	push	r24
    3686:	8e 01       	movw	r16, r28
    3688:	0f 5f       	subi	r16, 0xFF	; 255
    368a:	1f 4f       	sbci	r17, 0xFF	; 255
    368c:	1f 93       	push	r17
    368e:	0f 93       	push	r16
    3690:	0e 94 84 36 	call	0x6d08	; 0x6d08 <sprintf>
	suart_puts(string);
    3694:	c8 01       	movw	r24, r16
    3696:	0e 94 2a 32 	call	0x6454	; 0x6454 <suart_puts>
}

const char strSoundCommand[] PROGMEM="Sound command\r\n";
void parse_sound_command(char* command,uint8_t length)
{
	if(feedbackmessageon) serial_puts_p(strSoundCommand);
    369a:	0f 90       	pop	r0
    369c:	0f 90       	pop	r0
    369e:	0f 90       	pop	r0
    36a0:	0f 90       	pop	r0
    36a2:	0f 90       	pop	r0
    36a4:	0f 90       	pop	r0
    36a6:	80 91 55 02 	lds	r24, 0x0255
    36aa:	88 23       	and	r24, r24
    36ac:	21 f0       	breq	.+8      	; 0x36b6 <sequence_command+0x996>
    36ae:	83 ea       	ldi	r24, 0xA3	; 163
    36b0:	93 e0       	ldi	r25, 0x03	; 3
    36b2:	0e 94 d0 2b 	call	0x57a0	; 0x57a0 <serial_puts_p>

#ifdef _MP3TRIGGER_
	// pass on command to our own MP3_Trigger interpreter
	mp3_parse_command(command);
    36b6:	87 e7       	ldi	r24, 0x77	; 119
    36b8:	91 e0       	ldi	r25, 0x01	; 1
    36ba:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <mp3_parse_command>
		case 2: // WAVE
			seq_loadsequence(panel_wave, SEQ_SIZE(panel_wave));
			seq_resetspeed();
			HPFlash(4);							// flash holos for 4 seconds
			SoundWave(); 						// happy sound
			seq_startsequence();				// start sequence
    36be:	0e 94 34 29 	call	0x5268	; 0x5268 <seq_startsequence>
			if(feedbackmessageon) serial_puts_p(strSeqWave);			// debug console feedback
    36c2:	80 91 55 02 	lds	r24, 0x0255
    36c6:	88 23       	and	r24, r24
    36c8:	09 f4       	brne	.+2      	; 0x36cc <sequence_command+0x9ac>
    36ca:	55 cb       	rjmp	.-2390   	; 0x2d76 <sequence_command+0x56>
    36cc:	d4 cb       	rjmp	.-2136   	; 0x2e76 <sequence_command+0x156>
			seq_startsequence();				// start panel sequence
			if(feedbackmessageon) serial_puts_p(strSeqCloseAll);		// debug console feedback
			break;

		case 1: // SCREAM
			seq_loadsequence(panel_all_open, SEQ_SIZE(panel_all_open));
    36ce:	64 e0       	ldi	r22, 0x04	; 4
    36d0:	80 e8       	ldi	r24, 0x80	; 128
    36d2:	98 e1       	ldi	r25, 0x18	; 24
    36d4:	0e 94 0c 29 	call	0x5218	; 0x5218 <seq_loadsequence>
			seq_loadspeed(panel_slow_speed);	// slow open
    36d8:	8d e1       	ldi	r24, 0x1D	; 29
    36da:	91 e0       	ldi	r25, 0x01	; 1
    36dc:	0e 94 c6 28 	call	0x518c	; 0x518c <seq_loadspeed>
}

const char strSoundCommand[] PROGMEM="Sound command\r\n";
void parse_sound_command(char* command,uint8_t length)
{
	if(feedbackmessageon) serial_puts_p(strSoundCommand);
    36e0:	80 91 55 02 	lds	r24, 0x0255
    36e4:	88 23       	and	r24, r24
    36e6:	21 f0       	breq	.+8      	; 0x36f0 <sequence_command+0x9d0>
    36e8:	83 ea       	ldi	r24, 0xA3	; 163
    36ea:	93 e0       	ldi	r25, 0x03	; 3
    36ec:	0e 94 d0 2b 	call	0x57a0	; 0x57a0 <serial_puts_p>

#ifdef _MP3TRIGGER_
	// pass on command to our own MP3_Trigger interpreter
	mp3_parse_command(command);
    36f0:	83 e5       	ldi	r24, 0x53	; 83
    36f2:	91 e0       	ldi	r25, 0x01	; 1
    36f4:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <mp3_parse_command>
// JEDI Actions Commands
/////////////////////////////////////////////////

void DisplayScream()
{
	suart_puts("@0T5\r"); 	// scream display
    36f8:	86 e5       	ldi	r24, 0x56	; 86
    36fa:	91 e0       	ldi	r25, 0x01	; 1
    36fc:	0e 94 2a 32 	call	0x6454	; 0x6454 <suart_puts>
    3700:	2f ef       	ldi	r18, 0xFF	; 255
    3702:	81 ee       	ldi	r24, 0xE1	; 225
    3704:	94 e0       	ldi	r25, 0x04	; 4
    3706:	21 50       	subi	r18, 0x01	; 1
    3708:	80 40       	sbci	r24, 0x00	; 0
    370a:	90 40       	sbci	r25, 0x00	; 0
    370c:	e1 f7       	brne	.-8      	; 0x3706 <sequence_command+0x9e6>
    370e:	00 c0       	rjmp	.+0      	; 0x3710 <sequence_command+0x9f0>
    3710:	00 00       	nop
}

void MagicFlicker(uint8_t seconds)	// seconds from 0 (off) to 99 (always on)
{
	char string[7];
	sprintf(string, "*MF%02d\r", seconds);
    3712:	1f 92       	push	r1
    3714:	84 e0       	ldi	r24, 0x04	; 4
    3716:	8f 93       	push	r24
    3718:	8c e5       	ldi	r24, 0x5C	; 92
    371a:	91 e0       	ldi	r25, 0x01	; 1
    371c:	9f 93       	push	r25
    371e:	8f 93       	push	r24
    3720:	8e 01       	movw	r16, r28
    3722:	0f 5f       	subi	r16, 0xFF	; 255
    3724:	1f 4f       	sbci	r17, 0xFF	; 255
    3726:	1f 93       	push	r17
    3728:	0f 93       	push	r16
    372a:	0e 94 84 36 	call	0x6d08	; 0x6d08 <sprintf>
	suart_puts(string);
    372e:	c8 01       	movw	r24, r16
    3730:	0e 94 2a 32 	call	0x6454	; 0x6454 <suart_puts>
    3734:	ef ef       	ldi	r30, 0xFF	; 255
    3736:	f0 e7       	ldi	r31, 0x70	; 112
    3738:	22 e0       	ldi	r18, 0x02	; 2
    373a:	e1 50       	subi	r30, 0x01	; 1
    373c:	f0 40       	sbci	r31, 0x00	; 0
    373e:	20 40       	sbci	r18, 0x00	; 0
    3740:	e1 f7       	brne	.-8      	; 0x373a <sequence_command+0xa1a>
    3742:	00 c0       	rjmp	.+0      	; 0x3744 <sequence_command+0xa24>
    3744:	00 00       	nop
}

void HPFlicker(uint8_t seconds)	// all HP flicer seconds from 0 (off) to 99
{
	char string[7];
	sprintf(string, "*F0%02d\r", seconds);
    3746:	1f 92       	push	r1
    3748:	84 e0       	ldi	r24, 0x04	; 4
    374a:	8f 93       	push	r24
    374c:	85 e6       	ldi	r24, 0x65	; 101
    374e:	91 e0       	ldi	r25, 0x01	; 1
    3750:	9f 93       	push	r25
    3752:	8f 93       	push	r24
    3754:	1f 93       	push	r17
    3756:	0f 93       	push	r16
    3758:	0e 94 84 36 	call	0x6d08	; 0x6d08 <sprintf>
	suart_puts(string);
    375c:	c8 01       	movw	r24, r16
    375e:	0e 94 2a 32 	call	0x6454	; 0x6454 <suart_puts>
			seq_loadspeed(panel_slow_speed);	// slow open
			SoundScream();						// scream sound
			DisplayScream(); 					// scream display
			MagicFlicker(4); 					// magic panel on for 4 seconds
			HPFlicker(4);						// HPs flicker for 4 seconds
			seq_startsequence();				// start panel sequence
    3762:	0e 94 34 29 	call	0x5268	; 0x5268 <seq_startsequence>
			if(feedbackmessageon) serial_puts_p(strSeqScream);		// debug console feedback
    3766:	0f b6       	in	r0, 0x3f	; 63
    3768:	f8 94       	cli
    376a:	de bf       	out	0x3e, r29	; 62
    376c:	0f be       	out	0x3f, r0	; 63
    376e:	cd bf       	out	0x3d, r28	; 61
    3770:	80 91 55 02 	lds	r24, 0x0255
    3774:	88 23       	and	r24, r24
    3776:	09 f4       	brne	.+2      	; 0x377a <sequence_command+0xa5a>
    3778:	fe ca       	rjmp	.-2564   	; 0x2d76 <sequence_command+0x56>
    377a:	92 cb       	rjmp	.-2268   	; 0x2ea0 <sequence_command+0x180>
{
	char string[35];
	switch(value)
	{
		case 0: // CLOSE ALL PANELS
			seq_stopsequence(); 				// abort any previous sequence immediately
    377c:	0e 94 3e 29 	call	0x527c	; 0x527c <seq_stopsequence>
			seq_loadspeed(panel_slow_speed);	// slow speed for soft close
    3780:	8d e1       	ldi	r24, 0x1D	; 29
    3782:	91 e0       	ldi	r25, 0x01	; 1
    3784:	0e 94 c6 28 	call	0x518c	; 0x518c <seq_loadspeed>
			seq_loadsequence(panel_init, SEQ_SIZE(panel_init));
    3788:	62 e0       	ldi	r22, 0x02	; 2
    378a:	8c ec       	ldi	r24, 0xCC	; 204
    378c:	96 e0       	ldi	r25, 0x06	; 6
    378e:	0e 94 0c 29 	call	0x5218	; 0x5218 <seq_loadsequence>
			seq_startsequence();				// start panel sequence
    3792:	0e 94 34 29 	call	0x5268	; 0x5268 <seq_startsequence>
			if(feedbackmessageon) serial_puts_p(strSeqCloseAll);		// debug console feedback
    3796:	80 91 55 02 	lds	r24, 0x0255
    379a:	88 23       	and	r24, r24
    379c:	09 f4       	brne	.+2      	; 0x37a0 <sequence_command+0xa80>
    379e:	eb ca       	rjmp	.-2602   	; 0x2d76 <sequence_command+0x56>
    37a0:	8a e1       	ldi	r24, 0x1A	; 26
    37a2:	93 e0       	ldi	r25, 0x03	; 3
    37a4:	0e 94 d0 2b 	call	0x57a0	; 0x57a0 <serial_puts_p>
    37a8:	e6 ca       	rjmp	.-2612   	; 0x2d76 <sequence_command+0x56>
			break;

		default:
			sprintf(string, "(Sequence %02d not implemented) \r\n", value);
			seq_resetspeed();
			if(errormessageon) serial_puts(string);
    37aa:	c8 01       	movw	r24, r16
    37ac:	0e 94 75 2b 	call	0x56ea	; 0x56ea <serial_puts>
    37b0:	e2 ca       	rjmp	.-2620   	; 0x2d76 <sequence_command+0x56>

000037b2 <process_command>:

	process_command(cmd, arg);
}

void process_command(char* thecommand, char* theargument)
{
    37b2:	ff 92       	push	r15
    37b4:	0f 93       	push	r16
    37b6:	1f 93       	push	r17
    37b8:	cf 93       	push	r28
    37ba:	df 93       	push	r29
    37bc:	ec 01       	movw	r28, r24
    37be:	cb 01       	movw	r24, r22
	// hex conversion example
	// result=(int)strtol(str,(char **)NULL,16);
	// for now use base10 value conversion

	uint8_t value;
	value=atoi(theargument);
    37c0:	0e 94 1b 36 	call	0x6c36	; 0x6c36 <atoi>
    37c4:	8c 01       	movw	r16, r24

	if(strcmp(thecommand,CMD_SEQUENCE )==0)
    37c6:	60 e2       	ldi	r22, 0x20	; 32
    37c8:	72 e0       	ldi	r23, 0x02	; 2
    37ca:	ce 01       	movw	r24, r28
    37cc:	0e 94 45 36 	call	0x6c8a	; 0x6c8a <strcmp>
    37d0:	89 2b       	or	r24, r25
    37d2:	81 f1       	breq	.+96     	; 0x3834 <process_command+0x82>
		serial_puts_p(strOK);
		sequence_command(value);
		return;
	};

	if(strcmp(thecommand,CMD_OPEN )==0)
    37d4:	63 e2       	ldi	r22, 0x23	; 35
    37d6:	72 e0       	ldi	r23, 0x02	; 2
    37d8:	ce 01       	movw	r24, r28
    37da:	0e 94 45 36 	call	0x6c8a	; 0x6c8a <strcmp>
    37de:	89 2b       	or	r24, r25
    37e0:	09 f4       	brne	.+2      	; 0x37e4 <process_command+0x32>
    37e2:	64 c0       	rjmp	.+200    	; 0x38ac <process_command+0xfa>
	{
		serial_puts_p(strOK);
		open_command(value);
		return;
	};
	if(strcmp(thecommand,CMD_CLOSE )==0)
    37e4:	66 e2       	ldi	r22, 0x26	; 38
    37e6:	72 e0       	ldi	r23, 0x02	; 2
    37e8:	ce 01       	movw	r24, r28
    37ea:	0e 94 45 36 	call	0x6c8a	; 0x6c8a <strcmp>
    37ee:	89 2b       	or	r24, r25
    37f0:	69 f1       	breq	.+90     	; 0x384c <process_command+0x9a>
	{
		serial_puts_p(strOK);
		close_command(value);
		return;
	};
	if(strcmp(thecommand,CMD_RC )==0)
    37f2:	69 e2       	ldi	r22, 0x29	; 41
    37f4:	72 e0       	ldi	r23, 0x02	; 2
    37f6:	ce 01       	movw	r24, r28
    37f8:	0e 94 45 36 	call	0x6c8a	; 0x6c8a <strcmp>
    37fc:	89 2b       	or	r24, r25
    37fe:	09 f4       	brne	.+2      	; 0x3802 <process_command+0x50>
    3800:	65 c0       	rjmp	.+202    	; 0x38cc <process_command+0x11a>
	{
		serial_puts_p(strOK);
		rc_command(value);
		return;
	};
	if(strcmp(thecommand,CMD_STOP )==0)
    3802:	6c e2       	ldi	r22, 0x2C	; 44
    3804:	72 e0       	ldi	r23, 0x02	; 2
    3806:	ce 01       	movw	r24, r28
    3808:	0e 94 45 36 	call	0x6c8a	; 0x6c8a <strcmp>
    380c:	89 2b       	or	r24, r25
    380e:	09 f4       	brne	.+2      	; 0x3812 <process_command+0x60>
    3810:	8d c0       	rjmp	.+282    	; 0x392c <process_command+0x17a>
	{
		serial_puts_p(strOK);
		stop_command(value);
		return;
	};
	if(strcmp(thecommand,CMD_HOLD )==0)
    3812:	6f e2       	ldi	r22, 0x2F	; 47
    3814:	72 e0       	ldi	r23, 0x02	; 2
    3816:	ce 01       	movw	r24, r28
    3818:	0e 94 45 36 	call	0x6c8a	; 0x6c8a <strcmp>
    381c:	89 2b       	or	r24, r25
    381e:	a9 f1       	breq	.+106    	; 0x388a <process_command+0xd8>
		serial_puts_p(strOK);
		hold_command(value);
		return;
	};

	if(errormessageon) serial_puts_p(strPanelCmdErr);
    3820:	80 91 56 02 	lds	r24, 0x0256
    3824:	81 11       	cpse	r24, r1
    3826:	79 c0       	rjmp	.+242    	; 0x391a <process_command+0x168>

}
    3828:	df 91       	pop	r29
    382a:	cf 91       	pop	r28
    382c:	1f 91       	pop	r17
    382e:	0f 91       	pop	r16
    3830:	ff 90       	pop	r15
    3832:	08 95       	ret
	uint8_t value;
	value=atoi(theargument);

	if(strcmp(thecommand,CMD_SEQUENCE )==0)
	{
		serial_puts_p(strOK);
    3834:	8b e8       	ldi	r24, 0x8B	; 139
    3836:	94 e0       	ldi	r25, 0x04	; 4
    3838:	0e 94 d0 2b 	call	0x57a0	; 0x57a0 <serial_puts_p>
		sequence_command(value);
    383c:	80 2f       	mov	r24, r16
		return;
	};

	if(errormessageon) serial_puts_p(strPanelCmdErr);

}
    383e:	df 91       	pop	r29
    3840:	cf 91       	pop	r28
    3842:	1f 91       	pop	r17
    3844:	0f 91       	pop	r16
    3846:	ff 90       	pop	r15
	value=atoi(theargument);

	if(strcmp(thecommand,CMD_SEQUENCE )==0)
	{
		serial_puts_p(strOK);
		sequence_command(value);
    3848:	0c 94 90 16 	jmp	0x2d20	; 0x2d20 <sequence_command>
		open_command(value);
		return;
	};
	if(strcmp(thecommand,CMD_CLOSE )==0)
	{
		serial_puts_p(strOK);
    384c:	8b e8       	ldi	r24, 0x8B	; 139
    384e:	94 e0       	ldi	r25, 0x04	; 4
    3850:	0e 94 d0 2b 	call	0x57a0	; 0x57a0 <serial_puts_p>
	}
}

void close_command(uint8_t value)
{
	if(value==0)
    3854:	01 11       	cpse	r16, r1
    3856:	81 c0       	rjmp	.+258    	; 0x395a <process_command+0x1a8>
    3858:	8a e0       	ldi	r24, 0x0A	; 10
    385a:	eb e9       	ldi	r30, 0x9B	; 155
    385c:	f2 e0       	ldi	r31, 0x02	; 2
    385e:	df 01       	movw	r26, r30
    3860:	1d 92       	st	X+, r1
    3862:	8a 95       	dec	r24
    3864:	e9 f7       	brne	.-6      	; 0x3860 <process_command+0xae>
		{
			panel_rc_control[i-1]=0;
		}

		//sequence to close all panels, turn them off slowly
		seq_stopsequence(); // abort any previous sequence immediately
    3866:	0e 94 3e 29 	call	0x527c	; 0x527c <seq_stopsequence>
		seq_loadspeed(panel_slow_speed);
    386a:	8d e1       	ldi	r24, 0x1D	; 29
    386c:	91 e0       	ldi	r25, 0x01	; 1
    386e:	0e 94 c6 28 	call	0x518c	; 0x518c <seq_loadspeed>
		seq_loadsequence(panel_init, SEQ_SIZE(panel_init));
    3872:	62 e0       	ldi	r22, 0x02	; 2
    3874:	8c ec       	ldi	r24, 0xCC	; 204
    3876:	96 e0       	ldi	r25, 0x06	; 6
    3878:	0e 94 0c 29 	call	0x5218	; 0x5218 <seq_loadsequence>
		return;
	};

	if(errormessageon) serial_puts_p(strPanelCmdErr);

}
    387c:	df 91       	pop	r29
    387e:	cf 91       	pop	r28
    3880:	1f 91       	pop	r17
    3882:	0f 91       	pop	r16
    3884:	ff 90       	pop	r15

		//sequence to close all panels, turn them off slowly
		seq_stopsequence(); // abort any previous sequence immediately
		seq_loadspeed(panel_slow_speed);
		seq_loadsequence(panel_init, SEQ_SIZE(panel_init));
		seq_startsequence();
    3886:	0c 94 34 29 	jmp	0x5268	; 0x5268 <seq_startsequence>
		stop_command(value);
		return;
	};
	if(strcmp(thecommand,CMD_HOLD )==0)
	{
		serial_puts_p(strOK);
    388a:	8b e8       	ldi	r24, 0x8B	; 139
    388c:	94 e0       	ldi	r25, 0x04	; 4
    388e:	0e 94 d0 2b 	call	0x57a0	; 0x57a0 <serial_puts_p>

void hold_command(uint8_t value)
{
	// hard hold to last position, leave servo on.
	uint8_t i;
	if(value>SERVO_NUM) return;
    3892:	ba e0       	ldi	r27, 0x0A	; 10
    3894:	b0 17       	cp	r27, r16
    3896:	40 f2       	brcs	.-112    	; 0x3828 <process_command+0x76>

	// all servos off RC control
	if(value==0) // all off
    3898:	01 11       	cpse	r16, r1
    389a:	91 c0       	rjmp	.+290    	; 0x39be <process_command+0x20c>
    389c:	8a e0       	ldi	r24, 0x0A	; 10
    389e:	eb e9       	ldi	r30, 0x9B	; 155
    38a0:	f2 e0       	ldi	r31, 0x02	; 2
    38a2:	df 01       	movw	r26, r30
    38a4:	1d 92       	st	X+, r1
    38a6:	8a 95       	dec	r24
    38a8:	e9 f7       	brne	.-6      	; 0x38a4 <process_command+0xf2>
    38aa:	be cf       	rjmp	.-132    	; 0x3828 <process_command+0x76>
		return;
	};

	if(strcmp(thecommand,CMD_OPEN )==0)
	{
		serial_puts_p(strOK);
    38ac:	8b e8       	ldi	r24, 0x8B	; 139
    38ae:	94 e0       	ldi	r25, 0x04	; 4
    38b0:	0e 94 d0 2b 	call	0x57a0	; 0x57a0 <serial_puts_p>


void open_command(uint8_t value)
{
	uint8_t i;
	if(value==0) // open all
    38b4:	01 11       	cpse	r16, r1
    38b6:	1c c0       	rjmp	.+56     	; 0x38f0 <process_command+0x13e>
    38b8:	c1 e0       	ldi	r28, 0x01	; 1
	{
		for (i=1; i<=SERVO_NUM; i++)
		{
			servo_set(i, _OPN);
    38ba:	68 ee       	ldi	r22, 0xE8	; 232
    38bc:	73 e0       	ldi	r23, 0x03	; 3
    38be:	8c 2f       	mov	r24, r28
    38c0:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <servo_set>
void open_command(uint8_t value)
{
	uint8_t i;
	if(value==0) // open all
	{
		for (i=1; i<=SERVO_NUM; i++)
    38c4:	cf 5f       	subi	r28, 0xFF	; 255
    38c6:	cb 30       	cpi	r28, 0x0B	; 11
    38c8:	c1 f7       	brne	.-16     	; 0x38ba <process_command+0x108>
    38ca:	ae cf       	rjmp	.-164    	; 0x3828 <process_command+0x76>
		close_command(value);
		return;
	};
	if(strcmp(thecommand,CMD_RC )==0)
	{
		serial_puts_p(strOK);
    38cc:	8b e8       	ldi	r24, 0x8B	; 139
    38ce:	94 e0       	ldi	r25, 0x04	; 4
    38d0:	0e 94 d0 2b 	call	0x57a0	; 0x57a0 <serial_puts_p>

void rc_command(uint8_t value)
{
	uint8_t i;

	if(value>SERVO_NUM) return;
    38d4:	8a e0       	ldi	r24, 0x0A	; 10
    38d6:	80 17       	cp	r24, r16
    38d8:	08 f4       	brcc	.+2      	; 0x38dc <process_command+0x12a>
    38da:	a6 cf       	rjmp	.-180    	; 0x3828 <process_command+0x76>

	if(value==0) // all on
    38dc:	00 23       	and	r16, r16
    38de:	09 f4       	brne	.+2      	; 0x38e2 <process_command+0x130>
    38e0:	61 c0       	rjmp	.+194    	; 0x39a4 <process_command+0x1f2>
		}
		return;
	}

	// add the panel to RC controlled list
	panel_rc_control[value-1]=1;
    38e2:	f8 01       	movw	r30, r16
    38e4:	ff 27       	eor	r31, r31
    38e6:	e6 56       	subi	r30, 0x66	; 102
    38e8:	fd 4f       	sbci	r31, 0xFD	; 253
    38ea:	81 e0       	ldi	r24, 0x01	; 1
    38ec:	80 83       	st	Z, r24
    38ee:	9c cf       	rjmp	.-200    	; 0x3828 <process_command+0x76>
		{
			servo_set(i, _OPN);
		}
		return;
	}
	if(value<=SERVO_NUM) // open specific panel
    38f0:	8a e0       	ldi	r24, 0x0A	; 10
    38f2:	80 17       	cp	r24, r16
    38f4:	08 f0       	brcs	.+2      	; 0x38f8 <process_command+0x146>
    38f6:	69 c0       	rjmp	.+210    	; 0x39ca <process_command+0x218>
	{
		servo_set(value, _OPN);
		return;
	}
	if(value==11) // open top panels
    38f8:	ab e0       	ldi	r26, 0x0B	; 11
    38fa:	0a 17       	cp	r16, r26
    38fc:	09 f4       	brne	.+2      	; 0x3900 <process_command+0x14e>
    38fe:	48 c0       	rjmp	.+144    	; 0x3990 <process_command+0x1de>
		{
			servo_set(i, _OPN);
		}
		return;
	}
	if(value==12) // open bottom panels
    3900:	bc e0       	ldi	r27, 0x0C	; 12
    3902:	0b 13       	cpse	r16, r27
    3904:	91 cf       	rjmp	.-222    	; 0x3828 <process_command+0x76>
    3906:	c1 e0       	ldi	r28, 0x01	; 1
	{
		for (i=1; i<=6; i++)
		{
			servo_set(i, _OPN);
    3908:	68 ee       	ldi	r22, 0xE8	; 232
    390a:	73 e0       	ldi	r23, 0x03	; 3
    390c:	8c 2f       	mov	r24, r28
    390e:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <servo_set>
		}
		return;
	}
	if(value==12) // open bottom panels
	{
		for (i=1; i<=6; i++)
    3912:	cf 5f       	subi	r28, 0xFF	; 255
    3914:	c7 30       	cpi	r28, 0x07	; 7
    3916:	c1 f7       	brne	.-16     	; 0x3908 <process_command+0x156>
    3918:	87 cf       	rjmp	.-242    	; 0x3828 <process_command+0x76>
		serial_puts_p(strOK);
		hold_command(value);
		return;
	};

	if(errormessageon) serial_puts_p(strPanelCmdErr);
    391a:	80 e3       	ldi	r24, 0x30	; 48
    391c:	93 e0       	ldi	r25, 0x03	; 3

}
    391e:	df 91       	pop	r29
    3920:	cf 91       	pop	r28
    3922:	1f 91       	pop	r17
    3924:	0f 91       	pop	r16
    3926:	ff 90       	pop	r15
		serial_puts_p(strOK);
		hold_command(value);
		return;
	};

	if(errormessageon) serial_puts_p(strPanelCmdErr);
    3928:	0c 94 d0 2b 	jmp	0x57a0	; 0x57a0 <serial_puts_p>
		rc_command(value);
		return;
	};
	if(strcmp(thecommand,CMD_STOP )==0)
	{
		serial_puts_p(strOK);
    392c:	8b e8       	ldi	r24, 0x8B	; 139
    392e:	94 e0       	ldi	r25, 0x04	; 4
    3930:	0e 94 d0 2b 	call	0x57a0	; 0x57a0 <serial_puts_p>
void stop_command(uint8_t value)
{
	// panel hold with buzz kill: remove from RC and stop servos

	uint8_t i;
	if(value>SERVO_NUM) return;
    3934:	aa e0       	ldi	r26, 0x0A	; 10
    3936:	a0 17       	cp	r26, r16
    3938:	08 f4       	brcc	.+2      	; 0x393c <process_command+0x18a>
    393a:	76 cf       	rjmp	.-276    	; 0x3828 <process_command+0x76>

	// all panels hold to last position and servo off
	if(value==0)
    393c:	01 11       	cpse	r16, r1
    393e:	4f c0       	rjmp	.+158    	; 0x39de <process_command+0x22c>
    3940:	cb e9       	ldi	r28, 0x9B	; 155
    3942:	d2 e0       	ldi	r29, 0x02	; 2
    3944:	11 e0       	ldi	r17, 0x01	; 1
	{
		for(i=1; i<=SERVO_NUM; i++)
		 {
			 panel_rc_control[i-1]=0;
    3946:	19 92       	st	Y+, r1
			 servo_set(i,SERVO_NO_PULSE);
    3948:	6f ef       	ldi	r22, 0xFF	; 255
    394a:	7f ef       	ldi	r23, 0xFF	; 255
    394c:	81 2f       	mov	r24, r17
    394e:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <servo_set>
	if(value>SERVO_NUM) return;

	// all panels hold to last position and servo off
	if(value==0)
	{
		for(i=1; i<=SERVO_NUM; i++)
    3952:	1f 5f       	subi	r17, 0xFF	; 255
    3954:	1b 30       	cpi	r17, 0x0B	; 11
    3956:	b9 f7       	brne	.-18     	; 0x3946 <process_command+0x194>
    3958:	67 cf       	rjmp	.-306    	; 0x3828 <process_command+0x76>
		seq_loadspeed(panel_slow_speed);
		seq_loadsequence(panel_init, SEQ_SIZE(panel_init));
		seq_startsequence();
		return;
	}
	if(value<=SERVO_NUM)
    395a:	ba e0       	ldi	r27, 0x0A	; 10
    395c:	b0 17       	cp	r27, r16
    395e:	08 f4       	brcc	.+2      	; 0x3962 <process_command+0x1b0>
    3960:	63 cf       	rjmp	.-314    	; 0x3828 <process_command+0x76>
	{
		panel_rc_control[value-1]=0;	// turn off RC control which would re-open the panel
    3962:	e8 01       	movw	r28, r16
    3964:	dd 27       	eor	r29, r29
    3966:	21 97       	sbiw	r28, 0x01	; 1
    3968:	fe 01       	movw	r30, r28
    396a:	e5 56       	subi	r30, 0x65	; 101
    396c:	fd 4f       	sbci	r31, 0xFD	; 253
    396e:	10 82       	st	Z, r1
		servo_set(value, _CLS);			// close the servo
    3970:	60 ed       	ldi	r22, 0xD0	; 208
    3972:	77 e0       	ldi	r23, 0x07	; 7
    3974:	80 2f       	mov	r24, r16
    3976:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <servo_set>

		// Give time for the panel to close, then shut it off for buzz control
		killbuzz_timer=COUNT_PER_SECOND/3; // set a 1/3s timer
    397a:	81 e2       	ldi	r24, 0x21	; 33
    397c:	90 e0       	ldi	r25, 0x00	; 0
    397e:	90 93 a6 02 	sts	0x02A6, r25
    3982:	80 93 a5 02 	sts	0x02A5, r24
		panel_to_silence[value-1]=1;	// flag the panel to silence, will be caught in main loop
    3986:	c9 55       	subi	r28, 0x59	; 89
    3988:	dd 4f       	sbci	r29, 0xFD	; 253
    398a:	81 e0       	ldi	r24, 0x01	; 1
    398c:	88 83       	st	Y, r24
    398e:	4c cf       	rjmp	.-360    	; 0x3828 <process_command+0x76>
	if(value<=SERVO_NUM) // open specific panel
	{
		servo_set(value, _OPN);
		return;
	}
	if(value==11) // open top panels
    3990:	c7 e0       	ldi	r28, 0x07	; 7
	{
		for (i=7; i<=SERVO_NUM; i++)
		{
			servo_set(i, _OPN);
    3992:	68 ee       	ldi	r22, 0xE8	; 232
    3994:	73 e0       	ldi	r23, 0x03	; 3
    3996:	8c 2f       	mov	r24, r28
    3998:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <servo_set>
		servo_set(value, _OPN);
		return;
	}
	if(value==11) // open top panels
	{
		for (i=7; i<=SERVO_NUM; i++)
    399c:	cf 5f       	subi	r28, 0xFF	; 255
    399e:	cb 30       	cpi	r28, 0x0B	; 11
    39a0:	c1 f7       	brne	.-16     	; 0x3992 <process_command+0x1e0>
    39a2:	42 cf       	rjmp	.-380    	; 0x3828 <process_command+0x76>
    39a4:	4a e0       	ldi	r20, 0x0A	; 10
    39a6:	50 e0       	ldi	r21, 0x00	; 0
    39a8:	61 e0       	ldi	r22, 0x01	; 1
    39aa:	70 e0       	ldi	r23, 0x00	; 0
    39ac:	8b e9       	ldi	r24, 0x9B	; 155
    39ae:	92 e0       	ldi	r25, 0x02	; 2
		return;
	};

	if(errormessageon) serial_puts_p(strPanelCmdErr);

}
    39b0:	df 91       	pop	r29
    39b2:	cf 91       	pop	r28
    39b4:	1f 91       	pop	r17
    39b6:	0f 91       	pop	r16
    39b8:	ff 90       	pop	r15
    39ba:	0c 94 3e 36 	jmp	0x6c7c	; 0x6c7c <memset>
		 }
		return;
	}

	// remove the panel to RC controlled list
	panel_rc_control[value-1]=0;
    39be:	f8 01       	movw	r30, r16
    39c0:	ff 27       	eor	r31, r31
    39c2:	e6 56       	subi	r30, 0x66	; 102
    39c4:	fd 4f       	sbci	r31, 0xFD	; 253
    39c6:	10 82       	st	Z, r1
    39c8:	2f cf       	rjmp	.-418    	; 0x3828 <process_command+0x76>
		}
		return;
	}
	if(value<=SERVO_NUM) // open specific panel
	{
		servo_set(value, _OPN);
    39ca:	68 ee       	ldi	r22, 0xE8	; 232
    39cc:	73 e0       	ldi	r23, 0x03	; 3
		return;
	}

	// remove just one panel to RC controlled list and turn it off
	panel_rc_control[value-1]=0;
	servo_set(value,SERVO_NO_PULSE);
    39ce:	80 2f       	mov	r24, r16
		return;
	};

	if(errormessageon) serial_puts_p(strPanelCmdErr);

}
    39d0:	df 91       	pop	r29
    39d2:	cf 91       	pop	r28
    39d4:	1f 91       	pop	r17
    39d6:	0f 91       	pop	r16
    39d8:	ff 90       	pop	r15
		return;
	}

	// remove just one panel to RC controlled list and turn it off
	panel_rc_control[value-1]=0;
	servo_set(value,SERVO_NO_PULSE);
    39da:	0c 94 35 2e 	jmp	0x5c6a	; 0x5c6a <servo_set>
		 }
		return;
	}

	// remove just one panel to RC controlled list and turn it off
	panel_rc_control[value-1]=0;
    39de:	f8 01       	movw	r30, r16
    39e0:	ff 27       	eor	r31, r31
    39e2:	e6 56       	subi	r30, 0x66	; 102
    39e4:	fd 4f       	sbci	r31, 0xFD	; 253
    39e6:	10 82       	st	Z, r1
	servo_set(value,SERVO_NO_PULSE);
    39e8:	6f ef       	ldi	r22, 0xFF	; 255
    39ea:	7f ef       	ldi	r23, 0xFF	; 255
    39ec:	f0 cf       	rjmp	.-32     	; 0x39ce <process_command+0x21c>

000039ee <parse_panel_command>:
}


const char strPanelCmdErr[] PROGMEM="**Invalid Panel Command\r\n";
void parse_panel_command(char* command_string, uint8_t length)
{
    39ee:	cf 93       	push	r28
    39f0:	df 93       	push	r29
    39f2:	00 d0       	rcall	.+0      	; 0x39f4 <parse_panel_command+0x6>
    39f4:	00 d0       	rcall	.+0      	; 0x39f6 <parse_panel_command+0x8>
    39f6:	00 d0       	rcall	.+0      	; 0x39f8 <parse_panel_command+0xa>
    39f8:	cd b7       	in	r28, 0x3d	; 61
    39fa:	de b7       	in	r29, 0x3e	; 62

	char cmd[3];
	char arg[3];

	// a properly constructed command should have 5 chars
	if (length!=5)
    39fc:	65 30       	cpi	r22, 0x05	; 5
    39fe:	91 f0       	breq	.+36     	; 0x3a24 <parse_panel_command+0x36>
	{
		if(errormessageon) serial_puts_p(strPanelCmdErr);
    3a00:	80 91 56 02 	lds	r24, 0x0256
    3a04:	81 11       	cpse	r24, r1
    3a06:	09 c0       	rjmp	.+18     	; 0x3a1a <parse_panel_command+0x2c>
	arg[0]=command_string[3];
	arg[1]=command_string[4];
	arg[2]='\0';

	process_command(cmd, arg);
}
    3a08:	26 96       	adiw	r28, 0x06	; 6
    3a0a:	0f b6       	in	r0, 0x3f	; 63
    3a0c:	f8 94       	cli
    3a0e:	de bf       	out	0x3e, r29	; 62
    3a10:	0f be       	out	0x3f, r0	; 63
    3a12:	cd bf       	out	0x3d, r28	; 61
    3a14:	df 91       	pop	r29
    3a16:	cf 91       	pop	r28
    3a18:	08 95       	ret
	char arg[3];

	// a properly constructed command should have 5 chars
	if (length!=5)
	{
		if(errormessageon) serial_puts_p(strPanelCmdErr);
    3a1a:	80 e3       	ldi	r24, 0x30	; 48
    3a1c:	93 e0       	ldi	r25, 0x03	; 3
    3a1e:	0e 94 d0 2b 	call	0x57a0	; 0x57a0 <serial_puts_p>
    3a22:	f2 cf       	rjmp	.-28     	; 0x3a08 <parse_panel_command+0x1a>
		return;
	}

	// character ':' begins command, just double check, should not happen
	if(command_string[0]!=PANEL_START_CHAR)
    3a24:	fc 01       	movw	r30, r24
    3a26:	20 81       	ld	r18, Z
    3a28:	2a 33       	cpi	r18, 0x3A	; 58
    3a2a:	51 f7       	brne	.-44     	; 0x3a00 <parse_panel_command+0x12>
	{
		if(errormessageon) serial_puts_p(strPanelCmdErr);
		return;
	}

	cmd[0]=command_string[1];
    3a2c:	21 81       	ldd	r18, Z+1	; 0x01
    3a2e:	2c 83       	std	Y+4, r18	; 0x04
	cmd[1]=command_string[2];
    3a30:	22 81       	ldd	r18, Z+2	; 0x02
    3a32:	2d 83       	std	Y+5, r18	; 0x05
	cmd[2]='\0';
    3a34:	1e 82       	std	Y+6, r1	; 0x06
	arg[0]=command_string[3];
    3a36:	23 81       	ldd	r18, Z+3	; 0x03
    3a38:	29 83       	std	Y+1, r18	; 0x01
	arg[1]=command_string[4];
    3a3a:	84 81       	ldd	r24, Z+4	; 0x04
    3a3c:	8a 83       	std	Y+2, r24	; 0x02
	arg[2]='\0';
    3a3e:	1b 82       	std	Y+3, r1	; 0x03

	process_command(cmd, arg);
    3a40:	be 01       	movw	r22, r28
    3a42:	6f 5f       	subi	r22, 0xFF	; 255
    3a44:	7f 4f       	sbci	r23, 0xFF	; 255
    3a46:	ce 01       	movw	r24, r28
    3a48:	04 96       	adiw	r24, 0x04	; 4
    3a4a:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <process_command>
    3a4e:	dc cf       	rjmp	.-72     	; 0x3a08 <parse_panel_command+0x1a>

00003a50 <dispatch_command>:
	return FALSE;
}

// dispatches further command processing depending on start character
void dispatch_command(char* command_str)
{
    3a50:	0f 93       	push	r16
    3a52:	1f 93       	push	r17
    3a54:	cf 93       	push	r28
    3a56:	df 93       	push	r29
    3a58:	00 d0       	rcall	.+0      	; 0x3a5a <dispatch_command+0xa>
    3a5a:	00 d0       	rcall	.+0      	; 0x3a5c <dispatch_command+0xc>
    3a5c:	00 d0       	rcall	.+0      	; 0x3a5e <dispatch_command+0xe>
    3a5e:	cd b7       	in	r28, 0x3d	; 61
    3a60:	de b7       	in	r29, 0x3e	; 62
    3a62:	8c 01       	movw	r16, r24
	char start_char=command_str[0];
    3a64:	fc 01       	movw	r30, r24
    3a66:	40 81       	ld	r20, Z
	uint8_t length=strlen(command_str);
    3a68:	dc 01       	movw	r26, r24
    3a6a:	0d 90       	ld	r0, X+
    3a6c:	00 20       	and	r0, r0
    3a6e:	e9 f7       	brne	.-6      	; 0x3a6a <dispatch_command+0x1a>
    3a70:	11 97       	sbiw	r26, 0x01	; 1
    3a72:	a8 1b       	sub	r26, r24
    3a74:	b9 0b       	sbc	r27, r25

	// prompt on empty command to show life at console
	if(length==0)
    3a76:	aa 23       	and	r26, r26
    3a78:	a1 f0       	breq	.+40     	; 0x3aa2 <dispatch_command+0x52>
		serial_puts_p(strOK);
		return;
	}

	// dispatch the command to the appropriate parser depending on start character
	switch(start_char)
    3a7a:	50 e0       	ldi	r21, 0x00	; 0
    3a7c:	41 52       	subi	r20, 0x21	; 33
    3a7e:	51 09       	sbc	r21, r1
    3a80:	40 32       	cpi	r20, 0x20	; 32
    3a82:	51 05       	cpc	r21, r1
    3a84:	48 f0       	brcs	.+18     	; 0x3a98 <dispatch_command+0x48>
		break;
	 case I2C_START_CHAR:
		 parse_i2c_command(command_str,length);
		 break;
	 default:
		if(errormessageon) serial_puts_p(strStartCharErr);
    3a86:	80 91 56 02 	lds	r24, 0x0256
    3a8a:	88 23       	and	r24, r24
    3a8c:	71 f0       	breq	.+28     	; 0x3aaa <dispatch_command+0x5a>
    3a8e:	84 ee       	ldi	r24, 0xE4	; 228
    3a90:	93 e0       	ldi	r25, 0x03	; 3
    3a92:	0e 94 d0 2b 	call	0x57a0	; 0x57a0 <serial_puts_p>
    3a96:	09 c0       	rjmp	.+18     	; 0x3aaa <dispatch_command+0x5a>
		serial_puts_p(strOK);
		return;
	}

	// dispatch the command to the appropriate parser depending on start character
	switch(start_char)
    3a98:	49 54       	subi	r20, 0x49	; 73
    3a9a:	5f 4f       	sbci	r21, 0xFF	; 255
    3a9c:	fa 01       	movw	r30, r20
    3a9e:	0c 94 2c 35 	jmp	0x6a58	; 0x6a58 <__tablejump2__>
	uint8_t length=strlen(command_str);

	// prompt on empty command to show life at console
	if(length==0)
	{
		serial_puts_p(strOK);
    3aa2:	8b e8       	ldi	r24, 0x8B	; 139
    3aa4:	94 e0       	ldi	r25, 0x04	; 4
    3aa6:	0e 94 d0 2b 	call	0x57a0	; 0x57a0 <serial_puts_p>
		 break;
	 default:
		if(errormessageon) serial_puts_p(strStartCharErr);
		 break;
	}
}
    3aaa:	26 96       	adiw	r28, 0x06	; 6
    3aac:	0f b6       	in	r0, 0x3f	; 63
    3aae:	f8 94       	cli
    3ab0:	de bf       	out	0x3e, r29	; 62
    3ab2:	0f be       	out	0x3f, r0	; 63
    3ab4:	cd bf       	out	0x3d, r28	; 61
    3ab6:	df 91       	pop	r29
    3ab8:	cf 91       	pop	r28
    3aba:	1f 91       	pop	r17
    3abc:	0f 91       	pop	r16
    3abe:	08 95       	ret
}

const char strDisplayCommand[] PROGMEM="Display command\r\n";
void parse_display_command(char* command, uint8_t length)
{
	if(feedbackmessageon) serial_puts_p(strDisplayCommand);
    3ac0:	80 91 55 02 	lds	r24, 0x0255
    3ac4:	88 23       	and	r24, r24
    3ac6:	21 f0       	breq	.+8      	; 0x3ad0 <dispatch_command+0x80>
    3ac8:	83 eb       	ldi	r24, 0xB3	; 179
    3aca:	93 e0       	ldi	r25, 0x03	; 3
    3acc:	0e 94 d0 2b 	call	0x57a0	; 0x57a0 <serial_puts_p>
const char strHPCommand[] PROGMEM="HP command\r\n";
void parse_hp_command(char* command, uint8_t length)
{
	if(feedbackmessageon) serial_puts_p(strHPCommand);
	// pass on command to hp controller on suart
	suart_puts(command);
    3ad0:	c8 01       	movw	r24, r16
    3ad2:	0e 94 2a 32 	call	0x6454	; 0x6454 <suart_puts>
	// need to add the \r which is not part of the command string
	suart_putc('\r');
    3ad6:	8d e0       	ldi	r24, 0x0D	; 13
    3ad8:	0e 94 21 32 	call	0x6442	; 0x6442 <suart_putc>
    3adc:	e6 cf       	rjmp	.-52     	; 0x3aaa <dispatch_command+0x5a>

	char cmd[3];
	char arg[3];

	// a properly constructed command should have 5 chars
	if (length!=5)
    3ade:	a5 30       	cpi	r26, 0x05	; 5
    3ae0:	e1 f1       	breq	.+120    	; 0x3b5a <dispatch_command+0x10a>
	{
		if(errormessageon) serial_puts_p(strPanelCmdErr);
    3ae2:	80 91 56 02 	lds	r24, 0x0256
    3ae6:	88 23       	and	r24, r24
    3ae8:	01 f3       	breq	.-64     	; 0x3aaa <dispatch_command+0x5a>
    3aea:	80 e3       	ldi	r24, 0x30	; 48
    3aec:	93 e0       	ldi	r25, 0x03	; 3
    3aee:	0e 94 d0 2b 	call	0x57a0	; 0x57a0 <serial_puts_p>
    3af2:	db cf       	rjmp	.-74     	; 0x3aaa <dispatch_command+0x5a>
}

const char strHPCommand[] PROGMEM="HP command\r\n";
void parse_hp_command(char* command, uint8_t length)
{
	if(feedbackmessageon) serial_puts_p(strHPCommand);
    3af4:	80 91 55 02 	lds	r24, 0x0255
    3af8:	88 23       	and	r24, r24
    3afa:	51 f3       	breq	.-44     	; 0x3ad0 <dispatch_command+0x80>
    3afc:	85 ec       	ldi	r24, 0xC5	; 197
    3afe:	93 e0       	ldi	r25, 0x03	; 3
    3b00:	0e 94 d0 2b 	call	0x57a0	; 0x57a0 <serial_puts_p>
    3b04:	e5 cf       	rjmp	.-54     	; 0x3ad0 <dispatch_command+0x80>
		break;
	 case ALT2_START_CHAR:
		parse_alt2_command(command_str,length);
		break;
	 case I2C_START_CHAR:
		 parse_i2c_command(command_str,length);
    3b06:	6a 2f       	mov	r22, r26
    3b08:	c8 01       	movw	r24, r16
    3b0a:	0e 94 c3 14 	call	0x2986	; 0x2986 <parse_i2c_command>
		 break;
    3b0e:	cd cf       	rjmp	.-102    	; 0x3aaa <dispatch_command+0x5a>
// for custom/future expansion, forwarded to HP MarcDuino,
// which will forward it to it's suart2 after stripping
const char strAlt2Command[] PROGMEM="Alt2 command, forward to slave\r\n";
void parse_alt2_command(char* command, uint8_t length)
{
	if(feedbackmessageon) serial_puts_p(strAlt1Command);
    3b10:	80 91 55 02 	lds	r24, 0x0255
    3b14:	88 23       	and	r24, r24
    3b16:	e1 f2       	breq	.-72     	; 0x3ad0 <dispatch_command+0x80>
    3b18:	83 e8       	ldi	r24, 0x83	; 131
    3b1a:	93 e0       	ldi	r25, 0x03	; 3
    3b1c:	0e 94 d0 2b 	call	0x57a0	; 0x57a0 <serial_puts_p>
    3b20:	d7 cf       	rjmp	.-82     	; 0x3ad0 <dispatch_command+0x80>
}

const char strSoundCommand[] PROGMEM="Sound command\r\n";
void parse_sound_command(char* command,uint8_t length)
{
	if(feedbackmessageon) serial_puts_p(strSoundCommand);
    3b22:	80 91 55 02 	lds	r24, 0x0255
    3b26:	88 23       	and	r24, r24
    3b28:	21 f0       	breq	.+8      	; 0x3b32 <dispatch_command+0xe2>
    3b2a:	83 ea       	ldi	r24, 0xA3	; 163
    3b2c:	93 e0       	ldi	r25, 0x03	; 3
    3b2e:	0e 94 d0 2b 	call	0x57a0	; 0x57a0 <serial_puts_p>

#ifdef _MP3TRIGGER_
	// pass on command to our own MP3_Trigger interpreter
	mp3_parse_command(command);
    3b32:	c8 01       	movw	r24, r16
    3b34:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <mp3_parse_command>
    3b38:	b8 cf       	rjmp	.-144    	; 0x3aaa <dispatch_command+0x5a>

// for custom/future expansion, forwarded to suart2 with start character dropped
const char strAlt1Command[] PROGMEM="Alt1 command, output to sound\r\n";
void parse_alt1_command(char* command, uint8_t length)
{
	if(feedbackmessageon) serial_puts_p(strAlt1Command);
    3b3a:	80 91 55 02 	lds	r24, 0x0255
    3b3e:	88 23       	and	r24, r24
    3b40:	21 f0       	breq	.+8      	; 0x3b4a <dispatch_command+0xfa>
    3b42:	83 e8       	ldi	r24, 0x83	; 131
    3b44:	93 e0       	ldi	r25, 0x03	; 3
    3b46:	0e 94 d0 2b 	call	0x57a0	; 0x57a0 <serial_puts_p>
	suart2_puts(command+1);  // discard the start character
    3b4a:	c8 01       	movw	r24, r16
    3b4c:	01 96       	adiw	r24, 0x01	; 1
    3b4e:	0e 94 89 33 	call	0x6712	; 0x6712 <suart2_puts>
	suart2_putc('\r');		 // add the termination character
    3b52:	8d e0       	ldi	r24, 0x0D	; 13
    3b54:	0e 94 80 33 	call	0x6700	; 0x6700 <suart2_putc>
    3b58:	a8 cf       	rjmp	.-176    	; 0x3aaa <dispatch_command+0x5a>
	{
		if(errormessageon) serial_puts_p(strPanelCmdErr);
		return;
	}

	cmd[0]=command_string[1];
    3b5a:	f8 01       	movw	r30, r16
    3b5c:	81 81       	ldd	r24, Z+1	; 0x01
    3b5e:	8c 83       	std	Y+4, r24	; 0x04
	cmd[1]=command_string[2];
    3b60:	82 81       	ldd	r24, Z+2	; 0x02
    3b62:	8d 83       	std	Y+5, r24	; 0x05
	cmd[2]='\0';
    3b64:	1e 82       	std	Y+6, r1	; 0x06
	arg[0]=command_string[3];
    3b66:	83 81       	ldd	r24, Z+3	; 0x03
    3b68:	89 83       	std	Y+1, r24	; 0x01
	arg[1]=command_string[4];
    3b6a:	84 81       	ldd	r24, Z+4	; 0x04
    3b6c:	8a 83       	std	Y+2, r24	; 0x02
	arg[2]='\0';
    3b6e:	1b 82       	std	Y+3, r1	; 0x03

	process_command(cmd, arg);
    3b70:	be 01       	movw	r22, r28
    3b72:	6f 5f       	subi	r22, 0xFF	; 255
    3b74:	7f 4f       	sbci	r23, 0xFF	; 255
    3b76:	ce 01       	movw	r24, r28
    3b78:	04 96       	adiw	r24, 0x04	; 4
    3b7a:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <process_command>
    3b7e:	95 cf       	rjmp	.-214    	; 0x3aaa <dispatch_command+0x5a>

00003b80 <main>:
	}
	else serial_putc(ch);
}


int main(void) {
    3b80:	cf 93       	push	r28
    3b82:	df 93       	push	r29
    3b84:	cd b7       	in	r28, 0x3d	; 61
    3b86:	de b7       	in	r29, 0x3e	; 62
    3b88:	c2 54       	subi	r28, 0x42	; 66
    3b8a:	d1 09       	sbc	r29, r1
    3b8c:	0f b6       	in	r0, 0x3f	; 63
    3b8e:	f8 94       	cli
    3b90:	de bf       	out	0x3e, r29	; 62
    3b92:	0f be       	out	0x3f, r0	; 63
    3b94:	cd bf       	out	0x3d, r28	; 61

	// start hardware and software UARTs, send check string
	serial_init_9600b8N1();	// 9600 bauds, 8 bits, 1 stop, no parity, use for a regular terminal console
    3b96:	0e 94 74 2a 	call	0x54e8	; 0x54e8 <serial_init_9600b8N1>
	serial_puts_p(strWelcome);
    3b9a:	80 e7       	ldi	r24, 0x70	; 112
    3b9c:	94 e0       	ldi	r25, 0x04	; 4
    3b9e:	0e 94 d0 2b 	call	0x57a0	; 0x57a0 <serial_puts_p>
	serial_puts_p(strInitializing);
    3ba2:	82 ed       	ldi	r24, 0xD2	; 210
    3ba4:	93 e0       	ldi	r25, 0x03	; 3
    3ba6:	0e 94 d0 2b 	call	0x57a0	; 0x57a0 <serial_puts_p>


	// output test string on the Software UART on PC0
	// communicates with HPController MarcDuino board
	suart_init(9600);
    3baa:	60 e8       	ldi	r22, 0x80	; 128
    3bac:	75 e2       	ldi	r23, 0x25	; 37
    3bae:	80 e0       	ldi	r24, 0x00	; 0
    3bb0:	90 e0       	ldi	r25, 0x00	; 0
    3bb2:	0e 94 10 31 	call	0x6220	; 0x6220 <suart_init>
	suart_puts_p(strSuart1OK);
    3bb6:	8a e2       	ldi	r24, 0x2A	; 42
    3bb8:	94 e0       	ldi	r25, 0x04	; 4
    3bba:	0e 94 56 32 	call	0x64ac	; 0x64ac <suart_puts_p>
	suart2_init(9600);
	suart2_puts_p(strSuart2OK);
#endif

	// initialize servo, realtime and sequencer units
	servo_init();
    3bbe:	0e 94 f2 2b 	call	0x57e4	; 0x57e4 <servo_init>
	realtime_init();
    3bc2:	0e 94 ee 23 	call	0x47dc	; 0x47dc <realtime_init>
	seq_init();
    3bc6:	0e 94 b4 28 	call	0x5168	; 0x5168 <seq_init>

#ifdef _MARCDUINOV2_
	// initialize I2C hardware on MarcDuino v2's with 10k pull-up resistors on.
	i2c_init(TRUE);
    3bca:	81 e0       	ldi	r24, 0x01	; 1
    3bcc:	0e 94 a3 10 	call	0x2146	; 0x2146 <i2c_init>
#endif

	// register our buzz kill timer
	rt_add_timer(&killbuzz_timer);
    3bd0:	85 ea       	ldi	r24, 0xA5	; 165
    3bd2:	92 e0       	ldi	r25, 0x02	; 2
    3bd4:	0e 94 d0 22 	call	0x45a0	; 0x45a0 <rt_add_timer>
	//### experimental
	digitalMode(WIFLY_RESETPORT, WIFLY_RESETPIN, OUTPUT);	// Wifly reset on PC2/AUX1
    3bd8:	3a 9a       	sbi	0x07, 2	; 7
	digitalWrite(WIFLY_RESETPORT,WIFLY_RESETPIN,HIGH);		// deactivate reset
    3bda:	42 9a       	sbi	0x08, 2	; 8
	rt_add_timer(&TCP_timer);
    3bdc:	81 ef       	ldi	r24, 0xF1	; 241
    3bde:	92 e0       	ldi	r25, 0x02	; 2
    3be0:	0e 94 d0 22 	call	0x45a0	; 0x45a0 <rt_add_timer>

	// run a close sequence on the panels to make sure they are all shut
	seq_loadsequence(panel_init, SEQ_SIZE(panel_init));
    3be4:	62 e0       	ldi	r22, 0x02	; 2
    3be6:	8c ec       	ldi	r24, 0xCC	; 204
    3be8:	96 e0       	ldi	r25, 0x06	; 6
    3bea:	0e 94 0c 29 	call	0x5218	; 0x5218 <seq_loadsequence>
	seq_startsequence();
    3bee:	0e 94 34 29 	call	0x5268	; 0x5268 <seq_startsequence>

#ifdef _MP3TRIGGER_
	// MP3 Trigger connects on suart2 on PC4 (MarcDuino v1) or PC1 (MarcDuino v2)
	suart2_init(9600);
    3bf2:	60 e8       	ldi	r22, 0x80	; 128
    3bf4:	75 e2       	ldi	r23, 0x25	; 37
    3bf6:	80 e0       	ldi	r24, 0x00	; 0
    3bf8:	90 e0       	ldi	r25, 0x00	; 0
    3bfa:	0e 94 6f 32 	call	0x64de	; 0x64de <suart2_init>
    3bfe:	2f ef       	ldi	r18, 0xFF	; 255
    3c00:	3b e7       	ldi	r19, 0x7B	; 123
    3c02:	42 e9       	ldi	r20, 0x92	; 146
    3c04:	21 50       	subi	r18, 0x01	; 1
    3c06:	30 40       	sbci	r19, 0x00	; 0
    3c08:	40 40       	sbci	r20, 0x00	; 0
    3c0a:	e1 f7       	brne	.-8      	; 0x3c04 <main+0x84>
    3c0c:	00 c0       	rjmp	.+0      	; 0x3c0e <main+0x8e>
    3c0e:	00 00       	nop
	// Initialize the MP3Trigger sound driver
	_delay_ms(3000);	// need to wait for MP3 to power up
	// The mp3_init will also trigger the startup sound
	mp3_init();
    3c10:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <mp3_init>
    3c14:	8a ea       	ldi	r24, 0xAA	; 170
    3c16:	96 ee       	ldi	r25, 0xE6	; 230
    3c18:	e6 e9       	ldi	r30, 0x96	; 150
    3c1a:	f1 e0       	ldi	r31, 0x01	; 1
    3c1c:	81 50       	subi	r24, 0x01	; 1
    3c1e:	90 40       	sbci	r25, 0x00	; 0
    3c20:	e0 40       	sbci	r30, 0x00	; 0
    3c22:	f0 40       	sbci	r31, 0x00	; 0
    3c24:	d9 f7       	brne	.-10     	; 0x3c1c <main+0x9c>
    3c26:	00 00       	nop
	// wait for the startup sound to finish and start the random sound sequence
	_delay_ms(10000);
	mp3_start_random();
    3c28:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <mp3_start_random>
#endif

	// ready
	serial_puts_p(strEnterPrompt);
    3c2c:	87 e4       	ldi	r24, 0x47	; 71
    3c2e:	94 e0       	ldi	r25, 0x04	; 4
    3c30:	0e 94 d0 2b 	call	0x57a0	; 0x57a0 <serial_puts_p>
	TCP_timer=TCP_TIMER_VALUE;
    3c34:	88 eb       	ldi	r24, 0xB8	; 184
    3c36:	9b e0       	ldi	r25, 0x0B	; 11
    3c38:	90 93 f2 02 	sts	0x02F2, r25
    3c3c:	80 93 f1 02 	sts	0x02F1, r24

	// check for command line input
	if(serial_available())
	{
		//### experimental, reset TCP timeout timer
		TCP_timer=TCP_TIMER_VALUE;
    3c40:	58 eb       	ldi	r21, 0xB8	; 184
    3c42:	c5 2e       	mov	r12, r21
    3c44:	5b e0       	ldi	r21, 0x0B	; 11
    3c46:	d5 2e       	mov	r13, r21
			{
				// servo was not silenced yet
				if(panel_to_silence[i-1]==0 && servo_read(i)!=_NP)
				{
					servo_set(i, _CLS); 			// close servo
					killbuzz_timer=COUNT_PER_SECOND/3;	// wait 1/3 s for it to close
    3c48:	61 e2       	ldi	r22, 0x21	; 33
    3c4a:	a6 2e       	mov	r10, r22
    3c4c:	b1 2c       	mov	r11, r1
	////////////////////////////////////////
	char command_str[CMD_MAX_LENGTH];
	bool command_available;

	// check for command line input
	if(serial_available())
    3c4e:	0e 94 58 2b 	call	0x56b0	; 0x56b0 <serial_available>
    3c52:	81 11       	cpse	r24, r1
    3c54:	80 c0       	rjmp	.+256    	; 0x3d56 <main+0x1d6>
	////////////////////////////////////////
	// MP3 Trigger Random Sounds
	///////////////////////////////////////
#ifdef _MP3TRIGGER_
	// need to call this in main loop for random sounds to work
	mp3_do_random();
    3c56:	0e 94 56 0f 	call	0x1eac	; 0x1eac <mp3_do_random>
#endif

	/////////////////////////////////////////
	// RC Control of Panels
	////////////////////////////////////////
	int16_t servovalue= servo_RCread();
    3c5a:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <servo_RCread>
    3c5e:	8c 01       	movw	r16, r24
    3c60:	87 3c       	cpi	r24, 0xC7	; 199
    3c62:	27 e0       	ldi	r18, 0x07	; 7
    3c64:	92 07       	cpc	r25, r18
    3c66:	0c f4       	brge	.+2      	; 0x3c6a <main+0xea>
    3c68:	96 c0       	rjmp	.+300    	; 0x3d96 <main+0x216>
    3c6a:	4b e9       	ldi	r20, 0x9B	; 155
    3c6c:	e4 2e       	mov	r14, r20
    3c6e:	42 e0       	ldi	r20, 0x02	; 2
    3c70:	f4 2e       	mov	r15, r20
    3c72:	07 ea       	ldi	r16, 0xA7	; 167
    3c74:	12 e0       	ldi	r17, 0x02	; 2
	uint8_t i;
	for(i=1; i<=SERVO_NUM; i++)
    3c76:	21 e0       	ldi	r18, 0x01	; 1
    3c78:	05 c0       	rjmp	.+10     	; 0x3c84 <main+0x104>
    3c7a:	2f 5f       	subi	r18, 0xFF	; 255
    3c7c:	0f 5f       	subi	r16, 0xFF	; 255
    3c7e:	1f 4f       	sbci	r17, 0xFF	; 255
    3c80:	2b 30       	cpi	r18, 0x0B	; 11
    3c82:	69 f1       	breq	.+90     	; 0x3cde <main+0x15e>
	{
		if(panel_rc_control[i-1]==1)
    3c84:	f7 01       	movw	r30, r14
    3c86:	31 91       	ld	r19, Z+
    3c88:	7f 01       	movw	r14, r30
    3c8a:	31 30       	cpi	r19, 0x01	; 1
    3c8c:	b1 f7       	brne	.-20     	; 0x3c7a <main+0xfa>
		{
			//automatically kill servo buzz by turning off servo if door is almost closed
			if(servovalue > _CLS -10)
			{
				// servo was not silenced yet
				if(panel_to_silence[i-1]==0 && servo_read(i)!=_NP)
    3c8e:	f8 01       	movw	r30, r16
    3c90:	80 81       	ld	r24, Z
    3c92:	81 11       	cpse	r24, r1
    3c94:	f2 cf       	rjmp	.-28     	; 0x3c7a <main+0xfa>
    3c96:	82 2f       	mov	r24, r18
    3c98:	22 96       	adiw	r28, 0x02	; 2
    3c9a:	2f af       	std	Y+63, r18	; 0x3f
    3c9c:	22 97       	sbiw	r28, 0x02	; 2
    3c9e:	23 96       	adiw	r28, 0x03	; 3
    3ca0:	3f af       	std	Y+63, r19	; 0x3f
    3ca2:	23 97       	sbiw	r28, 0x03	; 3
    3ca4:	0e 94 5f 2e 	call	0x5cbe	; 0x5cbe <servo_read>
    3ca8:	22 96       	adiw	r28, 0x02	; 2
    3caa:	2f ad       	ldd	r18, Y+63	; 0x3f
    3cac:	22 97       	sbiw	r28, 0x02	; 2
    3cae:	01 96       	adiw	r24, 0x01	; 1
    3cb0:	21 f3       	breq	.-56     	; 0x3c7a <main+0xfa>
				{
					servo_set(i, _CLS); 			// close servo
    3cb2:	60 ed       	ldi	r22, 0xD0	; 208
    3cb4:	77 e0       	ldi	r23, 0x07	; 7
    3cb6:	82 2f       	mov	r24, r18
    3cb8:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <servo_set>
					killbuzz_timer=COUNT_PER_SECOND/3;	// wait 1/3 s for it to close
    3cbc:	b0 92 a6 02 	sts	0x02A6, r11
    3cc0:	a0 92 a5 02 	sts	0x02A5, r10
					panel_to_silence[i-1]=1;		// then silence it
    3cc4:	23 96       	adiw	r28, 0x03	; 3
    3cc6:	3f ad       	ldd	r19, Y+63	; 0x3f
    3cc8:	23 97       	sbiw	r28, 0x03	; 3
    3cca:	f8 01       	movw	r30, r16
    3ccc:	30 83       	st	Z, r19
    3cce:	22 96       	adiw	r28, 0x02	; 2
    3cd0:	2f ad       	ldd	r18, Y+63	; 0x3f
    3cd2:	22 97       	sbiw	r28, 0x02	; 2
	/////////////////////////////////////////
	// RC Control of Panels
	////////////////////////////////////////
	int16_t servovalue= servo_RCread();
	uint8_t i;
	for(i=1; i<=SERVO_NUM; i++)
    3cd4:	2f 5f       	subi	r18, 0xFF	; 255
    3cd6:	0f 5f       	subi	r16, 0xFF	; 255
    3cd8:	1f 4f       	sbci	r17, 0xFF	; 255
    3cda:	2b 30       	cpi	r18, 0x0B	; 11
    3cdc:	99 f6       	brne	.-90     	; 0x3c84 <main+0x104>
			}
		}
	}

	// kill servo buzz if panel have been marked as just closed and the timeout period has expired
	if(killbuzz_timer==0)
    3cde:	80 91 a5 02 	lds	r24, 0x02A5
    3ce2:	90 91 a6 02 	lds	r25, 0x02A6
    3ce6:	89 2b       	or	r24, r25
    3ce8:	09 f0       	breq	.+2      	; 0x3cec <main+0x16c>
    3cea:	b1 cf       	rjmp	.-158    	; 0x3c4e <main+0xce>
	{
		for(int i=1; i<=SERVO_NUM; i++)
		{
			if(panel_to_silence[i-1])
    3cec:	80 91 a7 02 	lds	r24, 0x02A7
    3cf0:	81 11       	cpse	r24, r1
    3cf2:	fc c0       	rjmp	.+504    	; 0x3eec <main+0x36c>
    3cf4:	80 91 a8 02 	lds	r24, 0x02A8
    3cf8:	81 11       	cpse	r24, r1
    3cfa:	a8 c0       	rjmp	.+336    	; 0x3e4c <main+0x2cc>
    3cfc:	80 91 a9 02 	lds	r24, 0x02A9
    3d00:	81 11       	cpse	r24, r1
    3d02:	b0 c0       	rjmp	.+352    	; 0x3e64 <main+0x2e4>
    3d04:	80 91 aa 02 	lds	r24, 0x02AA
    3d08:	81 11       	cpse	r24, r1
    3d0a:	b8 c0       	rjmp	.+368    	; 0x3e7c <main+0x2fc>
    3d0c:	80 91 ab 02 	lds	r24, 0x02AB
    3d10:	81 11       	cpse	r24, r1
    3d12:	c0 c0       	rjmp	.+384    	; 0x3e94 <main+0x314>
    3d14:	80 91 ac 02 	lds	r24, 0x02AC
    3d18:	81 11       	cpse	r24, r1
    3d1a:	c8 c0       	rjmp	.+400    	; 0x3eac <main+0x32c>
    3d1c:	80 91 ad 02 	lds	r24, 0x02AD
    3d20:	81 11       	cpse	r24, r1
    3d22:	d0 c0       	rjmp	.+416    	; 0x3ec4 <main+0x344>
    3d24:	80 91 ae 02 	lds	r24, 0x02AE
    3d28:	81 11       	cpse	r24, r1
    3d2a:	d8 c0       	rjmp	.+432    	; 0x3edc <main+0x35c>
    3d2c:	80 91 af 02 	lds	r24, 0x02AF
    3d30:	81 11       	cpse	r24, r1
    3d32:	84 c0       	rjmp	.+264    	; 0x3e3c <main+0x2bc>
    3d34:	80 91 b0 02 	lds	r24, 0x02B0
    3d38:	88 23       	and	r24, r24
    3d3a:	09 f4       	brne	.+2      	; 0x3d3e <main+0x1be>
    3d3c:	88 cf       	rjmp	.-240    	; 0x3c4e <main+0xce>
			{
				servo_set(i,_NP);
    3d3e:	6f ef       	ldi	r22, 0xFF	; 255
    3d40:	7f ef       	ldi	r23, 0xFF	; 255
    3d42:	8a e0       	ldi	r24, 0x0A	; 10
    3d44:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <servo_set>
				panel_to_silence[i-1]=0;
    3d48:	10 92 b0 02 	sts	0x02B0, r1
	////////////////////////////////////////
	char command_str[CMD_MAX_LENGTH];
	bool command_available;

	// check for command line input
	if(serial_available())
    3d4c:	0e 94 58 2b 	call	0x56b0	; 0x56b0 <serial_available>
    3d50:	88 23       	and	r24, r24
    3d52:	09 f4       	brne	.+2      	; 0x3d56 <main+0x1d6>
    3d54:	80 cf       	rjmp	.-256    	; 0x3c56 <main+0xd6>
	{
		//### experimental, reset TCP timeout timer
		TCP_timer=TCP_TIMER_VALUE;
    3d56:	d0 92 f2 02 	sts	0x02F2, r13
    3d5a:	c0 92 f1 02 	sts	0x02F1, r12

		char ch;
		ch=serial_getc();										// get input
    3d5e:	0e 94 67 2b 	call	0x56ce	; 0x56ce <serial_getc>
    3d62:	18 2f       	mov	r17, r24

// utility to echo characters back cleanly
void echo(char ch)
{
	// echo return and line feeds nicely on a terminal
	if(ch=='\r' || ch=='\n' || ch == 0x0D )
    3d64:	8d 30       	cpi	r24, 0x0D	; 13
    3d66:	09 f4       	brne	.+2      	; 0x3d6a <main+0x1ea>
    3d68:	4d c0       	rjmp	.+154    	; 0x3e04 <main+0x284>
    3d6a:	8a 30       	cpi	r24, 0x0A	; 10
    3d6c:	09 f4       	brne	.+2      	; 0x3d70 <main+0x1f0>
    3d6e:	4a c0       	rjmp	.+148    	; 0x3e04 <main+0x284>
	{
		serial_putc('\n');
		serial_putc('\r');
	}
	else serial_putc(ch);
    3d70:	0e 94 4d 2b 	call	0x569a	; 0x569a <serial_putc>
// builds the command string from the character input
uint8_t build_command(char ch, char* output_str)
{
	static uint8_t pos=0;

	switch(ch)
    3d74:	1d 30       	cpi	r17, 0x0D	; 13
    3d76:	09 f4       	brne	.+2      	; 0x3d7a <main+0x1fa>
    3d78:	4e c0       	rjmp	.+156    	; 0x3e16 <main+0x296>
			strcpy(output_str, (char*)command_buffer);	// copy result
			return TRUE;								// return and signal command ready
			break;

		default:										// regular character
			command_buffer[pos]=ch;						// append the  character to the command string
    3d7a:	80 91 54 02 	lds	r24, 0x0254
    3d7e:	e8 2f       	mov	r30, r24
    3d80:	f0 e0       	ldi	r31, 0x00	; 0
    3d82:	ef 54       	subi	r30, 0x4F	; 79
    3d84:	fd 4f       	sbci	r31, 0xFD	; 253
    3d86:	10 83       	st	Z, r17
			if(pos<=CMD_MAX_LENGTH-1)pos++;				// too many characters, discard them.
    3d88:	80 34       	cpi	r24, 0x40	; 64
    3d8a:	08 f0       	brcs	.+2      	; 0x3d8e <main+0x20e>
    3d8c:	64 cf       	rjmp	.-312    	; 0x3c56 <main+0xd6>
    3d8e:	8f 5f       	subi	r24, 0xFF	; 255
    3d90:	80 93 54 02 	sts	0x0254, r24
    3d94:	60 cf       	rjmp	.-320    	; 0x3c56 <main+0xd6>
	////////////////////////////////////////
	int16_t servovalue= servo_RCread();
	uint8_t i;
	for(i=1; i<=SERVO_NUM; i++)
	{
		if(panel_rc_control[i-1]==1)
    3d96:	80 91 9b 02 	lds	r24, 0x029B
    3d9a:	81 30       	cpi	r24, 0x01	; 1
    3d9c:	09 f4       	brne	.+2      	; 0x3da0 <main+0x220>
    3d9e:	ee c0       	rjmp	.+476    	; 0x3f7c <main+0x3fc>
    3da0:	80 91 9c 02 	lds	r24, 0x029C
    3da4:	81 30       	cpi	r24, 0x01	; 1
    3da6:	09 f4       	brne	.+2      	; 0x3daa <main+0x22a>
    3da8:	ae c0       	rjmp	.+348    	; 0x3f06 <main+0x386>
    3daa:	80 91 9d 02 	lds	r24, 0x029D
    3dae:	81 30       	cpi	r24, 0x01	; 1
    3db0:	09 f4       	brne	.+2      	; 0x3db4 <main+0x234>
    3db2:	b2 c0       	rjmp	.+356    	; 0x3f18 <main+0x398>
    3db4:	80 91 9e 02 	lds	r24, 0x029E
    3db8:	81 30       	cpi	r24, 0x01	; 1
    3dba:	09 f4       	brne	.+2      	; 0x3dbe <main+0x23e>
    3dbc:	b6 c0       	rjmp	.+364    	; 0x3f2a <main+0x3aa>
    3dbe:	80 91 9f 02 	lds	r24, 0x029F
    3dc2:	81 30       	cpi	r24, 0x01	; 1
    3dc4:	09 f4       	brne	.+2      	; 0x3dc8 <main+0x248>
    3dc6:	ba c0       	rjmp	.+372    	; 0x3f3c <main+0x3bc>
    3dc8:	80 91 a0 02 	lds	r24, 0x02A0
    3dcc:	81 30       	cpi	r24, 0x01	; 1
    3dce:	09 f4       	brne	.+2      	; 0x3dd2 <main+0x252>
    3dd0:	be c0       	rjmp	.+380    	; 0x3f4e <main+0x3ce>
    3dd2:	80 91 a1 02 	lds	r24, 0x02A1
    3dd6:	81 30       	cpi	r24, 0x01	; 1
    3dd8:	09 f4       	brne	.+2      	; 0x3ddc <main+0x25c>
    3dda:	c2 c0       	rjmp	.+388    	; 0x3f60 <main+0x3e0>
    3ddc:	80 91 a2 02 	lds	r24, 0x02A2
    3de0:	81 30       	cpi	r24, 0x01	; 1
    3de2:	09 f4       	brne	.+2      	; 0x3de6 <main+0x266>
    3de4:	c6 c0       	rjmp	.+396    	; 0x3f72 <main+0x3f2>
    3de6:	80 91 a3 02 	lds	r24, 0x02A3
    3dea:	81 30       	cpi	r24, 0x01	; 1
    3dec:	09 f4       	brne	.+2      	; 0x3df0 <main+0x270>
    3dee:	86 c0       	rjmp	.+268    	; 0x3efc <main+0x37c>
    3df0:	80 91 a4 02 	lds	r24, 0x02A4
    3df4:	81 30       	cpi	r24, 0x01	; 1
    3df6:	09 f0       	breq	.+2      	; 0x3dfa <main+0x27a>
    3df8:	72 cf       	rjmp	.-284    	; 0x3cde <main+0x15e>
					panel_to_silence[i-1]=1;		// then silence it
				}
			}
			else
			{
				servo_set(i, servovalue);
    3dfa:	b8 01       	movw	r22, r16
    3dfc:	8a e0       	ldi	r24, 0x0A	; 10
    3dfe:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <servo_set>
    3e02:	6d cf       	rjmp	.-294    	; 0x3cde <main+0x15e>
void echo(char ch)
{
	// echo return and line feeds nicely on a terminal
	if(ch=='\r' || ch=='\n' || ch == 0x0D )
	{
		serial_putc('\n');
    3e04:	8a e0       	ldi	r24, 0x0A	; 10
    3e06:	0e 94 4d 2b 	call	0x569a	; 0x569a <serial_putc>
		serial_putc('\r');
    3e0a:	8d e0       	ldi	r24, 0x0D	; 13
    3e0c:	0e 94 4d 2b 	call	0x569a	; 0x569a <serial_putc>
// builds the command string from the character input
uint8_t build_command(char ch, char* output_str)
{
	static uint8_t pos=0;

	switch(ch)
    3e10:	1d 30       	cpi	r17, 0x0D	; 13
    3e12:	09 f0       	breq	.+2      	; 0x3e16 <main+0x296>
    3e14:	b2 cf       	rjmp	.-156    	; 0x3d7a <main+0x1fa>
	{
		case CMD_END_CHAR:								// end character recognized
			command_buffer[pos]='\0';					// append the end of string character
    3e16:	e0 91 54 02 	lds	r30, 0x0254
    3e1a:	f0 e0       	ldi	r31, 0x00	; 0
    3e1c:	ef 54       	subi	r30, 0x4F	; 79
    3e1e:	fd 4f       	sbci	r31, 0xFD	; 253
    3e20:	10 82       	st	Z, r1
			pos=0;										// reset buffer pointer
    3e22:	10 92 54 02 	sts	0x0254, r1
			strcpy(output_str, (char*)command_buffer);	// copy result
    3e26:	61 eb       	ldi	r22, 0xB1	; 177
    3e28:	72 e0       	ldi	r23, 0x02	; 2
    3e2a:	ce 01       	movw	r24, r28
    3e2c:	01 96       	adiw	r24, 0x01	; 1
    3e2e:	0e 94 4e 36 	call	0x6c9c	; 0x6c9c <strcpy>

		char ch;
		ch=serial_getc();										// get input
		echo(ch);												// echo back
		command_available=build_command(ch, command_str);		// build command line
		if (command_available) dispatch_command(command_str);	// send command line to dispatcher
    3e32:	ce 01       	movw	r24, r28
    3e34:	01 96       	adiw	r24, 0x01	; 1
    3e36:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <dispatch_command>
    3e3a:	0d cf       	rjmp	.-486    	; 0x3c56 <main+0xd6>
	{
		for(int i=1; i<=SERVO_NUM; i++)
		{
			if(panel_to_silence[i-1])
			{
				servo_set(i,_NP);
    3e3c:	6f ef       	ldi	r22, 0xFF	; 255
    3e3e:	7f ef       	ldi	r23, 0xFF	; 255
    3e40:	89 e0       	ldi	r24, 0x09	; 9
    3e42:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <servo_set>
				panel_to_silence[i-1]=0;
    3e46:	10 92 af 02 	sts	0x02AF, r1
    3e4a:	74 cf       	rjmp	.-280    	; 0x3d34 <main+0x1b4>
	{
		for(int i=1; i<=SERVO_NUM; i++)
		{
			if(panel_to_silence[i-1])
			{
				servo_set(i,_NP);
    3e4c:	6f ef       	ldi	r22, 0xFF	; 255
    3e4e:	7f ef       	ldi	r23, 0xFF	; 255
    3e50:	82 e0       	ldi	r24, 0x02	; 2
    3e52:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <servo_set>
				panel_to_silence[i-1]=0;
    3e56:	10 92 a8 02 	sts	0x02A8, r1
	// kill servo buzz if panel have been marked as just closed and the timeout period has expired
	if(killbuzz_timer==0)
	{
		for(int i=1; i<=SERVO_NUM; i++)
		{
			if(panel_to_silence[i-1])
    3e5a:	80 91 a9 02 	lds	r24, 0x02A9
    3e5e:	88 23       	and	r24, r24
    3e60:	09 f4       	brne	.+2      	; 0x3e64 <main+0x2e4>
    3e62:	50 cf       	rjmp	.-352    	; 0x3d04 <main+0x184>
			{
				servo_set(i,_NP);
    3e64:	6f ef       	ldi	r22, 0xFF	; 255
    3e66:	7f ef       	ldi	r23, 0xFF	; 255
    3e68:	83 e0       	ldi	r24, 0x03	; 3
    3e6a:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <servo_set>
				panel_to_silence[i-1]=0;
    3e6e:	10 92 a9 02 	sts	0x02A9, r1
	// kill servo buzz if panel have been marked as just closed and the timeout period has expired
	if(killbuzz_timer==0)
	{
		for(int i=1; i<=SERVO_NUM; i++)
		{
			if(panel_to_silence[i-1])
    3e72:	80 91 aa 02 	lds	r24, 0x02AA
    3e76:	88 23       	and	r24, r24
    3e78:	09 f4       	brne	.+2      	; 0x3e7c <main+0x2fc>
    3e7a:	48 cf       	rjmp	.-368    	; 0x3d0c <main+0x18c>
			{
				servo_set(i,_NP);
    3e7c:	6f ef       	ldi	r22, 0xFF	; 255
    3e7e:	7f ef       	ldi	r23, 0xFF	; 255
    3e80:	84 e0       	ldi	r24, 0x04	; 4
    3e82:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <servo_set>
				panel_to_silence[i-1]=0;
    3e86:	10 92 aa 02 	sts	0x02AA, r1
	// kill servo buzz if panel have been marked as just closed and the timeout period has expired
	if(killbuzz_timer==0)
	{
		for(int i=1; i<=SERVO_NUM; i++)
		{
			if(panel_to_silence[i-1])
    3e8a:	80 91 ab 02 	lds	r24, 0x02AB
    3e8e:	88 23       	and	r24, r24
    3e90:	09 f4       	brne	.+2      	; 0x3e94 <main+0x314>
    3e92:	40 cf       	rjmp	.-384    	; 0x3d14 <main+0x194>
			{
				servo_set(i,_NP);
    3e94:	6f ef       	ldi	r22, 0xFF	; 255
    3e96:	7f ef       	ldi	r23, 0xFF	; 255
    3e98:	85 e0       	ldi	r24, 0x05	; 5
    3e9a:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <servo_set>
				panel_to_silence[i-1]=0;
    3e9e:	10 92 ab 02 	sts	0x02AB, r1
	// kill servo buzz if panel have been marked as just closed and the timeout period has expired
	if(killbuzz_timer==0)
	{
		for(int i=1; i<=SERVO_NUM; i++)
		{
			if(panel_to_silence[i-1])
    3ea2:	80 91 ac 02 	lds	r24, 0x02AC
    3ea6:	88 23       	and	r24, r24
    3ea8:	09 f4       	brne	.+2      	; 0x3eac <main+0x32c>
    3eaa:	38 cf       	rjmp	.-400    	; 0x3d1c <main+0x19c>
			{
				servo_set(i,_NP);
    3eac:	6f ef       	ldi	r22, 0xFF	; 255
    3eae:	7f ef       	ldi	r23, 0xFF	; 255
    3eb0:	86 e0       	ldi	r24, 0x06	; 6
    3eb2:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <servo_set>
				panel_to_silence[i-1]=0;
    3eb6:	10 92 ac 02 	sts	0x02AC, r1
	// kill servo buzz if panel have been marked as just closed and the timeout period has expired
	if(killbuzz_timer==0)
	{
		for(int i=1; i<=SERVO_NUM; i++)
		{
			if(panel_to_silence[i-1])
    3eba:	80 91 ad 02 	lds	r24, 0x02AD
    3ebe:	88 23       	and	r24, r24
    3ec0:	09 f4       	brne	.+2      	; 0x3ec4 <main+0x344>
    3ec2:	30 cf       	rjmp	.-416    	; 0x3d24 <main+0x1a4>
			{
				servo_set(i,_NP);
    3ec4:	6f ef       	ldi	r22, 0xFF	; 255
    3ec6:	7f ef       	ldi	r23, 0xFF	; 255
    3ec8:	87 e0       	ldi	r24, 0x07	; 7
    3eca:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <servo_set>
				panel_to_silence[i-1]=0;
    3ece:	10 92 ad 02 	sts	0x02AD, r1
	// kill servo buzz if panel have been marked as just closed and the timeout period has expired
	if(killbuzz_timer==0)
	{
		for(int i=1; i<=SERVO_NUM; i++)
		{
			if(panel_to_silence[i-1])
    3ed2:	80 91 ae 02 	lds	r24, 0x02AE
    3ed6:	88 23       	and	r24, r24
    3ed8:	09 f4       	brne	.+2      	; 0x3edc <main+0x35c>
    3eda:	28 cf       	rjmp	.-432    	; 0x3d2c <main+0x1ac>
			{
				servo_set(i,_NP);
    3edc:	6f ef       	ldi	r22, 0xFF	; 255
    3ede:	7f ef       	ldi	r23, 0xFF	; 255
    3ee0:	88 e0       	ldi	r24, 0x08	; 8
    3ee2:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <servo_set>
				panel_to_silence[i-1]=0;
    3ee6:	10 92 ae 02 	sts	0x02AE, r1
    3eea:	20 cf       	rjmp	.-448    	; 0x3d2c <main+0x1ac>
	{
		for(int i=1; i<=SERVO_NUM; i++)
		{
			if(panel_to_silence[i-1])
			{
				servo_set(i,_NP);
    3eec:	6f ef       	ldi	r22, 0xFF	; 255
    3eee:	7f ef       	ldi	r23, 0xFF	; 255
    3ef0:	81 e0       	ldi	r24, 0x01	; 1
    3ef2:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <servo_set>
				panel_to_silence[i-1]=0;
    3ef6:	10 92 a7 02 	sts	0x02A7, r1
    3efa:	fc ce       	rjmp	.-520    	; 0x3cf4 <main+0x174>
					panel_to_silence[i-1]=1;		// then silence it
				}
			}
			else
			{
				servo_set(i, servovalue);
    3efc:	b8 01       	movw	r22, r16
    3efe:	89 e0       	ldi	r24, 0x09	; 9
    3f00:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <servo_set>
    3f04:	75 cf       	rjmp	.-278    	; 0x3df0 <main+0x270>
    3f06:	b8 01       	movw	r22, r16
    3f08:	82 e0       	ldi	r24, 0x02	; 2
    3f0a:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <servo_set>
	////////////////////////////////////////
	int16_t servovalue= servo_RCread();
	uint8_t i;
	for(i=1; i<=SERVO_NUM; i++)
	{
		if(panel_rc_control[i-1]==1)
    3f0e:	80 91 9d 02 	lds	r24, 0x029D
    3f12:	81 30       	cpi	r24, 0x01	; 1
    3f14:	09 f0       	breq	.+2      	; 0x3f18 <main+0x398>
    3f16:	4e cf       	rjmp	.-356    	; 0x3db4 <main+0x234>
					panel_to_silence[i-1]=1;		// then silence it
				}
			}
			else
			{
				servo_set(i, servovalue);
    3f18:	b8 01       	movw	r22, r16
    3f1a:	83 e0       	ldi	r24, 0x03	; 3
    3f1c:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <servo_set>
	////////////////////////////////////////
	int16_t servovalue= servo_RCread();
	uint8_t i;
	for(i=1; i<=SERVO_NUM; i++)
	{
		if(panel_rc_control[i-1]==1)
    3f20:	80 91 9e 02 	lds	r24, 0x029E
    3f24:	81 30       	cpi	r24, 0x01	; 1
    3f26:	09 f0       	breq	.+2      	; 0x3f2a <main+0x3aa>
    3f28:	4a cf       	rjmp	.-364    	; 0x3dbe <main+0x23e>
					panel_to_silence[i-1]=1;		// then silence it
				}
			}
			else
			{
				servo_set(i, servovalue);
    3f2a:	b8 01       	movw	r22, r16
    3f2c:	84 e0       	ldi	r24, 0x04	; 4
    3f2e:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <servo_set>
	////////////////////////////////////////
	int16_t servovalue= servo_RCread();
	uint8_t i;
	for(i=1; i<=SERVO_NUM; i++)
	{
		if(panel_rc_control[i-1]==1)
    3f32:	80 91 9f 02 	lds	r24, 0x029F
    3f36:	81 30       	cpi	r24, 0x01	; 1
    3f38:	09 f0       	breq	.+2      	; 0x3f3c <main+0x3bc>
    3f3a:	46 cf       	rjmp	.-372    	; 0x3dc8 <main+0x248>
					panel_to_silence[i-1]=1;		// then silence it
				}
			}
			else
			{
				servo_set(i, servovalue);
    3f3c:	b8 01       	movw	r22, r16
    3f3e:	85 e0       	ldi	r24, 0x05	; 5
    3f40:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <servo_set>
	////////////////////////////////////////
	int16_t servovalue= servo_RCread();
	uint8_t i;
	for(i=1; i<=SERVO_NUM; i++)
	{
		if(panel_rc_control[i-1]==1)
    3f44:	80 91 a0 02 	lds	r24, 0x02A0
    3f48:	81 30       	cpi	r24, 0x01	; 1
    3f4a:	09 f0       	breq	.+2      	; 0x3f4e <main+0x3ce>
    3f4c:	42 cf       	rjmp	.-380    	; 0x3dd2 <main+0x252>
					panel_to_silence[i-1]=1;		// then silence it
				}
			}
			else
			{
				servo_set(i, servovalue);
    3f4e:	b8 01       	movw	r22, r16
    3f50:	86 e0       	ldi	r24, 0x06	; 6
    3f52:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <servo_set>
	////////////////////////////////////////
	int16_t servovalue= servo_RCread();
	uint8_t i;
	for(i=1; i<=SERVO_NUM; i++)
	{
		if(panel_rc_control[i-1]==1)
    3f56:	80 91 a1 02 	lds	r24, 0x02A1
    3f5a:	81 30       	cpi	r24, 0x01	; 1
    3f5c:	09 f0       	breq	.+2      	; 0x3f60 <main+0x3e0>
    3f5e:	3e cf       	rjmp	.-388    	; 0x3ddc <main+0x25c>
					panel_to_silence[i-1]=1;		// then silence it
				}
			}
			else
			{
				servo_set(i, servovalue);
    3f60:	b8 01       	movw	r22, r16
    3f62:	87 e0       	ldi	r24, 0x07	; 7
    3f64:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <servo_set>
	////////////////////////////////////////
	int16_t servovalue= servo_RCread();
	uint8_t i;
	for(i=1; i<=SERVO_NUM; i++)
	{
		if(panel_rc_control[i-1]==1)
    3f68:	80 91 a2 02 	lds	r24, 0x02A2
    3f6c:	81 30       	cpi	r24, 0x01	; 1
    3f6e:	09 f0       	breq	.+2      	; 0x3f72 <main+0x3f2>
    3f70:	3a cf       	rjmp	.-396    	; 0x3de6 <main+0x266>
					panel_to_silence[i-1]=1;		// then silence it
				}
			}
			else
			{
				servo_set(i, servovalue);
    3f72:	b8 01       	movw	r22, r16
    3f74:	88 e0       	ldi	r24, 0x08	; 8
    3f76:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <servo_set>
    3f7a:	35 cf       	rjmp	.-406    	; 0x3de6 <main+0x266>
    3f7c:	b8 01       	movw	r22, r16
    3f7e:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <servo_set>
    3f82:	0e cf       	rjmp	.-484    	; 0x3da0 <main+0x220>

00003f84 <open_command>:




void open_command(uint8_t value)
{
    3f84:	cf 93       	push	r28
	uint8_t i;
	if(value==0) // open all
    3f86:	81 11       	cpse	r24, r1
    3f88:	0b c0       	rjmp	.+22     	; 0x3fa0 <open_command+0x1c>
    3f8a:	c1 e0       	ldi	r28, 0x01	; 1
	{
		for (i=1; i<=SERVO_NUM; i++)
		{
			servo_set(i, _OPN);
    3f8c:	68 ee       	ldi	r22, 0xE8	; 232
    3f8e:	73 e0       	ldi	r23, 0x03	; 3
    3f90:	8c 2f       	mov	r24, r28
    3f92:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <servo_set>
void open_command(uint8_t value)
{
	uint8_t i;
	if(value==0) // open all
	{
		for (i=1; i<=SERVO_NUM; i++)
    3f96:	cf 5f       	subi	r28, 0xFF	; 255
    3f98:	cb 30       	cpi	r28, 0x0B	; 11
    3f9a:	c1 f7       	brne	.-16     	; 0x3f8c <open_command+0x8>
		{
			servo_set(i, _OPN);
		}
		return;
	}
}
    3f9c:	cf 91       	pop	r28
    3f9e:	08 95       	ret
		{
			servo_set(i, _OPN);
		}
		return;
	}
	if(value<=SERVO_NUM) // open specific panel
    3fa0:	8b 30       	cpi	r24, 0x0B	; 11
    3fa2:	78 f0       	brcs	.+30     	; 0x3fc2 <open_command+0x3e>
	{
		servo_set(value, _OPN);
		return;
	}
	if(value==11) // open top panels
    3fa4:	8b 30       	cpi	r24, 0x0B	; 11
    3fa6:	91 f0       	breq	.+36     	; 0x3fcc <open_command+0x48>
		{
			servo_set(i, _OPN);
		}
		return;
	}
	if(value==12) // open bottom panels
    3fa8:	8c 30       	cpi	r24, 0x0C	; 12
    3faa:	c1 f7       	brne	.-16     	; 0x3f9c <open_command+0x18>
    3fac:	c1 e0       	ldi	r28, 0x01	; 1
	{
		for (i=1; i<=6; i++)
		{
			servo_set(i, _OPN);
    3fae:	68 ee       	ldi	r22, 0xE8	; 232
    3fb0:	73 e0       	ldi	r23, 0x03	; 3
    3fb2:	8c 2f       	mov	r24, r28
    3fb4:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <servo_set>
		}
		return;
	}
	if(value==12) // open bottom panels
	{
		for (i=1; i<=6; i++)
    3fb8:	cf 5f       	subi	r28, 0xFF	; 255
    3fba:	c7 30       	cpi	r28, 0x07	; 7
    3fbc:	c1 f7       	brne	.-16     	; 0x3fae <open_command+0x2a>
		{
			servo_set(i, _OPN);
		}
		return;
	}
}
    3fbe:	cf 91       	pop	r28
    3fc0:	08 95       	ret
		}
		return;
	}
	if(value<=SERVO_NUM) // open specific panel
	{
		servo_set(value, _OPN);
    3fc2:	68 ee       	ldi	r22, 0xE8	; 232
    3fc4:	73 e0       	ldi	r23, 0x03	; 3
		{
			servo_set(i, _OPN);
		}
		return;
	}
}
    3fc6:	cf 91       	pop	r28
		}
		return;
	}
	if(value<=SERVO_NUM) // open specific panel
	{
		servo_set(value, _OPN);
    3fc8:	0c 94 35 2e 	jmp	0x5c6a	; 0x5c6a <servo_set>
		return;
	}
	if(value==11) // open top panels
    3fcc:	c7 e0       	ldi	r28, 0x07	; 7
	{
		for (i=7; i<=SERVO_NUM; i++)
		{
			servo_set(i, _OPN);
    3fce:	68 ee       	ldi	r22, 0xE8	; 232
    3fd0:	73 e0       	ldi	r23, 0x03	; 3
    3fd2:	8c 2f       	mov	r24, r28
    3fd4:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <servo_set>
		servo_set(value, _OPN);
		return;
	}
	if(value==11) // open top panels
	{
		for (i=7; i<=SERVO_NUM; i++)
    3fd8:	cf 5f       	subi	r28, 0xFF	; 255
    3fda:	cb 30       	cpi	r28, 0x0B	; 11
    3fdc:	c1 f7       	brne	.-16     	; 0x3fce <open_command+0x4a>
		{
			servo_set(i, _OPN);
		}
		return;
	}
}
    3fde:	cf 91       	pop	r28
    3fe0:	08 95       	ret

00003fe2 <close_command>:

void close_command(uint8_t value)
{
    3fe2:	cf 93       	push	r28
    3fe4:	df 93       	push	r29
	if(value==0)
    3fe6:	81 11       	cpse	r24, r1
    3fe8:	16 c0       	rjmp	.+44     	; 0x4016 <close_command+0x34>
    3fea:	8a e0       	ldi	r24, 0x0A	; 10
    3fec:	eb e9       	ldi	r30, 0x9B	; 155
    3fee:	f2 e0       	ldi	r31, 0x02	; 2
    3ff0:	df 01       	movw	r26, r30
    3ff2:	1d 92       	st	X+, r1
    3ff4:	8a 95       	dec	r24
    3ff6:	e9 f7       	brne	.-6      	; 0x3ff2 <close_command+0x10>
		{
			panel_rc_control[i-1]=0;
		}

		//sequence to close all panels, turn them off slowly
		seq_stopsequence(); // abort any previous sequence immediately
    3ff8:	0e 94 3e 29 	call	0x527c	; 0x527c <seq_stopsequence>
		seq_loadspeed(panel_slow_speed);
    3ffc:	8d e1       	ldi	r24, 0x1D	; 29
    3ffe:	91 e0       	ldi	r25, 0x01	; 1
    4000:	0e 94 c6 28 	call	0x518c	; 0x518c <seq_loadspeed>
		seq_loadsequence(panel_init, SEQ_SIZE(panel_init));
    4004:	62 e0       	ldi	r22, 0x02	; 2
    4006:	8c ec       	ldi	r24, 0xCC	; 204
    4008:	96 e0       	ldi	r25, 0x06	; 6
    400a:	0e 94 0c 29 	call	0x5218	; 0x5218 <seq_loadsequence>
		// Give time for the panel to close, then shut it off for buzz control
		killbuzz_timer=COUNT_PER_SECOND/3; // set a 1/3s timer
		panel_to_silence[value-1]=1;	// flag the panel to silence, will be caught in main loop
		return;							// return immediately without blocking
	}
}
    400e:	df 91       	pop	r29
    4010:	cf 91       	pop	r28

		//sequence to close all panels, turn them off slowly
		seq_stopsequence(); // abort any previous sequence immediately
		seq_loadspeed(panel_slow_speed);
		seq_loadsequence(panel_init, SEQ_SIZE(panel_init));
		seq_startsequence();
    4012:	0c 94 34 29 	jmp	0x5268	; 0x5268 <seq_startsequence>
		return;
	}
	if(value<=SERVO_NUM)
    4016:	8b 30       	cpi	r24, 0x0B	; 11
    4018:	18 f0       	brcs	.+6      	; 0x4020 <close_command+0x3e>
		// Give time for the panel to close, then shut it off for buzz control
		killbuzz_timer=COUNT_PER_SECOND/3; // set a 1/3s timer
		panel_to_silence[value-1]=1;	// flag the panel to silence, will be caught in main loop
		return;							// return immediately without blocking
	}
}
    401a:	df 91       	pop	r29
    401c:	cf 91       	pop	r28
    401e:	08 95       	ret
		seq_startsequence();
		return;
	}
	if(value<=SERVO_NUM)
	{
		panel_rc_control[value-1]=0;	// turn off RC control which would re-open the panel
    4020:	c8 2f       	mov	r28, r24
    4022:	d0 e0       	ldi	r29, 0x00	; 0
    4024:	21 97       	sbiw	r28, 0x01	; 1
    4026:	fe 01       	movw	r30, r28
    4028:	e5 56       	subi	r30, 0x65	; 101
    402a:	fd 4f       	sbci	r31, 0xFD	; 253
    402c:	10 82       	st	Z, r1
		servo_set(value, _CLS);			// close the servo
    402e:	60 ed       	ldi	r22, 0xD0	; 208
    4030:	77 e0       	ldi	r23, 0x07	; 7
    4032:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <servo_set>

		// Give time for the panel to close, then shut it off for buzz control
		killbuzz_timer=COUNT_PER_SECOND/3; // set a 1/3s timer
    4036:	81 e2       	ldi	r24, 0x21	; 33
    4038:	90 e0       	ldi	r25, 0x00	; 0
    403a:	90 93 a6 02 	sts	0x02A6, r25
    403e:	80 93 a5 02 	sts	0x02A5, r24
		panel_to_silence[value-1]=1;	// flag the panel to silence, will be caught in main loop
    4042:	c9 55       	subi	r28, 0x59	; 89
    4044:	dd 4f       	sbci	r29, 0xFD	; 253
    4046:	81 e0       	ldi	r24, 0x01	; 1
    4048:	88 83       	st	Y, r24
		return;							// return immediately without blocking
	}
}
    404a:	df 91       	pop	r29
    404c:	cf 91       	pop	r28
    404e:	08 95       	ret

00004050 <rc_command>:

void rc_command(uint8_t value)
{
	uint8_t i;

	if(value>SERVO_NUM) return;
    4050:	8b 30       	cpi	r24, 0x0B	; 11
    4052:	80 f4       	brcc	.+32     	; 0x4074 <rc_command+0x24>

	if(value==0) // all on
    4054:	81 11       	cpse	r24, r1
    4056:	08 c0       	rjmp	.+16     	; 0x4068 <rc_command+0x18>
    4058:	4a e0       	ldi	r20, 0x0A	; 10
    405a:	50 e0       	ldi	r21, 0x00	; 0
    405c:	61 e0       	ldi	r22, 0x01	; 1
    405e:	70 e0       	ldi	r23, 0x00	; 0
    4060:	8b e9       	ldi	r24, 0x9B	; 155
    4062:	92 e0       	ldi	r25, 0x02	; 2
    4064:	0c 94 3e 36 	jmp	0x6c7c	; 0x6c7c <memset>
		}
		return;
	}

	// add the panel to RC controlled list
	panel_rc_control[value-1]=1;
    4068:	e8 2f       	mov	r30, r24
    406a:	f0 e0       	ldi	r31, 0x00	; 0
    406c:	e6 56       	subi	r30, 0x66	; 102
    406e:	fd 4f       	sbci	r31, 0xFD	; 253
    4070:	81 e0       	ldi	r24, 0x01	; 1
    4072:	80 83       	st	Z, r24
    4074:	08 95       	ret

00004076 <stop_command>:
}

void stop_command(uint8_t value)
{
    4076:	1f 93       	push	r17
    4078:	cf 93       	push	r28
    407a:	df 93       	push	r29
	// panel hold with buzz kill: remove from RC and stop servos

	uint8_t i;
	if(value>SERVO_NUM) return;
    407c:	8b 30       	cpi	r24, 0x0B	; 11
    407e:	70 f4       	brcc	.+28     	; 0x409c <stop_command+0x26>

	// all panels hold to last position and servo off
	if(value==0)
    4080:	81 11       	cpse	r24, r1
    4082:	10 c0       	rjmp	.+32     	; 0x40a4 <stop_command+0x2e>
    4084:	cb e9       	ldi	r28, 0x9B	; 155
    4086:	d2 e0       	ldi	r29, 0x02	; 2
    4088:	11 e0       	ldi	r17, 0x01	; 1
	{
		for(i=1; i<=SERVO_NUM; i++)
		 {
			 panel_rc_control[i-1]=0;
    408a:	19 92       	st	Y+, r1
			 servo_set(i,SERVO_NO_PULSE);
    408c:	6f ef       	ldi	r22, 0xFF	; 255
    408e:	7f ef       	ldi	r23, 0xFF	; 255
    4090:	81 2f       	mov	r24, r17
    4092:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <servo_set>
	if(value>SERVO_NUM) return;

	// all panels hold to last position and servo off
	if(value==0)
	{
		for(i=1; i<=SERVO_NUM; i++)
    4096:	1f 5f       	subi	r17, 0xFF	; 255
    4098:	1b 30       	cpi	r17, 0x0B	; 11
    409a:	b9 f7       	brne	.-18     	; 0x408a <stop_command+0x14>
	}

	// remove just one panel to RC controlled list and turn it off
	panel_rc_control[value-1]=0;
	servo_set(value,SERVO_NO_PULSE);
}
    409c:	df 91       	pop	r29
    409e:	cf 91       	pop	r28
    40a0:	1f 91       	pop	r17
    40a2:	08 95       	ret
		 }
		return;
	}

	// remove just one panel to RC controlled list and turn it off
	panel_rc_control[value-1]=0;
    40a4:	e8 2f       	mov	r30, r24
    40a6:	f0 e0       	ldi	r31, 0x00	; 0
    40a8:	e6 56       	subi	r30, 0x66	; 102
    40aa:	fd 4f       	sbci	r31, 0xFD	; 253
    40ac:	10 82       	st	Z, r1
	servo_set(value,SERVO_NO_PULSE);
    40ae:	6f ef       	ldi	r22, 0xFF	; 255
    40b0:	7f ef       	ldi	r23, 0xFF	; 255
}
    40b2:	df 91       	pop	r29
    40b4:	cf 91       	pop	r28
    40b6:	1f 91       	pop	r17
		return;
	}

	// remove just one panel to RC controlled list and turn it off
	panel_rc_control[value-1]=0;
	servo_set(value,SERVO_NO_PULSE);
    40b8:	0c 94 35 2e 	jmp	0x5c6a	; 0x5c6a <servo_set>

000040bc <hold_command>:

void hold_command(uint8_t value)
{
	// hard hold to last position, leave servo on.
	uint8_t i;
	if(value>SERVO_NUM) return;
    40bc:	8b 30       	cpi	r24, 0x0B	; 11
    40be:	78 f4       	brcc	.+30     	; 0x40de <hold_command+0x22>

	// all servos off RC control
	if(value==0) // all off
    40c0:	81 11       	cpse	r24, r1
    40c2:	08 c0       	rjmp	.+16     	; 0x40d4 <hold_command+0x18>
    40c4:	8a e0       	ldi	r24, 0x0A	; 10
    40c6:	eb e9       	ldi	r30, 0x9B	; 155
    40c8:	f2 e0       	ldi	r31, 0x02	; 2
    40ca:	df 01       	movw	r26, r30
    40cc:	1d 92       	st	X+, r1
    40ce:	8a 95       	dec	r24
    40d0:	e9 f7       	brne	.-6      	; 0x40cc <hold_command+0x10>
    40d2:	08 95       	ret
		 }
		return;
	}

	// remove the panel to RC controlled list
	panel_rc_control[value-1]=0;
    40d4:	e8 2f       	mov	r30, r24
    40d6:	f0 e0       	ldi	r31, 0x00	; 0
    40d8:	e6 56       	subi	r30, 0x66	; 102
    40da:	fd 4f       	sbci	r31, 0xFD	; 253
    40dc:	10 82       	st	Z, r1
    40de:	08 95       	ret

000040e0 <init_jedi>:
}

// sets JEDI display and Holos in their default state
void init_jedi()
{
	seq_remove_completion_callback(); // remove any competing completion callback
    40e0:	0e 94 c1 28 	call	0x5182	; 0x5182 <seq_remove_completion_callback>
	suart_puts("*H000\r");	// quick way to turn off holos if connected to MarcDuino
    40e4:	8a e3       	ldi	r24, 0x3A	; 58
    40e6:	91 e0       	ldi	r25, 0x01	; 1
    40e8:	0e 94 2a 32 	call	0x6454	; 0x6454 <suart_puts>
    40ec:	2f ef       	ldi	r18, 0xFF	; 255
    40ee:	81 ee       	ldi	r24, 0xE1	; 225
    40f0:	94 e0       	ldi	r25, 0x04	; 4
    40f2:	21 50       	subi	r18, 0x01	; 1
    40f4:	80 40       	sbci	r24, 0x00	; 0
    40f6:	90 40       	sbci	r25, 0x00	; 0
    40f8:	e1 f7       	brne	.-8      	; 0x40f2 <init_jedi+0x12>
    40fa:	00 c0       	rjmp	.+0      	; 0x40fc <init_jedi+0x1c>
    40fc:	00 00       	nop
	_delay_ms(100);
	suart_puts("@0T1\r");	// abort test routine, reset all to normal
    40fe:	81 e4       	ldi	r24, 0x41	; 65
    4100:	91 e0       	ldi	r25, 0x01	; 1
    4102:	0e 94 2a 32 	call	0x6454	; 0x6454 <suart_puts>
    4106:	2f ef       	ldi	r18, 0xFF	; 255
    4108:	89 ef       	ldi	r24, 0xF9	; 249
    410a:	90 e0       	ldi	r25, 0x00	; 0
    410c:	21 50       	subi	r18, 0x01	; 1
    410e:	80 40       	sbci	r24, 0x00	; 0
    4110:	90 40       	sbci	r25, 0x00	; 0
    4112:	e1 f7       	brne	.-8      	; 0x410c <init_jedi+0x2c>
    4114:	00 c0       	rjmp	.+0      	; 0x4116 <init_jedi+0x36>
    4116:	00 00       	nop
    4118:	08 95       	ret

0000411a <HPOff>:
// HP & Magic Panel Actions Commands
/////////////////////////////////////////////////

void HPOff()
{
	suart_puts("*H000\r");
    411a:	8a e3       	ldi	r24, 0x3A	; 58
    411c:	91 e0       	ldi	r25, 0x01	; 1
    411e:	0c 94 2a 32 	jmp	0x6454	; 0x6454 <suart_puts>

00004122 <HPOn>:
}

void HPOn()
{
	suart_puts("*ON00\r"); 	// holo lights on
    4122:	86 ef       	ldi	r24, 0xF6	; 246
    4124:	91 e0       	ldi	r25, 0x01	; 1
    4126:	0c 94 2a 32 	jmp	0x6454	; 0x6454 <suart_puts>

0000412a <HPStop>:
}

void HPStop()
{
	suart_puts("*ST00\r"); 	// all holos to stop and lights off
    412a:	82 ee       	ldi	r24, 0xE2	; 226
    412c:	91 e0       	ldi	r25, 0x01	; 1
    412e:	0c 94 2a 32 	jmp	0x6454	; 0x6454 <suart_puts>

00004132 <HPRandom>:
}

void HPRandom()
{
	suart_puts("*RD00\r"); 	// all holos to random
    4132:	8c ee       	ldi	r24, 0xEC	; 236
    4134:	91 e0       	ldi	r25, 0x01	; 1
    4136:	0c 94 2a 32 	jmp	0x6454	; 0x6454 <suart_puts>

0000413a <HPFlicker>:
}

void HPFlicker(uint8_t seconds)	// all HP flicer seconds from 0 (off) to 99
{
    413a:	0f 93       	push	r16
    413c:	1f 93       	push	r17
    413e:	cf 93       	push	r28
    4140:	df 93       	push	r29
    4142:	cd b7       	in	r28, 0x3d	; 61
    4144:	de b7       	in	r29, 0x3e	; 62
    4146:	27 97       	sbiw	r28, 0x07	; 7
    4148:	0f b6       	in	r0, 0x3f	; 63
    414a:	f8 94       	cli
    414c:	de bf       	out	0x3e, r29	; 62
    414e:	0f be       	out	0x3f, r0	; 63
    4150:	cd bf       	out	0x3d, r28	; 61
	char string[7];
	sprintf(string, "*F0%02d\r", seconds);
    4152:	1f 92       	push	r1
    4154:	8f 93       	push	r24
    4156:	85 e6       	ldi	r24, 0x65	; 101
    4158:	91 e0       	ldi	r25, 0x01	; 1
    415a:	9f 93       	push	r25
    415c:	8f 93       	push	r24
    415e:	8e 01       	movw	r16, r28
    4160:	0f 5f       	subi	r16, 0xFF	; 255
    4162:	1f 4f       	sbci	r17, 0xFF	; 255
    4164:	1f 93       	push	r17
    4166:	0f 93       	push	r16
    4168:	0e 94 84 36 	call	0x6d08	; 0x6d08 <sprintf>
	suart_puts(string);
    416c:	c8 01       	movw	r24, r16
    416e:	0e 94 2a 32 	call	0x6454	; 0x6454 <suart_puts>
    4172:	0f 90       	pop	r0
    4174:	0f 90       	pop	r0
    4176:	0f 90       	pop	r0
    4178:	0f 90       	pop	r0
    417a:	0f 90       	pop	r0
    417c:	0f 90       	pop	r0
}
    417e:	27 96       	adiw	r28, 0x07	; 7
    4180:	0f b6       	in	r0, 0x3f	; 63
    4182:	f8 94       	cli
    4184:	de bf       	out	0x3e, r29	; 62
    4186:	0f be       	out	0x3f, r0	; 63
    4188:	cd bf       	out	0x3d, r28	; 61
    418a:	df 91       	pop	r29
    418c:	cf 91       	pop	r28
    418e:	1f 91       	pop	r17
    4190:	0f 91       	pop	r16
    4192:	08 95       	ret

00004194 <HP1Flicker>:

void HP1Flicker(uint8_t seconds) // front HP flicker
{
    4194:	0f 93       	push	r16
    4196:	1f 93       	push	r17
    4198:	cf 93       	push	r28
    419a:	df 93       	push	r29
    419c:	cd b7       	in	r28, 0x3d	; 61
    419e:	de b7       	in	r29, 0x3e	; 62
    41a0:	27 97       	sbiw	r28, 0x07	; 7
    41a2:	0f b6       	in	r0, 0x3f	; 63
    41a4:	f8 94       	cli
    41a6:	de bf       	out	0x3e, r29	; 62
    41a8:	0f be       	out	0x3f, r0	; 63
    41aa:	cd bf       	out	0x3d, r28	; 61
	char string[7];
	sprintf(string, "*F1%02d\r", seconds);
    41ac:	1f 92       	push	r1
    41ae:	8f 93       	push	r24
    41b0:	87 eb       	ldi	r24, 0xB7	; 183
    41b2:	91 e0       	ldi	r25, 0x01	; 1
    41b4:	9f 93       	push	r25
    41b6:	8f 93       	push	r24
    41b8:	8e 01       	movw	r16, r28
    41ba:	0f 5f       	subi	r16, 0xFF	; 255
    41bc:	1f 4f       	sbci	r17, 0xFF	; 255
    41be:	1f 93       	push	r17
    41c0:	0f 93       	push	r16
    41c2:	0e 94 84 36 	call	0x6d08	; 0x6d08 <sprintf>
	suart_puts(string);
    41c6:	c8 01       	movw	r24, r16
    41c8:	0e 94 2a 32 	call	0x6454	; 0x6454 <suart_puts>
    41cc:	0f 90       	pop	r0
    41ce:	0f 90       	pop	r0
    41d0:	0f 90       	pop	r0
    41d2:	0f 90       	pop	r0
    41d4:	0f 90       	pop	r0
    41d6:	0f 90       	pop	r0
}
    41d8:	27 96       	adiw	r28, 0x07	; 7
    41da:	0f b6       	in	r0, 0x3f	; 63
    41dc:	f8 94       	cli
    41de:	de bf       	out	0x3e, r29	; 62
    41e0:	0f be       	out	0x3f, r0	; 63
    41e2:	cd bf       	out	0x3d, r28	; 61
    41e4:	df 91       	pop	r29
    41e6:	cf 91       	pop	r28
    41e8:	1f 91       	pop	r17
    41ea:	0f 91       	pop	r16
    41ec:	08 95       	ret

000041ee <HPFlash>:

void HPFlash(uint8_t seconds)	// seconds from 0 (off) to 99 (always on)
{
    41ee:	0f 93       	push	r16
    41f0:	1f 93       	push	r17
    41f2:	cf 93       	push	r28
    41f4:	df 93       	push	r29
    41f6:	cd b7       	in	r28, 0x3d	; 61
    41f8:	de b7       	in	r29, 0x3e	; 62
    41fa:	27 97       	sbiw	r28, 0x07	; 7
    41fc:	0f b6       	in	r0, 0x3f	; 63
    41fe:	f8 94       	cli
    4200:	de bf       	out	0x3e, r29	; 62
    4202:	0f be       	out	0x3f, r0	; 63
    4204:	cd bf       	out	0x3d, r28	; 61
	char string[7];
	sprintf(string, "*H0%02d\r", seconds);
    4206:	1f 92       	push	r1
    4208:	8f 93       	push	r24
    420a:	8e e6       	ldi	r24, 0x6E	; 110
    420c:	91 e0       	ldi	r25, 0x01	; 1
    420e:	9f 93       	push	r25
    4210:	8f 93       	push	r24
    4212:	8e 01       	movw	r16, r28
    4214:	0f 5f       	subi	r16, 0xFF	; 255
    4216:	1f 4f       	sbci	r17, 0xFF	; 255
    4218:	1f 93       	push	r17
    421a:	0f 93       	push	r16
    421c:	0e 94 84 36 	call	0x6d08	; 0x6d08 <sprintf>
	suart_puts(string);
    4220:	c8 01       	movw	r24, r16
    4222:	0e 94 2a 32 	call	0x6454	; 0x6454 <suart_puts>
    4226:	0f 90       	pop	r0
    4228:	0f 90       	pop	r0
    422a:	0f 90       	pop	r0
    422c:	0f 90       	pop	r0
    422e:	0f 90       	pop	r0
    4230:	0f 90       	pop	r0
}
    4232:	27 96       	adiw	r28, 0x07	; 7
    4234:	0f b6       	in	r0, 0x3f	; 63
    4236:	f8 94       	cli
    4238:	de bf       	out	0x3e, r29	; 62
    423a:	0f be       	out	0x3f, r0	; 63
    423c:	cd bf       	out	0x3d, r28	; 61
    423e:	df 91       	pop	r29
    4240:	cf 91       	pop	r28
    4242:	1f 91       	pop	r17
    4244:	0f 91       	pop	r16
    4246:	08 95       	ret

00004248 <HP1RC>:

void HP1RC()
{
	suart_puts("*RC01\r"); 	// HP 01 (front) in RC mode
    4248:	8d ea       	ldi	r24, 0xAD	; 173
    424a:	91 e0       	ldi	r25, 0x01	; 1
    424c:	0c 94 2a 32 	jmp	0x6454	; 0x6454 <suart_puts>

00004250 <MagicFlash>:
}

void MagicFlash(uint8_t seconds)	// seconds from 0 (off) to 99 (always on)
{
    4250:	0f 93       	push	r16
    4252:	1f 93       	push	r17
    4254:	cf 93       	push	r28
    4256:	df 93       	push	r29
    4258:	cd b7       	in	r28, 0x3d	; 61
    425a:	de b7       	in	r29, 0x3e	; 62
    425c:	27 97       	sbiw	r28, 0x07	; 7
    425e:	0f b6       	in	r0, 0x3f	; 63
    4260:	f8 94       	cli
    4262:	de bf       	out	0x3e, r29	; 62
    4264:	0f be       	out	0x3f, r0	; 63
    4266:	cd bf       	out	0x3d, r28	; 61
	char string[7];
	sprintf(string, "*MO%02d\r", seconds);
    4268:	1f 92       	push	r1
    426a:	8f 93       	push	r24
    426c:	82 e3       	ldi	r24, 0x32	; 50
    426e:	92 e0       	ldi	r25, 0x02	; 2
    4270:	9f 93       	push	r25
    4272:	8f 93       	push	r24
    4274:	8e 01       	movw	r16, r28
    4276:	0f 5f       	subi	r16, 0xFF	; 255
    4278:	1f 4f       	sbci	r17, 0xFF	; 255
    427a:	1f 93       	push	r17
    427c:	0f 93       	push	r16
    427e:	0e 94 84 36 	call	0x6d08	; 0x6d08 <sprintf>
	suart_puts(string);
    4282:	c8 01       	movw	r24, r16
    4284:	0e 94 2a 32 	call	0x6454	; 0x6454 <suart_puts>
    4288:	0f 90       	pop	r0
    428a:	0f 90       	pop	r0
    428c:	0f 90       	pop	r0
    428e:	0f 90       	pop	r0
    4290:	0f 90       	pop	r0
    4292:	0f 90       	pop	r0
}
    4294:	27 96       	adiw	r28, 0x07	; 7
    4296:	0f b6       	in	r0, 0x3f	; 63
    4298:	f8 94       	cli
    429a:	de bf       	out	0x3e, r29	; 62
    429c:	0f be       	out	0x3f, r0	; 63
    429e:	cd bf       	out	0x3d, r28	; 61
    42a0:	df 91       	pop	r29
    42a2:	cf 91       	pop	r28
    42a4:	1f 91       	pop	r17
    42a6:	0f 91       	pop	r16
    42a8:	08 95       	ret

000042aa <MagicFlicker>:

void MagicFlicker(uint8_t seconds)	// seconds from 0 (off) to 99 (always on)
{
    42aa:	0f 93       	push	r16
    42ac:	1f 93       	push	r17
    42ae:	cf 93       	push	r28
    42b0:	df 93       	push	r29
    42b2:	cd b7       	in	r28, 0x3d	; 61
    42b4:	de b7       	in	r29, 0x3e	; 62
    42b6:	27 97       	sbiw	r28, 0x07	; 7
    42b8:	0f b6       	in	r0, 0x3f	; 63
    42ba:	f8 94       	cli
    42bc:	de bf       	out	0x3e, r29	; 62
    42be:	0f be       	out	0x3f, r0	; 63
    42c0:	cd bf       	out	0x3d, r28	; 61
	char string[7];
	sprintf(string, "*MF%02d\r", seconds);
    42c2:	1f 92       	push	r1
    42c4:	8f 93       	push	r24
    42c6:	8c e5       	ldi	r24, 0x5C	; 92
    42c8:	91 e0       	ldi	r25, 0x01	; 1
    42ca:	9f 93       	push	r25
    42cc:	8f 93       	push	r24
    42ce:	8e 01       	movw	r16, r28
    42d0:	0f 5f       	subi	r16, 0xFF	; 255
    42d2:	1f 4f       	sbci	r17, 0xFF	; 255
    42d4:	1f 93       	push	r17
    42d6:	0f 93       	push	r16
    42d8:	0e 94 84 36 	call	0x6d08	; 0x6d08 <sprintf>
	suart_puts(string);
    42dc:	c8 01       	movw	r24, r16
    42de:	0e 94 2a 32 	call	0x6454	; 0x6454 <suart_puts>
    42e2:	2f ef       	ldi	r18, 0xFF	; 255
    42e4:	80 e7       	ldi	r24, 0x70	; 112
    42e6:	92 e0       	ldi	r25, 0x02	; 2
    42e8:	21 50       	subi	r18, 0x01	; 1
    42ea:	80 40       	sbci	r24, 0x00	; 0
    42ec:	90 40       	sbci	r25, 0x00	; 0
    42ee:	e1 f7       	brne	.-8      	; 0x42e8 <MagicFlicker+0x3e>
    42f0:	00 c0       	rjmp	.+0      	; 0x42f2 <MagicFlicker+0x48>
    42f2:	00 00       	nop
    42f4:	0f 90       	pop	r0
    42f6:	0f 90       	pop	r0
    42f8:	0f 90       	pop	r0
    42fa:	0f 90       	pop	r0
    42fc:	0f 90       	pop	r0
    42fe:	0f 90       	pop	r0
	_delay_ms(50);
}
    4300:	27 96       	adiw	r28, 0x07	; 7
    4302:	0f b6       	in	r0, 0x3f	; 63
    4304:	f8 94       	cli
    4306:	de bf       	out	0x3e, r29	; 62
    4308:	0f be       	out	0x3f, r0	; 63
    430a:	cd bf       	out	0x3d, r28	; 61
    430c:	df 91       	pop	r29
    430e:	cf 91       	pop	r28
    4310:	1f 91       	pop	r17
    4312:	0f 91       	pop	r16
    4314:	08 95       	ret

00004316 <DisplayScream>:
// JEDI Actions Commands
/////////////////////////////////////////////////

void DisplayScream()
{
	suart_puts("@0T5\r"); 	// scream display
    4316:	86 e5       	ldi	r24, 0x56	; 86
    4318:	91 e0       	ldi	r25, 0x01	; 1
    431a:	0e 94 2a 32 	call	0x6454	; 0x6454 <suart_puts>
    431e:	2f ef       	ldi	r18, 0xFF	; 255
    4320:	81 ee       	ldi	r24, 0xE1	; 225
    4322:	94 e0       	ldi	r25, 0x04	; 4
    4324:	21 50       	subi	r18, 0x01	; 1
    4326:	80 40       	sbci	r24, 0x00	; 0
    4328:	90 40       	sbci	r25, 0x00	; 0
    432a:	e1 f7       	brne	.-8      	; 0x4324 <DisplayScream+0xe>
    432c:	00 c0       	rjmp	.+0      	; 0x432e <DisplayScream+0x18>
    432e:	00 00       	nop
    4330:	08 95       	ret

00004332 <DisplayNormal>:
	_delay_ms(100);
}

void DisplayNormal()
{
	suart_puts("@0T1\r");
    4332:	81 e4       	ldi	r24, 0x41	; 65
    4334:	91 e0       	ldi	r25, 0x01	; 1
    4336:	0c 94 2a 32 	jmp	0x6454	; 0x6454 <suart_puts>

0000433a <DisplayFlash4>:
}

void DisplayFlash4()
{
	suart_puts("@0T2\r");  	// flash display
    433a:	8c e7       	ldi	r24, 0x7C	; 124
    433c:	91 e0       	ldi	r25, 0x01	; 1
    433e:	0e 94 2a 32 	call	0x6454	; 0x6454 <suart_puts>
    4342:	2f ef       	ldi	r18, 0xFF	; 255
    4344:	81 ee       	ldi	r24, 0xE1	; 225
    4346:	94 e0       	ldi	r25, 0x04	; 4
    4348:	21 50       	subi	r18, 0x01	; 1
    434a:	80 40       	sbci	r24, 0x00	; 0
    434c:	90 40       	sbci	r25, 0x00	; 0
    434e:	e1 f7       	brne	.-8      	; 0x4348 <DisplayFlash4+0xe>
    4350:	00 c0       	rjmp	.+0      	; 0x4352 <DisplayFlash4+0x18>
    4352:	00 00       	nop
	_delay_ms(100);
	suart_puts("@0W4\r");  	// for 4 seconds
    4354:	82 e8       	ldi	r24, 0x82	; 130
    4356:	91 e0       	ldi	r25, 0x01	; 1
    4358:	0e 94 2a 32 	call	0x6454	; 0x6454 <suart_puts>
    435c:	2f ef       	ldi	r18, 0xFF	; 255
    435e:	80 e7       	ldi	r24, 0x70	; 112
    4360:	92 e0       	ldi	r25, 0x02	; 2
    4362:	21 50       	subi	r18, 0x01	; 1
    4364:	80 40       	sbci	r24, 0x00	; 0
    4366:	90 40       	sbci	r25, 0x00	; 0
    4368:	e1 f7       	brne	.-8      	; 0x4362 <DisplayFlash4+0x28>
    436a:	00 c0       	rjmp	.+0      	; 0x436c <DisplayFlash4+0x32>
    436c:	00 00       	nop
    436e:	08 95       	ret

00004370 <DisplaySpectrum>:
	_delay_ms(50);
}

void DisplaySpectrum()
{
	suart_puts("@0T92\r"); 	// spectrum display
    4370:	80 e9       	ldi	r24, 0x90	; 144
    4372:	91 e0       	ldi	r25, 0x01	; 1
    4374:	0e 94 2a 32 	call	0x6454	; 0x6454 <suart_puts>
    4378:	2f ef       	ldi	r18, 0xFF	; 255
    437a:	83 ec       	ldi	r24, 0xC3	; 195
    437c:	99 e0       	ldi	r25, 0x09	; 9
    437e:	21 50       	subi	r18, 0x01	; 1
    4380:	80 40       	sbci	r24, 0x00	; 0
    4382:	90 40       	sbci	r25, 0x00	; 0
    4384:	e1 f7       	brne	.-8      	; 0x437e <DisplaySpectrum+0xe>
    4386:	00 c0       	rjmp	.+0      	; 0x4388 <DisplaySpectrum+0x18>
    4388:	00 00       	nop
    438a:	08 95       	ret

0000438c <DisplayShortCircuit>:
	_delay_ms(200);			// JEDI needs a large amount of time to setup, 100 ms not enough
}

void DisplayShortCircuit()
{
	suart_puts("@0T4\r");	// short circuit display
    438c:	8a e9       	ldi	r24, 0x9A	; 154
    438e:	91 e0       	ldi	r25, 0x01	; 1
    4390:	0e 94 2a 32 	call	0x6454	; 0x6454 <suart_puts>
    4394:	2f ef       	ldi	r18, 0xFF	; 255
    4396:	81 ee       	ldi	r24, 0xE1	; 225
    4398:	94 e0       	ldi	r25, 0x04	; 4
    439a:	21 50       	subi	r18, 0x01	; 1
    439c:	80 40       	sbci	r24, 0x00	; 0
    439e:	90 40       	sbci	r25, 0x00	; 0
    43a0:	e1 f7       	brne	.-8      	; 0x439a <DisplayShortCircuit+0xe>
    43a2:	00 c0       	rjmp	.+0      	; 0x43a4 <DisplayShortCircuit+0x18>
    43a4:	00 00       	nop
	_delay_ms(100);
	suart_puts("@0W10\r");  // for 10 seconds (this one does not seem to respond)
    43a6:	80 ea       	ldi	r24, 0xA0	; 160
    43a8:	91 e0       	ldi	r25, 0x01	; 1
    43aa:	0e 94 2a 32 	call	0x6454	; 0x6454 <suart_puts>
    43ae:	2f ef       	ldi	r18, 0xFF	; 255
    43b0:	89 ef       	ldi	r24, 0xF9	; 249
    43b2:	90 e0       	ldi	r25, 0x00	; 0
    43b4:	21 50       	subi	r18, 0x01	; 1
    43b6:	80 40       	sbci	r24, 0x00	; 0
    43b8:	90 40       	sbci	r25, 0x00	; 0
    43ba:	e1 f7       	brne	.-8      	; 0x43b4 <DisplayShortCircuit+0x28>
    43bc:	00 c0       	rjmp	.+0      	; 0x43be <DisplayShortCircuit+0x32>
    43be:	00 00       	nop
    43c0:	08 95       	ret

000043c2 <DisplayLeia>:
	_delay_ms(20);
}

void DisplayLeia()
{
	suart_puts("@0T6\r"); 	// Leia display
    43c2:	80 ec       	ldi	r24, 0xC0	; 192
    43c4:	91 e0       	ldi	r25, 0x01	; 1
    43c6:	0e 94 2a 32 	call	0x6454	; 0x6454 <suart_puts>
    43ca:	2f ef       	ldi	r18, 0xFF	; 255
    43cc:	81 ee       	ldi	r24, 0xE1	; 225
    43ce:	94 e0       	ldi	r25, 0x04	; 4
    43d0:	21 50       	subi	r18, 0x01	; 1
    43d2:	80 40       	sbci	r24, 0x00	; 0
    43d4:	90 40       	sbci	r25, 0x00	; 0
    43d6:	e1 f7       	brne	.-8      	; 0x43d0 <DisplayLeia+0xe>
    43d8:	00 c0       	rjmp	.+0      	; 0x43da <DisplayLeia+0x18>
    43da:	00 00       	nop
    43dc:	08 95       	ret

000043de <RLDSetMessage>:
	_delay_ms(100);
}

void RLDSetMessage(char* message)
{
    43de:	cf 93       	push	r28
    43e0:	df 93       	push	r29
    43e2:	ec 01       	movw	r28, r24
	suart_puts("@3M");
    43e4:	86 ec       	ldi	r24, 0xC6	; 198
    43e6:	91 e0       	ldi	r25, 0x01	; 1
    43e8:	0e 94 2a 32 	call	0x6454	; 0x6454 <suart_puts>
	suart_puts(message);
    43ec:	ce 01       	movw	r24, r28
    43ee:	0e 94 2a 32 	call	0x6454	; 0x6454 <suart_puts>
	suart_putc('\r');
    43f2:	8d e0       	ldi	r24, 0x0D	; 13
    43f4:	0e 94 21 32 	call	0x6442	; 0x6442 <suart_putc>
    43f8:	2f ef       	ldi	r18, 0xFF	; 255
    43fa:	84 e3       	ldi	r24, 0x34	; 52
    43fc:	9c e0       	ldi	r25, 0x0C	; 12
    43fe:	21 50       	subi	r18, 0x01	; 1
    4400:	80 40       	sbci	r24, 0x00	; 0
    4402:	90 40       	sbci	r25, 0x00	; 0
    4404:	e1 f7       	brne	.-8      	; 0x43fe <RLDSetMessage+0x20>
    4406:	00 c0       	rjmp	.+0      	; 0x4408 <RLDSetMessage+0x2a>
    4408:	00 00       	nop
	_delay_ms(250);
}
    440a:	df 91       	pop	r29
    440c:	cf 91       	pop	r28
    440e:	08 95       	ret

00004410 <RLDDisplayMessage>:

void RLDDisplayMessage()
{
	suart_puts("@3T100\r");	// put rear logic in text mode
    4410:	87 ed       	ldi	r24, 0xD7	; 215
    4412:	91 e0       	ldi	r25, 0x01	; 1
    4414:	0e 94 2a 32 	call	0x6454	; 0x6454 <suart_puts>
    4418:	2f ef       	ldi	r18, 0xFF	; 255
    441a:	81 ee       	ldi	r24, 0xE1	; 225
    441c:	94 e0       	ldi	r25, 0x04	; 4
    441e:	21 50       	subi	r18, 0x01	; 1
    4420:	80 40       	sbci	r24, 0x00	; 0
    4422:	90 40       	sbci	r25, 0x00	; 0
    4424:	e1 f7       	brne	.-8      	; 0x441e <RLDDisplayMessage+0xe>
    4426:	00 c0       	rjmp	.+0      	; 0x4428 <RLDDisplayMessage+0x18>
    4428:	00 00       	nop
    442a:	08 95       	ret

0000442c <SoundScream>:
}

const char strSoundCommand[] PROGMEM="Sound command\r\n";
void parse_sound_command(char* command,uint8_t length)
{
	if(feedbackmessageon) serial_puts_p(strSoundCommand);
    442c:	80 91 55 02 	lds	r24, 0x0255
    4430:	88 23       	and	r24, r24
    4432:	21 f0       	breq	.+8      	; 0x443c <SoundScream+0x10>
    4434:	83 ea       	ldi	r24, 0xA3	; 163
    4436:	93 e0       	ldi	r25, 0x03	; 3
    4438:	0e 94 d0 2b 	call	0x57a0	; 0x57a0 <serial_puts_p>

#ifdef _MP3TRIGGER_
	// pass on command to our own MP3_Trigger interpreter
	mp3_parse_command(command);
    443c:	83 e5       	ldi	r24, 0x53	; 83
    443e:	91 e0       	ldi	r25, 0x01	; 1
    4440:	0c 94 14 0d 	jmp	0x1a28	; 0x1a28 <mp3_parse_command>

00004444 <SoundWave>:
}

const char strSoundCommand[] PROGMEM="Sound command\r\n";
void parse_sound_command(char* command,uint8_t length)
{
	if(feedbackmessageon) serial_puts_p(strSoundCommand);
    4444:	80 91 55 02 	lds	r24, 0x0255
    4448:	88 23       	and	r24, r24
    444a:	21 f0       	breq	.+8      	; 0x4454 <SoundWave+0x10>
    444c:	83 ea       	ldi	r24, 0xA3	; 163
    444e:	93 e0       	ldi	r25, 0x03	; 3
    4450:	0e 94 d0 2b 	call	0x57a0	; 0x57a0 <serial_puts_p>

#ifdef _MP3TRIGGER_
	// pass on command to our own MP3_Trigger interpreter
	mp3_parse_command(command);
    4454:	87 e7       	ldi	r24, 0x77	; 119
    4456:	91 e0       	ldi	r25, 0x01	; 1
    4458:	0c 94 14 0d 	jmp	0x1a28	; 0x1a28 <mp3_parse_command>

0000445c <SoundDisco>:
}

const char strSoundCommand[] PROGMEM="Sound command\r\n";
void parse_sound_command(char* command,uint8_t length)
{
	if(feedbackmessageon) serial_puts_p(strSoundCommand);
    445c:	80 91 55 02 	lds	r24, 0x0255
    4460:	88 23       	and	r24, r24
    4462:	21 f0       	breq	.+8      	; 0x446c <SoundDisco+0x10>
    4464:	83 ea       	ldi	r24, 0xA3	; 163
    4466:	93 e0       	ldi	r25, 0x03	; 3
    4468:	0e 94 d0 2b 	call	0x57a0	; 0x57a0 <serial_puts_p>

#ifdef _MP3TRIGGER_
	// pass on command to our own MP3_Trigger interpreter
	mp3_parse_command(command);
    446c:	8f ed       	ldi	r24, 0xDF	; 223
    446e:	91 e0       	ldi	r25, 0x01	; 1
    4470:	0c 94 14 0d 	jmp	0x1a28	; 0x1a28 <mp3_parse_command>

00004474 <SoundFastWave>:
}

const char strSoundCommand[] PROGMEM="Sound command\r\n";
void parse_sound_command(char* command,uint8_t length)
{
	if(feedbackmessageon) serial_puts_p(strSoundCommand);
    4474:	80 91 55 02 	lds	r24, 0x0255
    4478:	88 23       	and	r24, r24
    447a:	21 f0       	breq	.+8      	; 0x4484 <SoundFastWave+0x10>
    447c:	83 ea       	ldi	r24, 0xA3	; 163
    447e:	93 e0       	ldi	r25, 0x03	; 3
    4480:	0e 94 d0 2b 	call	0x57a0	; 0x57a0 <serial_puts_p>

#ifdef _MP3TRIGGER_
	// pass on command to our own MP3_Trigger interpreter
	mp3_parse_command(command);
    4484:	88 e8       	ldi	r24, 0x88	; 136
    4486:	91 e0       	ldi	r25, 0x01	; 1
    4488:	0c 94 14 0d 	jmp	0x1a28	; 0x1a28 <mp3_parse_command>

0000448c <SoundOpenWave>:
}

const char strSoundCommand[] PROGMEM="Sound command\r\n";
void parse_sound_command(char* command,uint8_t length)
{
	if(feedbackmessageon) serial_puts_p(strSoundCommand);
    448c:	80 91 55 02 	lds	r24, 0x0255
    4490:	88 23       	and	r24, r24
    4492:	21 f0       	breq	.+8      	; 0x449c <SoundOpenWave+0x10>
    4494:	83 ea       	ldi	r24, 0xA3	; 163
    4496:	93 e0       	ldi	r25, 0x03	; 3
    4498:	0e 94 d0 2b 	call	0x57a0	; 0x57a0 <serial_puts_p>

#ifdef _MP3TRIGGER_
	// pass on command to our own MP3_Trigger interpreter
	mp3_parse_command(command);
    449c:	8c e8       	ldi	r24, 0x8C	; 140
    449e:	91 e0       	ldi	r25, 0x01	; 1
    44a0:	0c 94 14 0d 	jmp	0x1a28	; 0x1a28 <mp3_parse_command>

000044a4 <SoundBeepCantina>:
}

const char strSoundCommand[] PROGMEM="Sound command\r\n";
void parse_sound_command(char* command,uint8_t length)
{
	if(feedbackmessageon) serial_puts_p(strSoundCommand);
    44a4:	80 91 55 02 	lds	r24, 0x0255
    44a8:	88 23       	and	r24, r24
    44aa:	21 f0       	breq	.+8      	; 0x44b4 <SoundBeepCantina+0x10>
    44ac:	83 ea       	ldi	r24, 0xA3	; 163
    44ae:	93 e0       	ldi	r25, 0x03	; 3
    44b0:	0e 94 d0 2b 	call	0x57a0	; 0x57a0 <serial_puts_p>

#ifdef _MP3TRIGGER_
	// pass on command to our own MP3_Trigger interpreter
	mp3_parse_command(command);
    44b4:	87 e9       	ldi	r24, 0x97	; 151
    44b6:	91 e0       	ldi	r25, 0x01	; 1
    44b8:	0c 94 14 0d 	jmp	0x1a28	; 0x1a28 <mp3_parse_command>

000044bc <SoundFaint>:
}

const char strSoundCommand[] PROGMEM="Sound command\r\n";
void parse_sound_command(char* command,uint8_t length)
{
	if(feedbackmessageon) serial_puts_p(strSoundCommand);
    44bc:	80 91 55 02 	lds	r24, 0x0255
    44c0:	88 23       	and	r24, r24
    44c2:	21 f0       	breq	.+8      	; 0x44cc <SoundFaint+0x10>
    44c4:	83 ea       	ldi	r24, 0xA3	; 163
    44c6:	93 e0       	ldi	r25, 0x03	; 3
    44c8:	0e 94 d0 2b 	call	0x57a0	; 0x57a0 <serial_puts_p>

#ifdef _MP3TRIGGER_
	// pass on command to our own MP3_Trigger interpreter
	mp3_parse_command(command);
    44cc:	87 ea       	ldi	r24, 0xA7	; 167
    44ce:	91 e0       	ldi	r25, 0x01	; 1
    44d0:	0c 94 14 0d 	jmp	0x1a28	; 0x1a28 <mp3_parse_command>

000044d4 <SoundCantina>:
}

const char strSoundCommand[] PROGMEM="Sound command\r\n";
void parse_sound_command(char* command,uint8_t length)
{
	if(feedbackmessageon) serial_puts_p(strSoundCommand);
    44d4:	80 91 55 02 	lds	r24, 0x0255
    44d8:	88 23       	and	r24, r24
    44da:	21 f0       	breq	.+8      	; 0x44e4 <SoundCantina+0x10>
    44dc:	83 ea       	ldi	r24, 0xA3	; 163
    44de:	93 e0       	ldi	r25, 0x03	; 3
    44e0:	0e 94 d0 2b 	call	0x57a0	; 0x57a0 <serial_puts_p>

#ifdef _MP3TRIGGER_
	// pass on command to our own MP3_Trigger interpreter
	mp3_parse_command(command);
    44e4:	8a ea       	ldi	r24, 0xAA	; 170
    44e6:	91 e0       	ldi	r25, 0x01	; 1
    44e8:	0c 94 14 0d 	jmp	0x1a28	; 0x1a28 <mp3_parse_command>

000044ec <SoundLeia>:
}

const char strSoundCommand[] PROGMEM="Sound command\r\n";
void parse_sound_command(char* command,uint8_t length)
{
	if(feedbackmessageon) serial_puts_p(strSoundCommand);
    44ec:	80 91 55 02 	lds	r24, 0x0255
    44f0:	88 23       	and	r24, r24
    44f2:	21 f0       	breq	.+8      	; 0x44fc <SoundLeia+0x10>
    44f4:	83 ea       	ldi	r24, 0xA3	; 163
    44f6:	93 e0       	ldi	r25, 0x03	; 3
    44f8:	0e 94 d0 2b 	call	0x57a0	; 0x57a0 <serial_puts_p>

#ifdef _MP3TRIGGER_
	// pass on command to our own MP3_Trigger interpreter
	mp3_parse_command(command);
    44fc:	84 eb       	ldi	r24, 0xB4	; 180
    44fe:	91 e0       	ldi	r25, 0x01	; 1
    4500:	0c 94 14 0d 	jmp	0x1a28	; 0x1a28 <mp3_parse_command>

00004504 <Sound>:
{
	parse_sound_command("$L",2); 	// Leia message sound
}

void Sound(uint8_t bank, uint8_t number)
{
    4504:	0f 93       	push	r16
    4506:	1f 93       	push	r17
    4508:	cf 93       	push	r28
    450a:	df 93       	push	r29
    450c:	cd b7       	in	r28, 0x3d	; 61
    450e:	de b7       	in	r29, 0x3e	; 62
    4510:	27 97       	sbiw	r28, 0x07	; 7
    4512:	0f b6       	in	r0, 0x3f	; 63
    4514:	f8 94       	cli
    4516:	de bf       	out	0x3e, r29	; 62
    4518:	0f be       	out	0x3f, r0	; 63
    451a:	cd bf       	out	0x3d, r28	; 61
	char string[7];
	sprintf(string, "$%1d%2d", bank, number);
    451c:	1f 92       	push	r1
    451e:	6f 93       	push	r22
    4520:	1f 92       	push	r1
    4522:	8f 93       	push	r24
    4524:	8b e3       	ldi	r24, 0x3B	; 59
    4526:	92 e0       	ldi	r25, 0x02	; 2
    4528:	9f 93       	push	r25
    452a:	8f 93       	push	r24
    452c:	8e 01       	movw	r16, r28
    452e:	0f 5f       	subi	r16, 0xFF	; 255
    4530:	1f 4f       	sbci	r17, 0xFF	; 255
    4532:	1f 93       	push	r17
    4534:	0f 93       	push	r16
    4536:	0e 94 84 36 	call	0x6d08	; 0x6d08 <sprintf>
}

const char strSoundCommand[] PROGMEM="Sound command\r\n";
void parse_sound_command(char* command,uint8_t length)
{
	if(feedbackmessageon) serial_puts_p(strSoundCommand);
    453a:	0f b6       	in	r0, 0x3f	; 63
    453c:	f8 94       	cli
    453e:	de bf       	out	0x3e, r29	; 62
    4540:	0f be       	out	0x3f, r0	; 63
    4542:	cd bf       	out	0x3d, r28	; 61
    4544:	80 91 55 02 	lds	r24, 0x0255
    4548:	88 23       	and	r24, r24
    454a:	21 f0       	breq	.+8      	; 0x4554 <Sound+0x50>
    454c:	83 ea       	ldi	r24, 0xA3	; 163
    454e:	93 e0       	ldi	r25, 0x03	; 3
    4550:	0e 94 d0 2b 	call	0x57a0	; 0x57a0 <serial_puts_p>

#ifdef _MP3TRIGGER_
	// pass on command to our own MP3_Trigger interpreter
	mp3_parse_command(command);
    4554:	c8 01       	movw	r24, r16
    4556:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <mp3_parse_command>
void Sound(uint8_t bank, uint8_t number)
{
	char string[7];
	sprintf(string, "$%1d%2d", bank, number);
	parse_sound_command(string, strlen(string));
}
    455a:	27 96       	adiw	r28, 0x07	; 7
    455c:	0f b6       	in	r0, 0x3f	; 63
    455e:	f8 94       	cli
    4560:	de bf       	out	0x3e, r29	; 62
    4562:	0f be       	out	0x3f, r0	; 63
    4564:	cd bf       	out	0x3d, r28	; 61
    4566:	df 91       	pop	r29
    4568:	cf 91       	pop	r28
    456a:	1f 91       	pop	r17
    456c:	0f 91       	pop	r16
    456e:	08 95       	ret

00004570 <SoundRandom>:
}

const char strSoundCommand[] PROGMEM="Sound command\r\n";
void parse_sound_command(char* command,uint8_t length)
{
	if(feedbackmessageon) serial_puts_p(strSoundCommand);
    4570:	80 91 55 02 	lds	r24, 0x0255
    4574:	88 23       	and	r24, r24
    4576:	21 f0       	breq	.+8      	; 0x4580 <SoundRandom+0x10>
    4578:	83 ea       	ldi	r24, 0xA3	; 163
    457a:	93 e0       	ldi	r25, 0x03	; 3
    457c:	0e 94 d0 2b 	call	0x57a0	; 0x57a0 <serial_puts_p>

#ifdef _MP3TRIGGER_
	// pass on command to our own MP3_Trigger interpreter
	mp3_parse_command(command);
    4580:	83 ef       	ldi	r24, 0xF3	; 243
    4582:	91 e0       	ldi	r25, 0x01	; 1
    4584:	0c 94 14 0d 	jmp	0x1a28	; 0x1a28 <mp3_parse_command>

00004588 <SoundStop>:
}

const char strSoundCommand[] PROGMEM="Sound command\r\n";
void parse_sound_command(char* command,uint8_t length)
{
	if(feedbackmessageon) serial_puts_p(strSoundCommand);
    4588:	80 91 55 02 	lds	r24, 0x0255
    458c:	88 23       	and	r24, r24
    458e:	21 f0       	breq	.+8      	; 0x4598 <SoundStop+0x10>
    4590:	83 ea       	ldi	r24, 0xA3	; 163
    4592:	93 e0       	ldi	r25, 0x03	; 3
    4594:	0e 94 d0 2b 	call	0x57a0	; 0x57a0 <serial_puts_p>

#ifdef _MP3TRIGGER_
	// pass on command to our own MP3_Trigger interpreter
	mp3_parse_command(command);
    4598:	89 ee       	ldi	r24, 0xE9	; 233
    459a:	91 e0       	ldi	r25, 0x01	; 1
    459c:	0c 94 14 0d 	jmp	0x1a28	; 0x1a28 <mp3_parse_command>

000045a0 <rt_add_timer>:
bool rt_add_timer(rt_timer* atimer)
{
	uint8_t i;
	for (i=0; i<RT_MAX_TIMERS; i++)
	{
		if(!rt_timer_array[i])
    45a0:	20 91 fc 02 	lds	r18, 0x02FC
    45a4:	30 91 fd 02 	lds	r19, 0x02FD
    45a8:	23 2b       	or	r18, r19
    45aa:	c1 f1       	breq	.+112    	; 0x461c <rt_add_timer+0x7c>
    45ac:	20 91 fe 02 	lds	r18, 0x02FE
    45b0:	30 91 ff 02 	lds	r19, 0x02FF
    45b4:	23 2b       	or	r18, r19
    45b6:	e1 f1       	breq	.+120    	; 0x4630 <rt_add_timer+0x90>
    45b8:	20 91 00 03 	lds	r18, 0x0300
    45bc:	30 91 01 03 	lds	r19, 0x0301
    45c0:	23 2b       	or	r18, r19
    45c2:	c9 f1       	breq	.+114    	; 0x4636 <rt_add_timer+0x96>
    45c4:	20 91 02 03 	lds	r18, 0x0302
    45c8:	30 91 03 03 	lds	r19, 0x0303
    45cc:	23 2b       	or	r18, r19
    45ce:	b1 f1       	breq	.+108    	; 0x463c <rt_add_timer+0x9c>
    45d0:	20 91 04 03 	lds	r18, 0x0304
    45d4:	30 91 05 03 	lds	r19, 0x0305
    45d8:	23 2b       	or	r18, r19
    45da:	99 f1       	breq	.+102    	; 0x4642 <rt_add_timer+0xa2>
    45dc:	20 91 06 03 	lds	r18, 0x0306
    45e0:	30 91 07 03 	lds	r19, 0x0307
    45e4:	23 2b       	or	r18, r19
    45e6:	81 f1       	breq	.+96     	; 0x4648 <rt_add_timer+0xa8>
    45e8:	20 91 08 03 	lds	r18, 0x0308
    45ec:	30 91 09 03 	lds	r19, 0x0309
    45f0:	23 2b       	or	r18, r19
    45f2:	69 f1       	breq	.+90     	; 0x464e <rt_add_timer+0xae>
    45f4:	20 91 0a 03 	lds	r18, 0x030A
    45f8:	30 91 0b 03 	lds	r19, 0x030B
    45fc:	23 2b       	or	r18, r19
    45fe:	51 f1       	breq	.+84     	; 0x4654 <rt_add_timer+0xb4>
    4600:	20 91 0c 03 	lds	r18, 0x030C
    4604:	30 91 0d 03 	lds	r19, 0x030D
    4608:	23 2b       	or	r18, r19
    460a:	39 f1       	breq	.+78     	; 0x465a <rt_add_timer+0xba>
    460c:	20 91 0e 03 	lds	r18, 0x030E
    4610:	30 91 0f 03 	lds	r19, 0x030F
    4614:	23 2b       	or	r18, r19
    4616:	21 f1       	breq	.+72     	; 0x4660 <rt_add_timer+0xc0>
		{
			rt_timer_array[i]=atimer;
			return TRUE;
		}
	}
	return FALSE;
    4618:	80 e0       	ldi	r24, 0x00	; 0
}
    461a:	08 95       	ret
bool rt_add_timer(rt_timer* atimer)
{
	uint8_t i;
	for (i=0; i<RT_MAX_TIMERS; i++)
	{
		if(!rt_timer_array[i])
    461c:	e0 e0       	ldi	r30, 0x00	; 0
    461e:	f0 e0       	ldi	r31, 0x00	; 0
		{
			rt_timer_array[i]=atimer;
    4620:	ee 0f       	add	r30, r30
    4622:	ff 1f       	adc	r31, r31
    4624:	e4 50       	subi	r30, 0x04	; 4
    4626:	fd 4f       	sbci	r31, 0xFD	; 253
    4628:	91 83       	std	Z+1, r25	; 0x01
    462a:	80 83       	st	Z, r24
			return TRUE;
    462c:	81 e0       	ldi	r24, 0x01	; 1
    462e:	08 95       	ret
bool rt_add_timer(rt_timer* atimer)
{
	uint8_t i;
	for (i=0; i<RT_MAX_TIMERS; i++)
	{
		if(!rt_timer_array[i])
    4630:	e1 e0       	ldi	r30, 0x01	; 1
    4632:	f0 e0       	ldi	r31, 0x00	; 0
    4634:	f5 cf       	rjmp	.-22     	; 0x4620 <rt_add_timer+0x80>
    4636:	e2 e0       	ldi	r30, 0x02	; 2
    4638:	f0 e0       	ldi	r31, 0x00	; 0
    463a:	f2 cf       	rjmp	.-28     	; 0x4620 <rt_add_timer+0x80>
    463c:	e3 e0       	ldi	r30, 0x03	; 3
    463e:	f0 e0       	ldi	r31, 0x00	; 0
    4640:	ef cf       	rjmp	.-34     	; 0x4620 <rt_add_timer+0x80>
    4642:	e4 e0       	ldi	r30, 0x04	; 4
    4644:	f0 e0       	ldi	r31, 0x00	; 0
    4646:	ec cf       	rjmp	.-40     	; 0x4620 <rt_add_timer+0x80>
    4648:	e5 e0       	ldi	r30, 0x05	; 5
    464a:	f0 e0       	ldi	r31, 0x00	; 0
    464c:	e9 cf       	rjmp	.-46     	; 0x4620 <rt_add_timer+0x80>
    464e:	e6 e0       	ldi	r30, 0x06	; 6
    4650:	f0 e0       	ldi	r31, 0x00	; 0
    4652:	e6 cf       	rjmp	.-52     	; 0x4620 <rt_add_timer+0x80>
    4654:	e7 e0       	ldi	r30, 0x07	; 7
    4656:	f0 e0       	ldi	r31, 0x00	; 0
    4658:	e3 cf       	rjmp	.-58     	; 0x4620 <rt_add_timer+0x80>
    465a:	e8 e0       	ldi	r30, 0x08	; 8
    465c:	f0 e0       	ldi	r31, 0x00	; 0
    465e:	e0 cf       	rjmp	.-64     	; 0x4620 <rt_add_timer+0x80>
    4660:	e9 e0       	ldi	r30, 0x09	; 9
    4662:	f0 e0       	ldi	r31, 0x00	; 0
    4664:	dd cf       	rjmp	.-70     	; 0x4620 <rt_add_timer+0x80>

00004666 <rt_remove_timer>:
bool rt_remove_timer(rt_timer *atimer)
{
	uint8_t i;
	for (i=0; i<RT_MAX_TIMERS; i++)
	{
		if(rt_timer_array[i]== atimer)
    4666:	20 91 fc 02 	lds	r18, 0x02FC
    466a:	30 91 fd 02 	lds	r19, 0x02FD
    466e:	28 17       	cp	r18, r24
    4670:	39 07       	cpc	r19, r25
    4672:	09 f4       	brne	.+2      	; 0x4676 <rt_remove_timer+0x10>
    4674:	43 c0       	rjmp	.+134    	; 0x46fc <rt_remove_timer+0x96>
    4676:	20 91 fe 02 	lds	r18, 0x02FE
    467a:	30 91 ff 02 	lds	r19, 0x02FF
    467e:	28 17       	cp	r18, r24
    4680:	39 07       	cpc	r19, r25
    4682:	09 f4       	brne	.+2      	; 0x4686 <rt_remove_timer+0x20>
    4684:	45 c0       	rjmp	.+138    	; 0x4710 <rt_remove_timer+0xaa>
    4686:	20 91 00 03 	lds	r18, 0x0300
    468a:	30 91 01 03 	lds	r19, 0x0301
    468e:	28 17       	cp	r18, r24
    4690:	39 07       	cpc	r19, r25
    4692:	09 f4       	brne	.+2      	; 0x4696 <rt_remove_timer+0x30>
    4694:	40 c0       	rjmp	.+128    	; 0x4716 <rt_remove_timer+0xb0>
    4696:	20 91 02 03 	lds	r18, 0x0302
    469a:	30 91 03 03 	lds	r19, 0x0303
    469e:	28 17       	cp	r18, r24
    46a0:	39 07       	cpc	r19, r25
    46a2:	e1 f1       	breq	.+120    	; 0x471c <rt_remove_timer+0xb6>
    46a4:	20 91 04 03 	lds	r18, 0x0304
    46a8:	30 91 05 03 	lds	r19, 0x0305
    46ac:	28 17       	cp	r18, r24
    46ae:	39 07       	cpc	r19, r25
    46b0:	c1 f1       	breq	.+112    	; 0x4722 <rt_remove_timer+0xbc>
    46b2:	20 91 06 03 	lds	r18, 0x0306
    46b6:	30 91 07 03 	lds	r19, 0x0307
    46ba:	28 17       	cp	r18, r24
    46bc:	39 07       	cpc	r19, r25
    46be:	a1 f1       	breq	.+104    	; 0x4728 <rt_remove_timer+0xc2>
    46c0:	20 91 08 03 	lds	r18, 0x0308
    46c4:	30 91 09 03 	lds	r19, 0x0309
    46c8:	28 17       	cp	r18, r24
    46ca:	39 07       	cpc	r19, r25
    46cc:	81 f1       	breq	.+96     	; 0x472e <rt_remove_timer+0xc8>
    46ce:	20 91 0a 03 	lds	r18, 0x030A
    46d2:	30 91 0b 03 	lds	r19, 0x030B
    46d6:	28 17       	cp	r18, r24
    46d8:	39 07       	cpc	r19, r25
    46da:	61 f1       	breq	.+88     	; 0x4734 <rt_remove_timer+0xce>
    46dc:	20 91 0c 03 	lds	r18, 0x030C
    46e0:	30 91 0d 03 	lds	r19, 0x030D
    46e4:	28 17       	cp	r18, r24
    46e6:	39 07       	cpc	r19, r25
    46e8:	41 f1       	breq	.+80     	; 0x473a <rt_remove_timer+0xd4>
    46ea:	20 91 0e 03 	lds	r18, 0x030E
    46ee:	30 91 0f 03 	lds	r19, 0x030F
    46f2:	28 17       	cp	r18, r24
    46f4:	39 07       	cpc	r19, r25
    46f6:	21 f1       	breq	.+72     	; 0x4740 <rt_remove_timer+0xda>
		{
			rt_timer_array[i]=0;
			return TRUE;
		}
	}
	return FALSE;
    46f8:	80 e0       	ldi	r24, 0x00	; 0
}
    46fa:	08 95       	ret
bool rt_remove_timer(rt_timer *atimer)
{
	uint8_t i;
	for (i=0; i<RT_MAX_TIMERS; i++)
	{
		if(rt_timer_array[i]== atimer)
    46fc:	e0 e0       	ldi	r30, 0x00	; 0
    46fe:	f0 e0       	ldi	r31, 0x00	; 0
		{
			rt_timer_array[i]=0;
    4700:	ee 0f       	add	r30, r30
    4702:	ff 1f       	adc	r31, r31
    4704:	e4 50       	subi	r30, 0x04	; 4
    4706:	fd 4f       	sbci	r31, 0xFD	; 253
    4708:	11 82       	std	Z+1, r1	; 0x01
    470a:	10 82       	st	Z, r1
			return TRUE;
    470c:	81 e0       	ldi	r24, 0x01	; 1
    470e:	08 95       	ret
bool rt_remove_timer(rt_timer *atimer)
{
	uint8_t i;
	for (i=0; i<RT_MAX_TIMERS; i++)
	{
		if(rt_timer_array[i]== atimer)
    4710:	e1 e0       	ldi	r30, 0x01	; 1
    4712:	f0 e0       	ldi	r31, 0x00	; 0
    4714:	f5 cf       	rjmp	.-22     	; 0x4700 <rt_remove_timer+0x9a>
    4716:	e2 e0       	ldi	r30, 0x02	; 2
    4718:	f0 e0       	ldi	r31, 0x00	; 0
    471a:	f2 cf       	rjmp	.-28     	; 0x4700 <rt_remove_timer+0x9a>
    471c:	e3 e0       	ldi	r30, 0x03	; 3
    471e:	f0 e0       	ldi	r31, 0x00	; 0
    4720:	ef cf       	rjmp	.-34     	; 0x4700 <rt_remove_timer+0x9a>
    4722:	e4 e0       	ldi	r30, 0x04	; 4
    4724:	f0 e0       	ldi	r31, 0x00	; 0
    4726:	ec cf       	rjmp	.-40     	; 0x4700 <rt_remove_timer+0x9a>
    4728:	e5 e0       	ldi	r30, 0x05	; 5
    472a:	f0 e0       	ldi	r31, 0x00	; 0
    472c:	e9 cf       	rjmp	.-46     	; 0x4700 <rt_remove_timer+0x9a>
    472e:	e6 e0       	ldi	r30, 0x06	; 6
    4730:	f0 e0       	ldi	r31, 0x00	; 0
    4732:	e6 cf       	rjmp	.-52     	; 0x4700 <rt_remove_timer+0x9a>
    4734:	e7 e0       	ldi	r30, 0x07	; 7
    4736:	f0 e0       	ldi	r31, 0x00	; 0
    4738:	e3 cf       	rjmp	.-58     	; 0x4700 <rt_remove_timer+0x9a>
    473a:	e8 e0       	ldi	r30, 0x08	; 8
    473c:	f0 e0       	ldi	r31, 0x00	; 0
    473e:	e0 cf       	rjmp	.-64     	; 0x4700 <rt_remove_timer+0x9a>
    4740:	e9 e0       	ldi	r30, 0x09	; 9
    4742:	f0 e0       	ldi	r31, 0x00	; 0
    4744:	dd cf       	rjmp	.-70     	; 0x4700 <rt_remove_timer+0x9a>

00004746 <rt_add_function>:
bool rt_add_function(void(*afunction)())
{
	uint8_t i;
	for (i=0; i<RT_MAX_FUNCTIONS; i++)
	{
		if(!rt_function_array[i])
    4746:	20 91 f5 02 	lds	r18, 0x02F5
    474a:	30 91 f6 02 	lds	r19, 0x02F6
    474e:	23 2b       	or	r18, r19
    4750:	71 f0       	breq	.+28     	; 0x476e <rt_add_function+0x28>
    4752:	20 91 f7 02 	lds	r18, 0x02F7
    4756:	30 91 f8 02 	lds	r19, 0x02F8
    475a:	23 2b       	or	r18, r19
    475c:	91 f0       	breq	.+36     	; 0x4782 <rt_add_function+0x3c>
    475e:	20 91 f9 02 	lds	r18, 0x02F9
    4762:	30 91 fa 02 	lds	r19, 0x02FA
    4766:	23 2b       	or	r18, r19
    4768:	79 f0       	breq	.+30     	; 0x4788 <rt_add_function+0x42>
		{
			rt_function_array[i]=afunction;
			return TRUE;
		}
	}
	return FALSE;
    476a:	80 e0       	ldi	r24, 0x00	; 0
}
    476c:	08 95       	ret
bool rt_add_function(void(*afunction)())
{
	uint8_t i;
	for (i=0; i<RT_MAX_FUNCTIONS; i++)
	{
		if(!rt_function_array[i])
    476e:	e0 e0       	ldi	r30, 0x00	; 0
    4770:	f0 e0       	ldi	r31, 0x00	; 0
		{
			rt_function_array[i]=afunction;
    4772:	ee 0f       	add	r30, r30
    4774:	ff 1f       	adc	r31, r31
    4776:	eb 50       	subi	r30, 0x0B	; 11
    4778:	fd 4f       	sbci	r31, 0xFD	; 253
    477a:	91 83       	std	Z+1, r25	; 0x01
    477c:	80 83       	st	Z, r24
			return TRUE;
    477e:	81 e0       	ldi	r24, 0x01	; 1
    4780:	08 95       	ret
bool rt_add_function(void(*afunction)())
{
	uint8_t i;
	for (i=0; i<RT_MAX_FUNCTIONS; i++)
	{
		if(!rt_function_array[i])
    4782:	e1 e0       	ldi	r30, 0x01	; 1
    4784:	f0 e0       	ldi	r31, 0x00	; 0
    4786:	f5 cf       	rjmp	.-22     	; 0x4772 <rt_add_function+0x2c>
    4788:	e2 e0       	ldi	r30, 0x02	; 2
    478a:	f0 e0       	ldi	r31, 0x00	; 0
    478c:	f2 cf       	rjmp	.-28     	; 0x4772 <rt_add_function+0x2c>

0000478e <rt_remove_function>:
bool rt_remove_function(void(*afunction)())
{
	uint8_t i;
	for (i=0; i<RT_MAX_FUNCTIONS; i++)
	{
		if(rt_function_array[i]== afunction)
    478e:	20 91 f5 02 	lds	r18, 0x02F5
    4792:	30 91 f6 02 	lds	r19, 0x02F6
    4796:	28 17       	cp	r18, r24
    4798:	39 07       	cpc	r19, r25
    479a:	81 f0       	breq	.+32     	; 0x47bc <rt_remove_function+0x2e>
    479c:	20 91 f7 02 	lds	r18, 0x02F7
    47a0:	30 91 f8 02 	lds	r19, 0x02F8
    47a4:	28 17       	cp	r18, r24
    47a6:	39 07       	cpc	r19, r25
    47a8:	99 f0       	breq	.+38     	; 0x47d0 <rt_remove_function+0x42>
    47aa:	20 91 f9 02 	lds	r18, 0x02F9
    47ae:	30 91 fa 02 	lds	r19, 0x02FA
    47b2:	28 17       	cp	r18, r24
    47b4:	39 07       	cpc	r19, r25
    47b6:	79 f0       	breq	.+30     	; 0x47d6 <rt_remove_function+0x48>
		{
			rt_function_array[i]=0;
			return TRUE;
		}
	}
	return FALSE;
    47b8:	80 e0       	ldi	r24, 0x00	; 0
}
    47ba:	08 95       	ret
bool rt_remove_function(void(*afunction)())
{
	uint8_t i;
	for (i=0; i<RT_MAX_FUNCTIONS; i++)
	{
		if(rt_function_array[i]== afunction)
    47bc:	e0 e0       	ldi	r30, 0x00	; 0
    47be:	f0 e0       	ldi	r31, 0x00	; 0
		{
			rt_function_array[i]=0;
    47c0:	ee 0f       	add	r30, r30
    47c2:	ff 1f       	adc	r31, r31
    47c4:	eb 50       	subi	r30, 0x0B	; 11
    47c6:	fd 4f       	sbci	r31, 0xFD	; 253
    47c8:	11 82       	std	Z+1, r1	; 0x01
    47ca:	10 82       	st	Z, r1
			return TRUE;
    47cc:	81 e0       	ldi	r24, 0x01	; 1
    47ce:	08 95       	ret
bool rt_remove_function(void(*afunction)())
{
	uint8_t i;
	for (i=0; i<RT_MAX_FUNCTIONS; i++)
	{
		if(rt_function_array[i]== afunction)
    47d0:	e1 e0       	ldi	r30, 0x01	; 1
    47d2:	f0 e0       	ldi	r31, 0x00	; 0
    47d4:	f5 cf       	rjmp	.-22     	; 0x47c0 <rt_remove_function+0x32>
    47d6:	e2 e0       	ldi	r30, 0x02	; 2
    47d8:	f0 e0       	ldi	r31, 0x00	; 0
    47da:	f2 cf       	rjmp	.-28     	; 0x47c0 <rt_remove_function+0x32>

000047dc <realtime_init>:

	**********************************************/

// only used if heartbeat LED present
#ifdef RT_HEARTBEAT_LED
	digitalMode(RT_LEDPORT, RT_LEDPIN, OUTPUT);
    47dc:	3b 9a       	sbi	0x07, 3	; 7
	set_bit(TIMSK, OCIE0);	// for interrupt on Clear on Compare mode

#else // code based on 16 MHz clock, 1/100 sec. interrupts, Timer0 counter

		// clear on compare mode
		set_bit(TCCR0A, WGM01);
    47de:	84 b5       	in	r24, 0x24	; 36
    47e0:	82 60       	ori	r24, 0x02	; 2
    47e2:	84 bd       	out	0x24, r24	; 36

		// set compare value to 207 twice and 208 once (208 and 209 counts, gives 625 counts in 0.01 s)
		// counter_phase goes from 0 to 2 to keep track of which count we are doing.
		OCR0A=207;
    47e4:	8f ec       	ldi	r24, 0xCF	; 207
    47e6:	87 bd       	out	0x27, r24	; 39

		// reset counter
		TCNT0=0;
    47e8:	16 bc       	out	0x26, r1	; 38

		// enable timing on compare the interrupts
		set_bit(TIMSK0, OCIE0A);	// enable interrupt on Clear on Compare mode
    47ea:	ee e6       	ldi	r30, 0x6E	; 110
    47ec:	f0 e0       	ldi	r31, 0x00	; 0
    47ee:	80 81       	ld	r24, Z
    47f0:	82 60       	ori	r24, 0x02	; 2
    47f2:	80 83       	st	Z, r24

		// set pre-scaler to 256, this will launch the counter
		set_bit(TCCR0B, CS02); 	// prescaler to 256 (16,000,000/256=62,500 counts/second)
    47f4:	85 b5       	in	r24, 0x25	; 37
    47f6:	84 60       	ori	r24, 0x04	; 4
    47f8:	85 bd       	out	0x25, r24	; 37
#endif

	// interrupts on
	sei();
    47fa:	78 94       	sei
    47fc:	08 95       	ret

000047fe <__vector_14>:

#else
// code for ATmega168 with 16 MHz crystal, 3 interrupts for 1/100 update intervals
// Two counts to 208 and one count to 209 lasts 0.01 sec.
ISR(TIMER0_COMPA_vect)
{
    47fe:	1f 92       	push	r1
    4800:	0f 92       	push	r0
    4802:	0f b6       	in	r0, 0x3f	; 63
    4804:	0f 92       	push	r0
    4806:	11 24       	eor	r1, r1
    4808:	2f 93       	push	r18
    480a:	3f 93       	push	r19
    480c:	4f 93       	push	r20
    480e:	5f 93       	push	r21
    4810:	6f 93       	push	r22
    4812:	7f 93       	push	r23
    4814:	8f 93       	push	r24
    4816:	9f 93       	push	r25
    4818:	af 93       	push	r26
    481a:	bf 93       	push	r27
    481c:	cf 93       	push	r28
    481e:	df 93       	push	r29
    4820:	ef 93       	push	r30
    4822:	ff 93       	push	r31
	static uint8_t countseconds=0;
	static uint8_t counter_phase=0;

	// first count twice to 208
	if(counter_phase<=1)
    4824:	80 91 6c 02 	lds	r24, 0x026C
    4828:	82 30       	cpi	r24, 0x02	; 2
    482a:	08 f4       	brcc	.+2      	; 0x482e <__vector_14+0x30>
    482c:	30 c1       	rjmp	.+608    	; 0x4a8e <__vector_14+0x290>
		return;
	}
	// 3rd time count to 209
	else
	{
		OCR0A=208;
    482e:	80 ed       	ldi	r24, 0xD0	; 208
    4830:	87 bd       	out	0x27, r24	; 39
		counter_phase=0;
    4832:	10 92 6c 02 	sts	0x026C, r1

		// user timers updated at interrupt time here, but used outside this module
		rt_count1++;
    4836:	80 91 13 03 	lds	r24, 0x0313
    483a:	90 91 14 03 	lds	r25, 0x0314
    483e:	01 96       	adiw	r24, 0x01	; 1
    4840:	90 93 14 03 	sts	0x0314, r25
    4844:	80 93 13 03 	sts	0x0313, r24
		rt_count2++;
    4848:	80 91 10 03 	lds	r24, 0x0310
    484c:	90 91 11 03 	lds	r25, 0x0311
    4850:	01 96       	adiw	r24, 0x01	; 1
    4852:	90 93 11 03 	sts	0x0311, r25
    4856:	80 93 10 03 	sts	0x0310, r24
		// iterate on all timer pointers, decrement the non zero ones
		uint8_t i;
		rt_timer* timerpointer;
		for (i=0; i<RT_MAX_TIMERS; i++)
		{
			if(rt_timer_array[i])	// if non zero, it points to a registered timer
    485a:	e0 91 fc 02 	lds	r30, 0x02FC
    485e:	f0 91 fd 02 	lds	r31, 0x02FD
    4862:	30 97       	sbiw	r30, 0x00	; 0
    4864:	29 f0       	breq	.+10     	; 0x4870 <__vector_14+0x72>
			{
				// decrement it until it reaches zero
				timerpointer=rt_timer_array[i];
				if (*timerpointer) (*timerpointer)--;
    4866:	80 81       	ld	r24, Z
    4868:	91 81       	ldd	r25, Z+1	; 0x01
    486a:	89 2b       	or	r24, r25
    486c:	09 f0       	breq	.+2      	; 0x4870 <__vector_14+0x72>
    486e:	cf c0       	rjmp	.+414    	; 0x4a0e <__vector_14+0x210>
		// iterate on all timer pointers, decrement the non zero ones
		uint8_t i;
		rt_timer* timerpointer;
		for (i=0; i<RT_MAX_TIMERS; i++)
		{
			if(rt_timer_array[i])	// if non zero, it points to a registered timer
    4870:	e0 91 fe 02 	lds	r30, 0x02FE
    4874:	f0 91 ff 02 	lds	r31, 0x02FF
    4878:	30 97       	sbiw	r30, 0x00	; 0
    487a:	29 f0       	breq	.+10     	; 0x4886 <__vector_14+0x88>
			{
				// decrement it until it reaches zero
				timerpointer=rt_timer_array[i];
				if (*timerpointer) (*timerpointer)--;
    487c:	80 81       	ld	r24, Z
    487e:	91 81       	ldd	r25, Z+1	; 0x01
    4880:	89 2b       	or	r24, r25
    4882:	09 f0       	breq	.+2      	; 0x4886 <__vector_14+0x88>
    4884:	be c0       	rjmp	.+380    	; 0x4a02 <__vector_14+0x204>
		// iterate on all timer pointers, decrement the non zero ones
		uint8_t i;
		rt_timer* timerpointer;
		for (i=0; i<RT_MAX_TIMERS; i++)
		{
			if(rt_timer_array[i])	// if non zero, it points to a registered timer
    4886:	e0 91 00 03 	lds	r30, 0x0300
    488a:	f0 91 01 03 	lds	r31, 0x0301
    488e:	30 97       	sbiw	r30, 0x00	; 0
    4890:	29 f0       	breq	.+10     	; 0x489c <__vector_14+0x9e>
			{
				// decrement it until it reaches zero
				timerpointer=rt_timer_array[i];
				if (*timerpointer) (*timerpointer)--;
    4892:	80 81       	ld	r24, Z
    4894:	91 81       	ldd	r25, Z+1	; 0x01
    4896:	89 2b       	or	r24, r25
    4898:	09 f0       	breq	.+2      	; 0x489c <__vector_14+0x9e>
    489a:	ad c0       	rjmp	.+346    	; 0x49f6 <__vector_14+0x1f8>
		// iterate on all timer pointers, decrement the non zero ones
		uint8_t i;
		rt_timer* timerpointer;
		for (i=0; i<RT_MAX_TIMERS; i++)
		{
			if(rt_timer_array[i])	// if non zero, it points to a registered timer
    489c:	e0 91 02 03 	lds	r30, 0x0302
    48a0:	f0 91 03 03 	lds	r31, 0x0303
    48a4:	30 97       	sbiw	r30, 0x00	; 0
    48a6:	29 f0       	breq	.+10     	; 0x48b2 <__vector_14+0xb4>
			{
				// decrement it until it reaches zero
				timerpointer=rt_timer_array[i];
				if (*timerpointer) (*timerpointer)--;
    48a8:	80 81       	ld	r24, Z
    48aa:	91 81       	ldd	r25, Z+1	; 0x01
    48ac:	89 2b       	or	r24, r25
    48ae:	09 f0       	breq	.+2      	; 0x48b2 <__vector_14+0xb4>
    48b0:	9c c0       	rjmp	.+312    	; 0x49ea <__vector_14+0x1ec>
		// iterate on all timer pointers, decrement the non zero ones
		uint8_t i;
		rt_timer* timerpointer;
		for (i=0; i<RT_MAX_TIMERS; i++)
		{
			if(rt_timer_array[i])	// if non zero, it points to a registered timer
    48b2:	e0 91 04 03 	lds	r30, 0x0304
    48b6:	f0 91 05 03 	lds	r31, 0x0305
    48ba:	30 97       	sbiw	r30, 0x00	; 0
    48bc:	29 f0       	breq	.+10     	; 0x48c8 <__vector_14+0xca>
			{
				// decrement it until it reaches zero
				timerpointer=rt_timer_array[i];
				if (*timerpointer) (*timerpointer)--;
    48be:	80 81       	ld	r24, Z
    48c0:	91 81       	ldd	r25, Z+1	; 0x01
    48c2:	89 2b       	or	r24, r25
    48c4:	09 f0       	breq	.+2      	; 0x48c8 <__vector_14+0xca>
    48c6:	8b c0       	rjmp	.+278    	; 0x49de <__vector_14+0x1e0>
		// iterate on all timer pointers, decrement the non zero ones
		uint8_t i;
		rt_timer* timerpointer;
		for (i=0; i<RT_MAX_TIMERS; i++)
		{
			if(rt_timer_array[i])	// if non zero, it points to a registered timer
    48c8:	e0 91 06 03 	lds	r30, 0x0306
    48cc:	f0 91 07 03 	lds	r31, 0x0307
    48d0:	30 97       	sbiw	r30, 0x00	; 0
    48d2:	29 f0       	breq	.+10     	; 0x48de <__vector_14+0xe0>
			{
				// decrement it until it reaches zero
				timerpointer=rt_timer_array[i];
				if (*timerpointer) (*timerpointer)--;
    48d4:	80 81       	ld	r24, Z
    48d6:	91 81       	ldd	r25, Z+1	; 0x01
    48d8:	89 2b       	or	r24, r25
    48da:	09 f0       	breq	.+2      	; 0x48de <__vector_14+0xe0>
    48dc:	7a c0       	rjmp	.+244    	; 0x49d2 <__vector_14+0x1d4>
		// iterate on all timer pointers, decrement the non zero ones
		uint8_t i;
		rt_timer* timerpointer;
		for (i=0; i<RT_MAX_TIMERS; i++)
		{
			if(rt_timer_array[i])	// if non zero, it points to a registered timer
    48de:	e0 91 08 03 	lds	r30, 0x0308
    48e2:	f0 91 09 03 	lds	r31, 0x0309
    48e6:	30 97       	sbiw	r30, 0x00	; 0
    48e8:	29 f0       	breq	.+10     	; 0x48f4 <__vector_14+0xf6>
			{
				// decrement it until it reaches zero
				timerpointer=rt_timer_array[i];
				if (*timerpointer) (*timerpointer)--;
    48ea:	80 81       	ld	r24, Z
    48ec:	91 81       	ldd	r25, Z+1	; 0x01
    48ee:	89 2b       	or	r24, r25
    48f0:	09 f0       	breq	.+2      	; 0x48f4 <__vector_14+0xf6>
    48f2:	69 c0       	rjmp	.+210    	; 0x49c6 <__vector_14+0x1c8>
		// iterate on all timer pointers, decrement the non zero ones
		uint8_t i;
		rt_timer* timerpointer;
		for (i=0; i<RT_MAX_TIMERS; i++)
		{
			if(rt_timer_array[i])	// if non zero, it points to a registered timer
    48f4:	e0 91 0a 03 	lds	r30, 0x030A
    48f8:	f0 91 0b 03 	lds	r31, 0x030B
    48fc:	30 97       	sbiw	r30, 0x00	; 0
    48fe:	29 f0       	breq	.+10     	; 0x490a <__vector_14+0x10c>
			{
				// decrement it until it reaches zero
				timerpointer=rt_timer_array[i];
				if (*timerpointer) (*timerpointer)--;
    4900:	80 81       	ld	r24, Z
    4902:	91 81       	ldd	r25, Z+1	; 0x01
    4904:	89 2b       	or	r24, r25
    4906:	09 f0       	breq	.+2      	; 0x490a <__vector_14+0x10c>
    4908:	58 c0       	rjmp	.+176    	; 0x49ba <__vector_14+0x1bc>
		// iterate on all timer pointers, decrement the non zero ones
		uint8_t i;
		rt_timer* timerpointer;
		for (i=0; i<RT_MAX_TIMERS; i++)
		{
			if(rt_timer_array[i])	// if non zero, it points to a registered timer
    490a:	e0 91 0c 03 	lds	r30, 0x030C
    490e:	f0 91 0d 03 	lds	r31, 0x030D
    4912:	30 97       	sbiw	r30, 0x00	; 0
    4914:	29 f0       	breq	.+10     	; 0x4920 <__vector_14+0x122>
			{
				// decrement it until it reaches zero
				timerpointer=rt_timer_array[i];
				if (*timerpointer) (*timerpointer)--;
    4916:	80 81       	ld	r24, Z
    4918:	91 81       	ldd	r25, Z+1	; 0x01
    491a:	89 2b       	or	r24, r25
    491c:	09 f0       	breq	.+2      	; 0x4920 <__vector_14+0x122>
    491e:	47 c0       	rjmp	.+142    	; 0x49ae <__vector_14+0x1b0>
		// iterate on all timer pointers, decrement the non zero ones
		uint8_t i;
		rt_timer* timerpointer;
		for (i=0; i<RT_MAX_TIMERS; i++)
		{
			if(rt_timer_array[i])	// if non zero, it points to a registered timer
    4920:	e0 91 0e 03 	lds	r30, 0x030E
    4924:	f0 91 0f 03 	lds	r31, 0x030F
    4928:	30 97       	sbiw	r30, 0x00	; 0
    492a:	21 f0       	breq	.+8      	; 0x4934 <__vector_14+0x136>
			{
				// decrement it until it reaches zero
				timerpointer=rt_timer_array[i];
				if (*timerpointer) (*timerpointer)--;
    492c:	80 81       	ld	r24, Z
    492e:	91 81       	ldd	r25, Z+1	; 0x01
    4930:	89 2b       	or	r24, r25
    4932:	b9 f5       	brne	.+110    	; 0x49a2 <__vector_14+0x1a4>
			}
		}

		// do not modify the following, used for real time clock
		hundreds++;
    4934:	80 91 fb 02 	lds	r24, 0x02FB
    4938:	8f 5f       	subi	r24, 0xFF	; 255
    493a:	80 93 fb 02 	sts	0x02FB, r24
		if(hundreds==100) hundreds=0;
    493e:	80 91 fb 02 	lds	r24, 0x02FB
    4942:	84 36       	cpi	r24, 0x64	; 100
    4944:	09 f4       	brne	.+2      	; 0x4948 <__vector_14+0x14a>
    4946:	69 c0       	rjmp	.+210    	; 0x4a1a <__vector_14+0x21c>
		countseconds++;
    4948:	80 91 6b 02 	lds	r24, 0x026B
    494c:	8f 5f       	subi	r24, 0xFF	; 255
    494e:	80 93 6b 02 	sts	0x026B, r24
		if(countseconds==COUNT_PER_SECOND)
    4952:	84 36       	cpi	r24, 0x64	; 100
    4954:	09 f4       	brne	.+2      	; 0x4958 <__vector_14+0x15a>
    4956:	6b c0       	rjmp	.+214    	; 0x4a2e <__vector_14+0x230>
inline static void realtime_do()
{

// heartbeat LED to blink every second
#ifdef RT_HEARTBEAT_LED
	if (seconds & 0x0001) digitalWrite(RT_LEDPORT, RT_LEDPIN, HIGH);
    4958:	80 91 12 03 	lds	r24, 0x0312
    495c:	80 fd       	sbrc	r24, 0
    495e:	1f c0       	rjmp	.+62     	; 0x499e <__vector_14+0x1a0>
	else digitalWrite(RT_LEDPORT, RT_LEDPIN, LOW);
    4960:	43 98       	cbi	0x08, 3	; 8
    4962:	c5 ef       	ldi	r28, 0xF5	; 245
    4964:	d2 e0       	ldi	r29, 0x02	; 2

	// callback any registered realtime background function
	uint8_t i;
	for (i=0; i<RT_MAX_FUNCTIONS; i++)
	{
		if(rt_function_array[i])
    4966:	e9 91       	ld	r30, Y+
    4968:	f9 91       	ld	r31, Y+
    496a:	30 97       	sbiw	r30, 0x00	; 0
    496c:	09 f0       	breq	.+2      	; 0x4970 <__vector_14+0x172>
		{
			rt_function_array[i]();
    496e:	09 95       	icall
	else digitalWrite(RT_LEDPORT, RT_LEDPIN, LOW);
#endif

	// callback any registered realtime background function
	uint8_t i;
	for (i=0; i<RT_MAX_FUNCTIONS; i++)
    4970:	82 e0       	ldi	r24, 0x02	; 2
    4972:	cb 3f       	cpi	r28, 0xFB	; 251
    4974:	d8 07       	cpc	r29, r24
    4976:	b9 f7       	brne	.-18     	; 0x4966 <__vector_14+0x168>
		}

		// add your short real time tasks here
		realtime_do();
	}
}
    4978:	ff 91       	pop	r31
    497a:	ef 91       	pop	r30
    497c:	df 91       	pop	r29
    497e:	cf 91       	pop	r28
    4980:	bf 91       	pop	r27
    4982:	af 91       	pop	r26
    4984:	9f 91       	pop	r25
    4986:	8f 91       	pop	r24
    4988:	7f 91       	pop	r23
    498a:	6f 91       	pop	r22
    498c:	5f 91       	pop	r21
    498e:	4f 91       	pop	r20
    4990:	3f 91       	pop	r19
    4992:	2f 91       	pop	r18
    4994:	0f 90       	pop	r0
    4996:	0f be       	out	0x3f, r0	; 63
    4998:	0f 90       	pop	r0
    499a:	1f 90       	pop	r1
    499c:	18 95       	reti
inline static void realtime_do()
{

// heartbeat LED to blink every second
#ifdef RT_HEARTBEAT_LED
	if (seconds & 0x0001) digitalWrite(RT_LEDPORT, RT_LEDPIN, HIGH);
    499e:	43 9a       	sbi	0x08, 3	; 8
    49a0:	e0 cf       	rjmp	.-64     	; 0x4962 <__vector_14+0x164>
		{
			if(rt_timer_array[i])	// if non zero, it points to a registered timer
			{
				// decrement it until it reaches zero
				timerpointer=rt_timer_array[i];
				if (*timerpointer) (*timerpointer)--;
    49a2:	80 81       	ld	r24, Z
    49a4:	91 81       	ldd	r25, Z+1	; 0x01
    49a6:	01 97       	sbiw	r24, 0x01	; 1
    49a8:	91 83       	std	Z+1, r25	; 0x01
    49aa:	80 83       	st	Z, r24
    49ac:	c3 cf       	rjmp	.-122    	; 0x4934 <__vector_14+0x136>
    49ae:	80 81       	ld	r24, Z
    49b0:	91 81       	ldd	r25, Z+1	; 0x01
    49b2:	01 97       	sbiw	r24, 0x01	; 1
    49b4:	91 83       	std	Z+1, r25	; 0x01
    49b6:	80 83       	st	Z, r24
    49b8:	b3 cf       	rjmp	.-154    	; 0x4920 <__vector_14+0x122>
    49ba:	80 81       	ld	r24, Z
    49bc:	91 81       	ldd	r25, Z+1	; 0x01
    49be:	01 97       	sbiw	r24, 0x01	; 1
    49c0:	91 83       	std	Z+1, r25	; 0x01
    49c2:	80 83       	st	Z, r24
    49c4:	a2 cf       	rjmp	.-188    	; 0x490a <__vector_14+0x10c>
    49c6:	80 81       	ld	r24, Z
    49c8:	91 81       	ldd	r25, Z+1	; 0x01
    49ca:	01 97       	sbiw	r24, 0x01	; 1
    49cc:	91 83       	std	Z+1, r25	; 0x01
    49ce:	80 83       	st	Z, r24
    49d0:	91 cf       	rjmp	.-222    	; 0x48f4 <__vector_14+0xf6>
    49d2:	80 81       	ld	r24, Z
    49d4:	91 81       	ldd	r25, Z+1	; 0x01
    49d6:	01 97       	sbiw	r24, 0x01	; 1
    49d8:	91 83       	std	Z+1, r25	; 0x01
    49da:	80 83       	st	Z, r24
    49dc:	80 cf       	rjmp	.-256    	; 0x48de <__vector_14+0xe0>
    49de:	80 81       	ld	r24, Z
    49e0:	91 81       	ldd	r25, Z+1	; 0x01
    49e2:	01 97       	sbiw	r24, 0x01	; 1
    49e4:	91 83       	std	Z+1, r25	; 0x01
    49e6:	80 83       	st	Z, r24
    49e8:	6f cf       	rjmp	.-290    	; 0x48c8 <__vector_14+0xca>
    49ea:	80 81       	ld	r24, Z
    49ec:	91 81       	ldd	r25, Z+1	; 0x01
    49ee:	01 97       	sbiw	r24, 0x01	; 1
    49f0:	91 83       	std	Z+1, r25	; 0x01
    49f2:	80 83       	st	Z, r24
    49f4:	5e cf       	rjmp	.-324    	; 0x48b2 <__vector_14+0xb4>
    49f6:	80 81       	ld	r24, Z
    49f8:	91 81       	ldd	r25, Z+1	; 0x01
    49fa:	01 97       	sbiw	r24, 0x01	; 1
    49fc:	91 83       	std	Z+1, r25	; 0x01
    49fe:	80 83       	st	Z, r24
    4a00:	4d cf       	rjmp	.-358    	; 0x489c <__vector_14+0x9e>
    4a02:	80 81       	ld	r24, Z
    4a04:	91 81       	ldd	r25, Z+1	; 0x01
    4a06:	01 97       	sbiw	r24, 0x01	; 1
    4a08:	91 83       	std	Z+1, r25	; 0x01
    4a0a:	80 83       	st	Z, r24
    4a0c:	3c cf       	rjmp	.-392    	; 0x4886 <__vector_14+0x88>
    4a0e:	80 81       	ld	r24, Z
    4a10:	91 81       	ldd	r25, Z+1	; 0x01
    4a12:	01 97       	sbiw	r24, 0x01	; 1
    4a14:	91 83       	std	Z+1, r25	; 0x01
    4a16:	80 83       	st	Z, r24
    4a18:	2b cf       	rjmp	.-426    	; 0x4870 <__vector_14+0x72>
			}
		}

		// do not modify the following, used for real time clock
		hundreds++;
		if(hundreds==100) hundreds=0;
    4a1a:	10 92 fb 02 	sts	0x02FB, r1
		countseconds++;
    4a1e:	80 91 6b 02 	lds	r24, 0x026B
    4a22:	8f 5f       	subi	r24, 0xFF	; 255
    4a24:	80 93 6b 02 	sts	0x026B, r24
		if(countseconds==COUNT_PER_SECOND)
    4a28:	84 36       	cpi	r24, 0x64	; 100
    4a2a:	09 f0       	breq	.+2      	; 0x4a2e <__vector_14+0x230>
    4a2c:	95 cf       	rjmp	.-214    	; 0x4958 <__vector_14+0x15a>
		{
			rt_seconds++;
    4a2e:	80 91 f3 02 	lds	r24, 0x02F3
    4a32:	90 91 f4 02 	lds	r25, 0x02F4
    4a36:	01 96       	adiw	r24, 0x01	; 1
    4a38:	90 93 f4 02 	sts	0x02F4, r25
    4a3c:	80 93 f3 02 	sts	0x02F3, r24
			countseconds=0;
    4a40:	10 92 6b 02 	sts	0x026B, r1
	}
}

inline static void increment_time()
{
	seconds ++;
    4a44:	80 91 12 03 	lds	r24, 0x0312
    4a48:	8f 5f       	subi	r24, 0xFF	; 255
    4a4a:	80 93 12 03 	sts	0x0312, r24

	if (seconds==60)
    4a4e:	80 91 12 03 	lds	r24, 0x0312
    4a52:	8c 33       	cpi	r24, 0x3C	; 60
    4a54:	09 f0       	breq	.+2      	; 0x4a58 <__vector_14+0x25a>
    4a56:	80 cf       	rjmp	.-256    	; 0x4958 <__vector_14+0x15a>
	{
		seconds=0;
    4a58:	10 92 12 03 	sts	0x0312, r1
		minutes++;
    4a5c:	80 91 15 03 	lds	r24, 0x0315
    4a60:	8f 5f       	subi	r24, 0xFF	; 255
    4a62:	80 93 15 03 	sts	0x0315, r24
		if (minutes==60)
    4a66:	80 91 15 03 	lds	r24, 0x0315
    4a6a:	8c 33       	cpi	r24, 0x3C	; 60
    4a6c:	09 f0       	breq	.+2      	; 0x4a70 <__vector_14+0x272>
    4a6e:	74 cf       	rjmp	.-280    	; 0x4958 <__vector_14+0x15a>
		{
			minutes=0;
    4a70:	10 92 15 03 	sts	0x0315, r1
			hours++;
    4a74:	80 91 16 03 	lds	r24, 0x0316
    4a78:	8f 5f       	subi	r24, 0xFF	; 255
    4a7a:	80 93 16 03 	sts	0x0316, r24
			if (hours==24)
    4a7e:	80 91 16 03 	lds	r24, 0x0316
    4a82:	88 31       	cpi	r24, 0x18	; 24
    4a84:	09 f0       	breq	.+2      	; 0x4a88 <__vector_14+0x28a>
    4a86:	68 cf       	rjmp	.-304    	; 0x4958 <__vector_14+0x15a>
			{
				hours=0;
    4a88:	10 92 16 03 	sts	0x0316, r1
    4a8c:	65 cf       	rjmp	.-310    	; 0x4958 <__vector_14+0x15a>
	static uint8_t counter_phase=0;

	// first count twice to 208
	if(counter_phase<=1)
	{
		OCR0A=207;
    4a8e:	8f ec       	ldi	r24, 0xCF	; 207
    4a90:	87 bd       	out	0x27, r24	; 39
		counter_phase++;
    4a92:	80 91 6c 02 	lds	r24, 0x026C
    4a96:	8f 5f       	subi	r24, 0xFF	; 255
    4a98:	80 93 6c 02 	sts	0x026C, r24
		return;
    4a9c:	6d cf       	rjmp	.-294    	; 0x4978 <__vector_14+0x17a>

00004a9e <seq_dosequence>:
* Alternately if you do not want to use the realtime.c module, you can call this
* directly every 1/100s using your own timer method
**********************************************/

void seq_dosequence()
{
    4a9e:	cf 92       	push	r12
    4aa0:	df 92       	push	r13
    4aa2:	ef 92       	push	r14
    4aa4:	ff 92       	push	r15
    4aa6:	0f 93       	push	r16
    4aa8:	1f 93       	push	r17
    4aaa:	cf 93       	push	r28
    4aac:	df 93       	push	r29
    4aae:	1f 92       	push	r1
    4ab0:	cd b7       	in	r28, 0x3d	; 61
    4ab2:	de b7       	in	r29, 0x3e	; 62
	// do nothing unless sequencer explicitly started
	if(!sequence_started) return;
    4ab4:	80 91 70 02 	lds	r24, 0x0270
    4ab8:	88 23       	and	r24, r24
    4aba:	09 f4       	brne	.+2      	; 0x4abe <seq_dosequence+0x20>
    4abc:	28 c1       	rjmp	.+592    	; 0x4d0e <seq_dosequence+0x270>
	// sequence array pointer not set, return
	if(!sequence_array) return;
    4abe:	80 91 6e 02 	lds	r24, 0x026E
    4ac2:	90 91 6f 02 	lds	r25, 0x026F
    4ac6:	89 2b       	or	r24, r25
    4ac8:	09 f4       	brne	.+2      	; 0x4acc <seq_dosequence+0x2e>
    4aca:	21 c1       	rjmp	.+578    	; 0x4d0e <seq_dosequence+0x270>
    4acc:	02 e7       	ldi	r16, 0x72	; 114
    4ace:	12 e0       	ldi	r17, 0x02	; 2
    4ad0:	91 e0       	ldi	r25, 0x01	; 1
    4ad2:	c1 2c       	mov	r12, r1
    4ad4:	d1 2c       	mov	r13, r1
    4ad6:	23 c0       	rjmp	.+70     	; 0x4b1e <seq_dosequence+0x80>
		if (delta==0) continue;				// if goal position already reached, nothing to do

		// speed code 0 means no speed limit
		// SERVO_NO_PULSE means waking up, we have no valid current position info
		// so we must update it instantly too.
		if (maxspeed==0 || seq_current[i]==SERVO_NO_PULSE)
    4ad8:	60 81       	ld	r22, Z
    4ada:	71 81       	ldd	r23, Z+1	; 0x01
    4adc:	6f 3f       	cpi	r22, 0xFF	; 255
    4ade:	7f 4f       	sbci	r23, 0xFF	; 255
    4ae0:	b1 f1       	breq	.+108    	; 0x4b4e <seq_dosequence+0xb0>
			seq_current[i]=seq_goal[i];		// set current position=goal
			servo_set(i+1, seq_current[i]); // update actual servo position
		}
		else	// get closer to goal maxspeed at a time
		{
			if(delta>0)
    4ae2:	12 16       	cp	r1, r18
    4ae4:	13 06       	cpc	r1, r19
    4ae6:	0c f0       	brlt	.+2      	; 0x4aea <seq_dosequence+0x4c>
    4ae8:	1c c1       	rjmp	.+568    	; 0x4d22 <seq_dosequence+0x284>
			{
				if(delta>maxspeed) seq_current[i]=seq_current[i]+maxspeed;
    4aea:	e2 16       	cp	r14, r18
    4aec:	f3 06       	cpc	r15, r19
    4aee:	0c f0       	brlt	.+2      	; 0x4af2 <seq_dosequence+0x54>
    4af0:	1b c1       	rjmp	.+566    	; 0x4d28 <seq_dosequence+0x28a>
    4af2:	20 81       	ld	r18, Z
    4af4:	31 81       	ldd	r19, Z+1	; 0x01
    4af6:	2e 0d       	add	r18, r14
    4af8:	3f 1d       	adc	r19, r15
    4afa:	31 83       	std	Z+1, r19	; 0x01
    4afc:	20 83       	st	Z, r18
			{
				if(delta<maxspeed) seq_current[i]=seq_current[i]-maxspeed;
				else seq_current[i]=seq_goal[i];
			}

			servo_set(i+1, seq_current[i]); // update actual servo position
    4afe:	fa 01       	movw	r30, r20
    4b00:	e9 5e       	subi	r30, 0xE9	; 233
    4b02:	fc 4f       	sbci	r31, 0xFC	; 252
    4b04:	60 81       	ld	r22, Z
    4b06:	71 81       	ldd	r23, Z+1	; 0x01
    4b08:	89 2f       	mov	r24, r25
    4b0a:	99 83       	std	Y+1, r25	; 0x01
    4b0c:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <servo_set>
    4b10:	99 81       	ldd	r25, Y+1	; 0x01
    4b12:	ef ef       	ldi	r30, 0xFF	; 255
    4b14:	ce 1a       	sub	r12, r30
    4b16:	de 0a       	sbc	r13, r30
    4b18:	9f 5f       	subi	r25, 0xFF	; 255
	// the first part of this function just updates the servo position
	// towards the goal position at the maximum speed allowed
	uint8_t i;
	int16_t maxspeed;
	int16_t delta;
	for(i=0; i<SERVO_NUM; i++)
    4b1a:	9b 30       	cpi	r25, 0x0B	; 11
    4b1c:	19 f1       	breq	.+70     	; 0x4b64 <seq_dosequence+0xc6>
	{
		maxspeed=servo_speed[i];			// read servo speed
    4b1e:	f8 01       	movw	r30, r16
    4b20:	e1 90       	ld	r14, Z+
    4b22:	f1 90       	ld	r15, Z+
    4b24:	8f 01       	movw	r16, r30
		delta=seq_goal[i]-seq_current[i];	// calculate difference between goal and current
    4b26:	a6 01       	movw	r20, r12
    4b28:	44 0f       	add	r20, r20
    4b2a:	55 1f       	adc	r21, r21
    4b2c:	da 01       	movw	r26, r20
    4b2e:	a3 5d       	subi	r26, 0xD3	; 211
    4b30:	bc 4f       	sbci	r27, 0xFC	; 252
    4b32:	2d 91       	ld	r18, X+
    4b34:	3c 91       	ld	r19, X
    4b36:	11 97       	sbiw	r26, 0x01	; 1
    4b38:	fa 01       	movw	r30, r20
    4b3a:	e9 5e       	subi	r30, 0xE9	; 233
    4b3c:	fc 4f       	sbci	r31, 0xFC	; 252
    4b3e:	60 81       	ld	r22, Z
    4b40:	71 81       	ldd	r23, Z+1	; 0x01
    4b42:	26 1b       	sub	r18, r22
    4b44:	37 0b       	sbc	r19, r23
		if (delta==0) continue;				// if goal position already reached, nothing to do
    4b46:	29 f3       	breq	.-54     	; 0x4b12 <seq_dosequence+0x74>

		// speed code 0 means no speed limit
		// SERVO_NO_PULSE means waking up, we have no valid current position info
		// so we must update it instantly too.
		if (maxspeed==0 || seq_current[i]==SERVO_NO_PULSE)
    4b48:	e1 14       	cp	r14, r1
    4b4a:	f1 04       	cpc	r15, r1
    4b4c:	29 f6       	brne	.-118    	; 0x4ad8 <seq_dosequence+0x3a>
		{
			seq_current[i]=seq_goal[i];		// set current position=goal
    4b4e:	fa 01       	movw	r30, r20
    4b50:	e3 5d       	subi	r30, 0xD3	; 211
    4b52:	fc 4f       	sbci	r31, 0xFC	; 252
    4b54:	20 81       	ld	r18, Z
    4b56:	31 81       	ldd	r19, Z+1	; 0x01
    4b58:	fa 01       	movw	r30, r20
    4b5a:	e9 5e       	subi	r30, 0xE9	; 233
    4b5c:	fc 4f       	sbci	r31, 0xFC	; 252
    4b5e:	31 83       	std	Z+1, r19	; 0x01
    4b60:	20 83       	st	Z, r18
    4b62:	d0 cf       	rjmp	.-96     	; 0x4b04 <seq_dosequence+0x66>
		}
	}

	// This second part now run the sequence

	if(!seq_timeout==0) return; // wait until previous step has finished
    4b64:	80 91 41 03 	lds	r24, 0x0341
    4b68:	90 91 42 03 	lds	r25, 0x0342
    4b6c:	89 2b       	or	r24, r25
    4b6e:	09 f0       	breq	.+2      	; 0x4b72 <seq_dosequence+0xd4>
    4b70:	ce c0       	rjmp	.+412    	; 0x4d0e <seq_dosequence+0x270>

	// step has finished, go to next sequence step
	if (sequence_step<sequence_length-1) // normal step
    4b72:	50 91 71 02 	lds	r21, 0x0271
    4b76:	40 91 6d 02 	lds	r20, 0x026D
    4b7a:	25 2f       	mov	r18, r21
    4b7c:	30 e0       	ldi	r19, 0x00	; 0
    4b7e:	84 2f       	mov	r24, r20
    4b80:	90 e0       	ldi	r25, 0x00	; 0
    4b82:	01 97       	sbiw	r24, 0x01	; 1
    4b84:	00 91 6e 02 	lds	r16, 0x026E
    4b88:	10 91 6f 02 	lds	r17, 0x026F
    4b8c:	28 17       	cp	r18, r24
    4b8e:	39 07       	cpc	r19, r25
    4b90:	0c f4       	brge	.+2      	; 0x4b94 <seq_dosequence+0xf6>
    4b92:	86 c1       	rjmp	.+780    	; 0x4ea0 <seq_dosequence+0x402>
	}
	else // last step
	{
		// if last step time is zero, means stop

		if(!pgm_read_word(&(sequence_array[sequence_length-1][0])))
    4b94:	f8 01       	movw	r30, r16
    4b96:	26 e1       	ldi	r18, 0x16	; 22
    4b98:	42 9f       	mul	r20, r18
    4b9a:	e0 0d       	add	r30, r0
    4b9c:	f1 1d       	adc	r31, r1
    4b9e:	11 24       	eor	r1, r1
    4ba0:	76 97       	sbiw	r30, 0x16	; 22
    4ba2:	85 91       	lpm	r24, Z+
    4ba4:	94 91       	lpm	r25, Z
		{
			seq_setservopos(sequence_array, sequence_length-1);
    4ba6:	41 50       	subi	r20, 0x01	; 1
	}
	else // last step
	{
		// if last step time is zero, means stop

		if(!pgm_read_word(&(sequence_array[sequence_length-1][0])))
    4ba8:	89 2b       	or	r24, r25
    4baa:	09 f4       	brne	.+2      	; 0x4bae <seq_dosequence+0x110>
    4bac:	c9 c0       	rjmp	.+402    	; 0x4d40 <seq_dosequence+0x2a2>
    4bae:	f6 e1       	ldi	r31, 0x16	; 22
    4bb0:	4f 9f       	mul	r20, r31
    4bb2:	00 0d       	add	r16, r0
    4bb4:	11 1d       	adc	r17, r1
    4bb6:	11 24       	eor	r1, r1
	// and are calculated from the servo goal and servo speed values.

	for (i=1; i<=SERVO_NUM; i++)
	{
		// just udpate the goals, but not the position of the servos directly
		seq_goal[i-1]=pgm_read_word(&(array[step][i]));
    4bb8:	f8 01       	movw	r30, r16
    4bba:	32 96       	adiw	r30, 0x02	; 2
    4bbc:	85 91       	lpm	r24, Z+
    4bbe:	94 91       	lpm	r25, Z
    4bc0:	90 93 2e 03 	sts	0x032E, r25
    4bc4:	80 93 2d 03 	sts	0x032D, r24
		// cutting off servo pulses is the only immediate servo assignment
		if(seq_goal[i-1]==SERVO_NO_PULSE){servo_set(i,SERVO_NO_PULSE);
    4bc8:	80 91 2d 03 	lds	r24, 0x032D
    4bcc:	90 91 2e 03 	lds	r25, 0x032E
    4bd0:	01 96       	adiw	r24, 0x01	; 1
    4bd2:	09 f4       	brne	.+2      	; 0x4bd6 <seq_dosequence+0x138>
    4bd4:	15 c2       	rjmp	.+1066   	; 0x5000 <seq_dosequence+0x562>
	// and are calculated from the servo goal and servo speed values.

	for (i=1; i<=SERVO_NUM; i++)
	{
		// just udpate the goals, but not the position of the servos directly
		seq_goal[i-1]=pgm_read_word(&(array[step][i]));
    4bd6:	f8 01       	movw	r30, r16
    4bd8:	34 96       	adiw	r30, 0x04	; 4
    4bda:	85 91       	lpm	r24, Z+
    4bdc:	94 91       	lpm	r25, Z
    4bde:	90 93 30 03 	sts	0x0330, r25
    4be2:	80 93 2f 03 	sts	0x032F, r24
		// cutting off servo pulses is the only immediate servo assignment
		if(seq_goal[i-1]==SERVO_NO_PULSE){servo_set(i,SERVO_NO_PULSE);
    4be6:	80 91 2f 03 	lds	r24, 0x032F
    4bea:	90 91 30 03 	lds	r25, 0x0330
    4bee:	01 96       	adiw	r24, 0x01	; 1
    4bf0:	09 f4       	brne	.+2      	; 0x4bf4 <seq_dosequence+0x156>
    4bf2:	78 c2       	rjmp	.+1264   	; 0x50e4 <seq_dosequence+0x646>
	// and are calculated from the servo goal and servo speed values.

	for (i=1; i<=SERVO_NUM; i++)
	{
		// just udpate the goals, but not the position of the servos directly
		seq_goal[i-1]=pgm_read_word(&(array[step][i]));
    4bf4:	f8 01       	movw	r30, r16
    4bf6:	36 96       	adiw	r30, 0x06	; 6
    4bf8:	85 91       	lpm	r24, Z+
    4bfa:	94 91       	lpm	r25, Z
    4bfc:	90 93 32 03 	sts	0x0332, r25
    4c00:	80 93 31 03 	sts	0x0331, r24
		// cutting off servo pulses is the only immediate servo assignment
		if(seq_goal[i-1]==SERVO_NO_PULSE){servo_set(i,SERVO_NO_PULSE);
    4c04:	80 91 31 03 	lds	r24, 0x0331
    4c08:	90 91 32 03 	lds	r25, 0x0332
    4c0c:	01 96       	adiw	r24, 0x01	; 1
    4c0e:	09 f4       	brne	.+2      	; 0x4c12 <seq_dosequence+0x174>
    4c10:	63 c2       	rjmp	.+1222   	; 0x50d8 <seq_dosequence+0x63a>
	// and are calculated from the servo goal and servo speed values.

	for (i=1; i<=SERVO_NUM; i++)
	{
		// just udpate the goals, but not the position of the servos directly
		seq_goal[i-1]=pgm_read_word(&(array[step][i]));
    4c12:	f8 01       	movw	r30, r16
    4c14:	38 96       	adiw	r30, 0x08	; 8
    4c16:	85 91       	lpm	r24, Z+
    4c18:	94 91       	lpm	r25, Z
    4c1a:	90 93 34 03 	sts	0x0334, r25
    4c1e:	80 93 33 03 	sts	0x0333, r24
		// cutting off servo pulses is the only immediate servo assignment
		if(seq_goal[i-1]==SERVO_NO_PULSE){servo_set(i,SERVO_NO_PULSE);
    4c22:	80 91 33 03 	lds	r24, 0x0333
    4c26:	90 91 34 03 	lds	r25, 0x0334
    4c2a:	01 96       	adiw	r24, 0x01	; 1
    4c2c:	09 f4       	brne	.+2      	; 0x4c30 <seq_dosequence+0x192>
    4c2e:	4e c2       	rjmp	.+1180   	; 0x50cc <seq_dosequence+0x62e>
	// and are calculated from the servo goal and servo speed values.

	for (i=1; i<=SERVO_NUM; i++)
	{
		// just udpate the goals, but not the position of the servos directly
		seq_goal[i-1]=pgm_read_word(&(array[step][i]));
    4c30:	f8 01       	movw	r30, r16
    4c32:	3a 96       	adiw	r30, 0x0a	; 10
    4c34:	85 91       	lpm	r24, Z+
    4c36:	94 91       	lpm	r25, Z
    4c38:	90 93 36 03 	sts	0x0336, r25
    4c3c:	80 93 35 03 	sts	0x0335, r24
		// cutting off servo pulses is the only immediate servo assignment
		if(seq_goal[i-1]==SERVO_NO_PULSE){servo_set(i,SERVO_NO_PULSE);
    4c40:	80 91 35 03 	lds	r24, 0x0335
    4c44:	90 91 36 03 	lds	r25, 0x0336
    4c48:	01 96       	adiw	r24, 0x01	; 1
    4c4a:	09 f4       	brne	.+2      	; 0x4c4e <seq_dosequence+0x1b0>
    4c4c:	39 c2       	rjmp	.+1138   	; 0x50c0 <seq_dosequence+0x622>
	// and are calculated from the servo goal and servo speed values.

	for (i=1; i<=SERVO_NUM; i++)
	{
		// just udpate the goals, but not the position of the servos directly
		seq_goal[i-1]=pgm_read_word(&(array[step][i]));
    4c4e:	f8 01       	movw	r30, r16
    4c50:	3c 96       	adiw	r30, 0x0c	; 12
    4c52:	85 91       	lpm	r24, Z+
    4c54:	94 91       	lpm	r25, Z
    4c56:	90 93 38 03 	sts	0x0338, r25
    4c5a:	80 93 37 03 	sts	0x0337, r24
		// cutting off servo pulses is the only immediate servo assignment
		if(seq_goal[i-1]==SERVO_NO_PULSE){servo_set(i,SERVO_NO_PULSE);
    4c5e:	80 91 37 03 	lds	r24, 0x0337
    4c62:	90 91 38 03 	lds	r25, 0x0338
    4c66:	01 96       	adiw	r24, 0x01	; 1
    4c68:	09 f4       	brne	.+2      	; 0x4c6c <seq_dosequence+0x1ce>
    4c6a:	24 c2       	rjmp	.+1096   	; 0x50b4 <seq_dosequence+0x616>
	// and are calculated from the servo goal and servo speed values.

	for (i=1; i<=SERVO_NUM; i++)
	{
		// just udpate the goals, but not the position of the servos directly
		seq_goal[i-1]=pgm_read_word(&(array[step][i]));
    4c6c:	f8 01       	movw	r30, r16
    4c6e:	3e 96       	adiw	r30, 0x0e	; 14
    4c70:	85 91       	lpm	r24, Z+
    4c72:	94 91       	lpm	r25, Z
    4c74:	90 93 3a 03 	sts	0x033A, r25
    4c78:	80 93 39 03 	sts	0x0339, r24
		// cutting off servo pulses is the only immediate servo assignment
		if(seq_goal[i-1]==SERVO_NO_PULSE){servo_set(i,SERVO_NO_PULSE);
    4c7c:	80 91 39 03 	lds	r24, 0x0339
    4c80:	90 91 3a 03 	lds	r25, 0x033A
    4c84:	01 96       	adiw	r24, 0x01	; 1
    4c86:	09 f4       	brne	.+2      	; 0x4c8a <seq_dosequence+0x1ec>
    4c88:	0f c2       	rjmp	.+1054   	; 0x50a8 <seq_dosequence+0x60a>
	// and are calculated from the servo goal and servo speed values.

	for (i=1; i<=SERVO_NUM; i++)
	{
		// just udpate the goals, but not the position of the servos directly
		seq_goal[i-1]=pgm_read_word(&(array[step][i]));
    4c8a:	f8 01       	movw	r30, r16
    4c8c:	70 96       	adiw	r30, 0x10	; 16
    4c8e:	85 91       	lpm	r24, Z+
    4c90:	94 91       	lpm	r25, Z
    4c92:	90 93 3c 03 	sts	0x033C, r25
    4c96:	80 93 3b 03 	sts	0x033B, r24
		// cutting off servo pulses is the only immediate servo assignment
		if(seq_goal[i-1]==SERVO_NO_PULSE){servo_set(i,SERVO_NO_PULSE);
    4c9a:	80 91 3b 03 	lds	r24, 0x033B
    4c9e:	90 91 3c 03 	lds	r25, 0x033C
    4ca2:	01 96       	adiw	r24, 0x01	; 1
    4ca4:	09 f4       	brne	.+2      	; 0x4ca8 <seq_dosequence+0x20a>
    4ca6:	fa c1       	rjmp	.+1012   	; 0x509c <seq_dosequence+0x5fe>
	// and are calculated from the servo goal and servo speed values.

	for (i=1; i<=SERVO_NUM; i++)
	{
		// just udpate the goals, but not the position of the servos directly
		seq_goal[i-1]=pgm_read_word(&(array[step][i]));
    4ca8:	f8 01       	movw	r30, r16
    4caa:	72 96       	adiw	r30, 0x12	; 18
    4cac:	85 91       	lpm	r24, Z+
    4cae:	94 91       	lpm	r25, Z
    4cb0:	90 93 3e 03 	sts	0x033E, r25
    4cb4:	80 93 3d 03 	sts	0x033D, r24
		// cutting off servo pulses is the only immediate servo assignment
		if(seq_goal[i-1]==SERVO_NO_PULSE){servo_set(i,SERVO_NO_PULSE);
    4cb8:	80 91 3d 03 	lds	r24, 0x033D
    4cbc:	90 91 3e 03 	lds	r25, 0x033E
    4cc0:	01 96       	adiw	r24, 0x01	; 1
    4cc2:	09 f4       	brne	.+2      	; 0x4cc6 <seq_dosequence+0x228>
    4cc4:	e5 c1       	rjmp	.+970    	; 0x5090 <seq_dosequence+0x5f2>
	// and are calculated from the servo goal and servo speed values.

	for (i=1; i<=SERVO_NUM; i++)
	{
		// just udpate the goals, but not the position of the servos directly
		seq_goal[i-1]=pgm_read_word(&(array[step][i]));
    4cc6:	f8 01       	movw	r30, r16
    4cc8:	74 96       	adiw	r30, 0x14	; 20
    4cca:	85 91       	lpm	r24, Z+
    4ccc:	94 91       	lpm	r25, Z
    4cce:	90 93 40 03 	sts	0x0340, r25
    4cd2:	80 93 3f 03 	sts	0x033F, r24
		// cutting off servo pulses is the only immediate servo assignment
		if(seq_goal[i-1]==SERVO_NO_PULSE){servo_set(i,SERVO_NO_PULSE);
    4cd6:	80 91 3f 03 	lds	r24, 0x033F
    4cda:	90 91 40 03 	lds	r25, 0x0340
    4cde:	01 96       	adiw	r24, 0x01	; 1
    4ce0:	09 f4       	brne	.+2      	; 0x4ce4 <seq_dosequence+0x246>
    4ce2:	d0 c1       	rjmp	.+928    	; 0x5084 <seq_dosequence+0x5e6>
			if(seq_completion_callback) seq_completion_callback();
		}
		else // it's a looping sequence, just rewind sequence step to 0
		{
			seq_setservopos(sequence_array, sequence_length-1);
			seq_timeout=pgm_read_word(&(sequence_array[sequence_length-1][0]));
    4ce4:	80 91 6d 02 	lds	r24, 0x026D
    4ce8:	e6 e1       	ldi	r30, 0x16	; 22
    4cea:	8e 9f       	mul	r24, r30
    4cec:	c0 01       	movw	r24, r0
    4cee:	11 24       	eor	r1, r1
    4cf0:	46 97       	sbiw	r24, 0x16	; 22
    4cf2:	e0 91 6e 02 	lds	r30, 0x026E
    4cf6:	f0 91 6f 02 	lds	r31, 0x026F
    4cfa:	e8 0f       	add	r30, r24
    4cfc:	f9 1f       	adc	r31, r25
    4cfe:	85 91       	lpm	r24, Z+
    4d00:	94 91       	lpm	r25, Z
    4d02:	90 93 42 03 	sts	0x0342, r25
    4d06:	80 93 41 03 	sts	0x0341, r24
			sequence_step=0;
    4d0a:	10 92 71 02 	sts	0x0271, r1
		}
	}
}
    4d0e:	0f 90       	pop	r0
    4d10:	df 91       	pop	r29
    4d12:	cf 91       	pop	r28
    4d14:	1f 91       	pop	r17
    4d16:	0f 91       	pop	r16
    4d18:	ff 90       	pop	r15
    4d1a:	ef 90       	pop	r14
    4d1c:	df 90       	pop	r13
    4d1e:	cf 90       	pop	r12
    4d20:	08 95       	ret
				if(delta>maxspeed) seq_current[i]=seq_current[i]+maxspeed;
				else seq_current[i]=seq_goal[i];
			}
			else
			{
				if(delta<maxspeed) seq_current[i]=seq_current[i]-maxspeed;
    4d22:	2e 15       	cp	r18, r14
    4d24:	3f 05       	cpc	r19, r15
    4d26:	2c f0       	brlt	.+10     	; 0x4d32 <seq_dosequence+0x294>
				else seq_current[i]=seq_goal[i];
    4d28:	2d 91       	ld	r18, X+
    4d2a:	3c 91       	ld	r19, X
    4d2c:	31 83       	std	Z+1, r19	; 0x01
    4d2e:	20 83       	st	Z, r18
    4d30:	e6 ce       	rjmp	.-564    	; 0x4afe <seq_dosequence+0x60>
				if(delta>maxspeed) seq_current[i]=seq_current[i]+maxspeed;
				else seq_current[i]=seq_goal[i];
			}
			else
			{
				if(delta<maxspeed) seq_current[i]=seq_current[i]-maxspeed;
    4d32:	20 81       	ld	r18, Z
    4d34:	31 81       	ldd	r19, Z+1	; 0x01
    4d36:	2e 19       	sub	r18, r14
    4d38:	3f 09       	sbc	r19, r15
    4d3a:	31 83       	std	Z+1, r19	; 0x01
    4d3c:	20 83       	st	Z, r18
    4d3e:	df ce       	rjmp	.-578    	; 0x4afe <seq_dosequence+0x60>
    4d40:	86 e1       	ldi	r24, 0x16	; 22
    4d42:	48 9f       	mul	r20, r24
    4d44:	00 0d       	add	r16, r0
    4d46:	11 1d       	adc	r17, r1
    4d48:	11 24       	eor	r1, r1
	// and are calculated from the servo goal and servo speed values.

	for (i=1; i<=SERVO_NUM; i++)
	{
		// just udpate the goals, but not the position of the servos directly
		seq_goal[i-1]=pgm_read_word(&(array[step][i]));
    4d4a:	f8 01       	movw	r30, r16
    4d4c:	32 96       	adiw	r30, 0x02	; 2
    4d4e:	85 91       	lpm	r24, Z+
    4d50:	94 91       	lpm	r25, Z
    4d52:	90 93 2e 03 	sts	0x032E, r25
    4d56:	80 93 2d 03 	sts	0x032D, r24
		// cutting off servo pulses is the only immediate servo assignment
		if(seq_goal[i-1]==SERVO_NO_PULSE){servo_set(i,SERVO_NO_PULSE);
    4d5a:	80 91 2d 03 	lds	r24, 0x032D
    4d5e:	90 91 2e 03 	lds	r25, 0x032E
    4d62:	01 96       	adiw	r24, 0x01	; 1
    4d64:	09 f4       	brne	.+2      	; 0x4d68 <seq_dosequence+0x2ca>
    4d66:	88 c1       	rjmp	.+784    	; 0x5078 <seq_dosequence+0x5da>
	// and are calculated from the servo goal and servo speed values.

	for (i=1; i<=SERVO_NUM; i++)
	{
		// just udpate the goals, but not the position of the servos directly
		seq_goal[i-1]=pgm_read_word(&(array[step][i]));
    4d68:	f8 01       	movw	r30, r16
    4d6a:	34 96       	adiw	r30, 0x04	; 4
    4d6c:	85 91       	lpm	r24, Z+
    4d6e:	94 91       	lpm	r25, Z
    4d70:	90 93 30 03 	sts	0x0330, r25
    4d74:	80 93 2f 03 	sts	0x032F, r24
		// cutting off servo pulses is the only immediate servo assignment
		if(seq_goal[i-1]==SERVO_NO_PULSE){servo_set(i,SERVO_NO_PULSE);
    4d78:	80 91 2f 03 	lds	r24, 0x032F
    4d7c:	90 91 30 03 	lds	r25, 0x0330
    4d80:	01 96       	adiw	r24, 0x01	; 1
    4d82:	09 f4       	brne	.+2      	; 0x4d86 <seq_dosequence+0x2e8>
    4d84:	73 c1       	rjmp	.+742    	; 0x506c <seq_dosequence+0x5ce>
	// and are calculated from the servo goal and servo speed values.

	for (i=1; i<=SERVO_NUM; i++)
	{
		// just udpate the goals, but not the position of the servos directly
		seq_goal[i-1]=pgm_read_word(&(array[step][i]));
    4d86:	f8 01       	movw	r30, r16
    4d88:	36 96       	adiw	r30, 0x06	; 6
    4d8a:	85 91       	lpm	r24, Z+
    4d8c:	94 91       	lpm	r25, Z
    4d8e:	90 93 32 03 	sts	0x0332, r25
    4d92:	80 93 31 03 	sts	0x0331, r24
		// cutting off servo pulses is the only immediate servo assignment
		if(seq_goal[i-1]==SERVO_NO_PULSE){servo_set(i,SERVO_NO_PULSE);
    4d96:	80 91 31 03 	lds	r24, 0x0331
    4d9a:	90 91 32 03 	lds	r25, 0x0332
    4d9e:	01 96       	adiw	r24, 0x01	; 1
    4da0:	09 f4       	brne	.+2      	; 0x4da4 <seq_dosequence+0x306>
    4da2:	5e c1       	rjmp	.+700    	; 0x5060 <seq_dosequence+0x5c2>
	// and are calculated from the servo goal and servo speed values.

	for (i=1; i<=SERVO_NUM; i++)
	{
		// just udpate the goals, but not the position of the servos directly
		seq_goal[i-1]=pgm_read_word(&(array[step][i]));
    4da4:	f8 01       	movw	r30, r16
    4da6:	38 96       	adiw	r30, 0x08	; 8
    4da8:	85 91       	lpm	r24, Z+
    4daa:	94 91       	lpm	r25, Z
    4dac:	90 93 34 03 	sts	0x0334, r25
    4db0:	80 93 33 03 	sts	0x0333, r24
		// cutting off servo pulses is the only immediate servo assignment
		if(seq_goal[i-1]==SERVO_NO_PULSE){servo_set(i,SERVO_NO_PULSE);
    4db4:	80 91 33 03 	lds	r24, 0x0333
    4db8:	90 91 34 03 	lds	r25, 0x0334
    4dbc:	01 96       	adiw	r24, 0x01	; 1
    4dbe:	09 f4       	brne	.+2      	; 0x4dc2 <seq_dosequence+0x324>
    4dc0:	49 c1       	rjmp	.+658    	; 0x5054 <seq_dosequence+0x5b6>
	// and are calculated from the servo goal and servo speed values.

	for (i=1; i<=SERVO_NUM; i++)
	{
		// just udpate the goals, but not the position of the servos directly
		seq_goal[i-1]=pgm_read_word(&(array[step][i]));
    4dc2:	f8 01       	movw	r30, r16
    4dc4:	3a 96       	adiw	r30, 0x0a	; 10
    4dc6:	85 91       	lpm	r24, Z+
    4dc8:	94 91       	lpm	r25, Z
    4dca:	90 93 36 03 	sts	0x0336, r25
    4dce:	80 93 35 03 	sts	0x0335, r24
		// cutting off servo pulses is the only immediate servo assignment
		if(seq_goal[i-1]==SERVO_NO_PULSE){servo_set(i,SERVO_NO_PULSE);
    4dd2:	80 91 35 03 	lds	r24, 0x0335
    4dd6:	90 91 36 03 	lds	r25, 0x0336
    4dda:	01 96       	adiw	r24, 0x01	; 1
    4ddc:	09 f4       	brne	.+2      	; 0x4de0 <seq_dosequence+0x342>
    4dde:	34 c1       	rjmp	.+616    	; 0x5048 <seq_dosequence+0x5aa>
	// and are calculated from the servo goal and servo speed values.

	for (i=1; i<=SERVO_NUM; i++)
	{
		// just udpate the goals, but not the position of the servos directly
		seq_goal[i-1]=pgm_read_word(&(array[step][i]));
    4de0:	f8 01       	movw	r30, r16
    4de2:	3c 96       	adiw	r30, 0x0c	; 12
    4de4:	85 91       	lpm	r24, Z+
    4de6:	94 91       	lpm	r25, Z
    4de8:	90 93 38 03 	sts	0x0338, r25
    4dec:	80 93 37 03 	sts	0x0337, r24
		// cutting off servo pulses is the only immediate servo assignment
		if(seq_goal[i-1]==SERVO_NO_PULSE){servo_set(i,SERVO_NO_PULSE);
    4df0:	80 91 37 03 	lds	r24, 0x0337
    4df4:	90 91 38 03 	lds	r25, 0x0338
    4df8:	01 96       	adiw	r24, 0x01	; 1
    4dfa:	09 f4       	brne	.+2      	; 0x4dfe <seq_dosequence+0x360>
    4dfc:	1f c1       	rjmp	.+574    	; 0x503c <seq_dosequence+0x59e>
	// and are calculated from the servo goal and servo speed values.

	for (i=1; i<=SERVO_NUM; i++)
	{
		// just udpate the goals, but not the position of the servos directly
		seq_goal[i-1]=pgm_read_word(&(array[step][i]));
    4dfe:	f8 01       	movw	r30, r16
    4e00:	3e 96       	adiw	r30, 0x0e	; 14
    4e02:	85 91       	lpm	r24, Z+
    4e04:	94 91       	lpm	r25, Z
    4e06:	90 93 3a 03 	sts	0x033A, r25
    4e0a:	80 93 39 03 	sts	0x0339, r24
		// cutting off servo pulses is the only immediate servo assignment
		if(seq_goal[i-1]==SERVO_NO_PULSE){servo_set(i,SERVO_NO_PULSE);
    4e0e:	80 91 39 03 	lds	r24, 0x0339
    4e12:	90 91 3a 03 	lds	r25, 0x033A
    4e16:	01 96       	adiw	r24, 0x01	; 1
    4e18:	09 f4       	brne	.+2      	; 0x4e1c <seq_dosequence+0x37e>
    4e1a:	0a c1       	rjmp	.+532    	; 0x5030 <seq_dosequence+0x592>
	// and are calculated from the servo goal and servo speed values.

	for (i=1; i<=SERVO_NUM; i++)
	{
		// just udpate the goals, but not the position of the servos directly
		seq_goal[i-1]=pgm_read_word(&(array[step][i]));
    4e1c:	f8 01       	movw	r30, r16
    4e1e:	70 96       	adiw	r30, 0x10	; 16
    4e20:	85 91       	lpm	r24, Z+
    4e22:	94 91       	lpm	r25, Z
    4e24:	90 93 3c 03 	sts	0x033C, r25
    4e28:	80 93 3b 03 	sts	0x033B, r24
		// cutting off servo pulses is the only immediate servo assignment
		if(seq_goal[i-1]==SERVO_NO_PULSE){servo_set(i,SERVO_NO_PULSE);
    4e2c:	80 91 3b 03 	lds	r24, 0x033B
    4e30:	90 91 3c 03 	lds	r25, 0x033C
    4e34:	01 96       	adiw	r24, 0x01	; 1
    4e36:	09 f4       	brne	.+2      	; 0x4e3a <seq_dosequence+0x39c>
    4e38:	f5 c0       	rjmp	.+490    	; 0x5024 <seq_dosequence+0x586>
	// and are calculated from the servo goal and servo speed values.

	for (i=1; i<=SERVO_NUM; i++)
	{
		// just udpate the goals, but not the position of the servos directly
		seq_goal[i-1]=pgm_read_word(&(array[step][i]));
    4e3a:	f8 01       	movw	r30, r16
    4e3c:	72 96       	adiw	r30, 0x12	; 18
    4e3e:	85 91       	lpm	r24, Z+
    4e40:	94 91       	lpm	r25, Z
    4e42:	90 93 3e 03 	sts	0x033E, r25
    4e46:	80 93 3d 03 	sts	0x033D, r24
		// cutting off servo pulses is the only immediate servo assignment
		if(seq_goal[i-1]==SERVO_NO_PULSE){servo_set(i,SERVO_NO_PULSE);
    4e4a:	80 91 3d 03 	lds	r24, 0x033D
    4e4e:	90 91 3e 03 	lds	r25, 0x033E
    4e52:	01 96       	adiw	r24, 0x01	; 1
    4e54:	09 f4       	brne	.+2      	; 0x4e58 <seq_dosequence+0x3ba>
    4e56:	e0 c0       	rjmp	.+448    	; 0x5018 <seq_dosequence+0x57a>
	// and are calculated from the servo goal and servo speed values.

	for (i=1; i<=SERVO_NUM; i++)
	{
		// just udpate the goals, but not the position of the servos directly
		seq_goal[i-1]=pgm_read_word(&(array[step][i]));
    4e58:	f8 01       	movw	r30, r16
    4e5a:	74 96       	adiw	r30, 0x14	; 20
    4e5c:	85 91       	lpm	r24, Z+
    4e5e:	94 91       	lpm	r25, Z
    4e60:	90 93 40 03 	sts	0x0340, r25
    4e64:	80 93 3f 03 	sts	0x033F, r24
		// cutting off servo pulses is the only immediate servo assignment
		if(seq_goal[i-1]==SERVO_NO_PULSE){servo_set(i,SERVO_NO_PULSE);
    4e68:	80 91 3f 03 	lds	r24, 0x033F
    4e6c:	90 91 40 03 	lds	r25, 0x0340
    4e70:	01 96       	adiw	r24, 0x01	; 1
    4e72:	09 f4       	brne	.+2      	; 0x4e76 <seq_dosequence+0x3d8>
    4e74:	cb c0       	rjmp	.+406    	; 0x500c <seq_dosequence+0x56e>
		{
			seq_setservopos(sequence_array, sequence_length-1);
			// ### this has a problem, means that the sequence is stopped before the servos
			// actually reach their goal position. The last step is not "performed", except
			// if it's a no pulse (_NP) servo assignment
			sequence_started=0;
    4e76:	10 92 70 02 	sts	0x0270, r1
			sequence_step=0;
    4e7a:	10 92 71 02 	sts	0x0271, r1
			// call the completion callback
			if(seq_completion_callback) seq_completion_callback();
    4e7e:	e0 91 2b 03 	lds	r30, 0x032B
    4e82:	f0 91 2c 03 	lds	r31, 0x032C
    4e86:	30 97       	sbiw	r30, 0x00	; 0
    4e88:	09 f4       	brne	.+2      	; 0x4e8c <seq_dosequence+0x3ee>
    4e8a:	41 cf       	rjmp	.-382    	; 0x4d0e <seq_dosequence+0x270>
			seq_setservopos(sequence_array, sequence_length-1);
			seq_timeout=pgm_read_word(&(sequence_array[sequence_length-1][0]));
			sequence_step=0;
		}
	}
}
    4e8c:	0f 90       	pop	r0
    4e8e:	df 91       	pop	r29
    4e90:	cf 91       	pop	r28
    4e92:	1f 91       	pop	r17
    4e94:	0f 91       	pop	r16
    4e96:	ff 90       	pop	r15
    4e98:	ef 90       	pop	r14
    4e9a:	df 90       	pop	r13
    4e9c:	cf 90       	pop	r12
			// actually reach their goal position. The last step is not "performed", except
			// if it's a no pulse (_NP) servo assignment
			sequence_started=0;
			sequence_step=0;
			// call the completion callback
			if(seq_completion_callback) seq_completion_callback();
    4e9e:	09 94       	ijmp
    4ea0:	f6 e1       	ldi	r31, 0x16	; 22
    4ea2:	5f 9f       	mul	r21, r31
    4ea4:	00 0d       	add	r16, r0
    4ea6:	11 1d       	adc	r17, r1
    4ea8:	11 24       	eor	r1, r1
	// and are calculated from the servo goal and servo speed values.

	for (i=1; i<=SERVO_NUM; i++)
	{
		// just udpate the goals, but not the position of the servos directly
		seq_goal[i-1]=pgm_read_word(&(array[step][i]));
    4eaa:	f8 01       	movw	r30, r16
    4eac:	32 96       	adiw	r30, 0x02	; 2
    4eae:	85 91       	lpm	r24, Z+
    4eb0:	94 91       	lpm	r25, Z
    4eb2:	90 93 2e 03 	sts	0x032E, r25
    4eb6:	80 93 2d 03 	sts	0x032D, r24
		// cutting off servo pulses is the only immediate servo assignment
		if(seq_goal[i-1]==SERVO_NO_PULSE){servo_set(i,SERVO_NO_PULSE);
    4eba:	80 91 2d 03 	lds	r24, 0x032D
    4ebe:	90 91 2e 03 	lds	r25, 0x032E
    4ec2:	01 96       	adiw	r24, 0x01	; 1
    4ec4:	09 f4       	brne	.+2      	; 0x4ec8 <seq_dosequence+0x42a>
    4ec6:	1a c1       	rjmp	.+564    	; 0x50fc <seq_dosequence+0x65e>
	// and are calculated from the servo goal and servo speed values.

	for (i=1; i<=SERVO_NUM; i++)
	{
		// just udpate the goals, but not the position of the servos directly
		seq_goal[i-1]=pgm_read_word(&(array[step][i]));
    4ec8:	f8 01       	movw	r30, r16
    4eca:	34 96       	adiw	r30, 0x04	; 4
    4ecc:	85 91       	lpm	r24, Z+
    4ece:	94 91       	lpm	r25, Z
    4ed0:	90 93 30 03 	sts	0x0330, r25
    4ed4:	80 93 2f 03 	sts	0x032F, r24
		// cutting off servo pulses is the only immediate servo assignment
		if(seq_goal[i-1]==SERVO_NO_PULSE){servo_set(i,SERVO_NO_PULSE);
    4ed8:	80 91 2f 03 	lds	r24, 0x032F
    4edc:	90 91 30 03 	lds	r25, 0x0330
    4ee0:	01 96       	adiw	r24, 0x01	; 1
    4ee2:	09 f4       	brne	.+2      	; 0x4ee6 <seq_dosequence+0x448>
    4ee4:	3b c1       	rjmp	.+630    	; 0x515c <seq_dosequence+0x6be>
	// and are calculated from the servo goal and servo speed values.

	for (i=1; i<=SERVO_NUM; i++)
	{
		// just udpate the goals, but not the position of the servos directly
		seq_goal[i-1]=pgm_read_word(&(array[step][i]));
    4ee6:	f8 01       	movw	r30, r16
    4ee8:	36 96       	adiw	r30, 0x06	; 6
    4eea:	85 91       	lpm	r24, Z+
    4eec:	94 91       	lpm	r25, Z
    4eee:	90 93 32 03 	sts	0x0332, r25
    4ef2:	80 93 31 03 	sts	0x0331, r24
		// cutting off servo pulses is the only immediate servo assignment
		if(seq_goal[i-1]==SERVO_NO_PULSE){servo_set(i,SERVO_NO_PULSE);
    4ef6:	80 91 31 03 	lds	r24, 0x0331
    4efa:	90 91 32 03 	lds	r25, 0x0332
    4efe:	01 96       	adiw	r24, 0x01	; 1
    4f00:	09 f4       	brne	.+2      	; 0x4f04 <seq_dosequence+0x466>
    4f02:	26 c1       	rjmp	.+588    	; 0x5150 <seq_dosequence+0x6b2>
	// and are calculated from the servo goal and servo speed values.

	for (i=1; i<=SERVO_NUM; i++)
	{
		// just udpate the goals, but not the position of the servos directly
		seq_goal[i-1]=pgm_read_word(&(array[step][i]));
    4f04:	f8 01       	movw	r30, r16
    4f06:	38 96       	adiw	r30, 0x08	; 8
    4f08:	85 91       	lpm	r24, Z+
    4f0a:	94 91       	lpm	r25, Z
    4f0c:	90 93 34 03 	sts	0x0334, r25
    4f10:	80 93 33 03 	sts	0x0333, r24
		// cutting off servo pulses is the only immediate servo assignment
		if(seq_goal[i-1]==SERVO_NO_PULSE){servo_set(i,SERVO_NO_PULSE);
    4f14:	80 91 33 03 	lds	r24, 0x0333
    4f18:	90 91 34 03 	lds	r25, 0x0334
    4f1c:	01 96       	adiw	r24, 0x01	; 1
    4f1e:	09 f4       	brne	.+2      	; 0x4f22 <seq_dosequence+0x484>
    4f20:	11 c1       	rjmp	.+546    	; 0x5144 <seq_dosequence+0x6a6>
	// and are calculated from the servo goal and servo speed values.

	for (i=1; i<=SERVO_NUM; i++)
	{
		// just udpate the goals, but not the position of the servos directly
		seq_goal[i-1]=pgm_read_word(&(array[step][i]));
    4f22:	f8 01       	movw	r30, r16
    4f24:	3a 96       	adiw	r30, 0x0a	; 10
    4f26:	85 91       	lpm	r24, Z+
    4f28:	94 91       	lpm	r25, Z
    4f2a:	90 93 36 03 	sts	0x0336, r25
    4f2e:	80 93 35 03 	sts	0x0335, r24
		// cutting off servo pulses is the only immediate servo assignment
		if(seq_goal[i-1]==SERVO_NO_PULSE){servo_set(i,SERVO_NO_PULSE);
    4f32:	80 91 35 03 	lds	r24, 0x0335
    4f36:	90 91 36 03 	lds	r25, 0x0336
    4f3a:	01 96       	adiw	r24, 0x01	; 1
    4f3c:	09 f4       	brne	.+2      	; 0x4f40 <seq_dosequence+0x4a2>
    4f3e:	fc c0       	rjmp	.+504    	; 0x5138 <seq_dosequence+0x69a>
	// and are calculated from the servo goal and servo speed values.

	for (i=1; i<=SERVO_NUM; i++)
	{
		// just udpate the goals, but not the position of the servos directly
		seq_goal[i-1]=pgm_read_word(&(array[step][i]));
    4f40:	f8 01       	movw	r30, r16
    4f42:	3c 96       	adiw	r30, 0x0c	; 12
    4f44:	85 91       	lpm	r24, Z+
    4f46:	94 91       	lpm	r25, Z
    4f48:	90 93 38 03 	sts	0x0338, r25
    4f4c:	80 93 37 03 	sts	0x0337, r24
		// cutting off servo pulses is the only immediate servo assignment
		if(seq_goal[i-1]==SERVO_NO_PULSE){servo_set(i,SERVO_NO_PULSE);
    4f50:	80 91 37 03 	lds	r24, 0x0337
    4f54:	90 91 38 03 	lds	r25, 0x0338
    4f58:	01 96       	adiw	r24, 0x01	; 1
    4f5a:	09 f4       	brne	.+2      	; 0x4f5e <seq_dosequence+0x4c0>
    4f5c:	e7 c0       	rjmp	.+462    	; 0x512c <seq_dosequence+0x68e>
	// and are calculated from the servo goal and servo speed values.

	for (i=1; i<=SERVO_NUM; i++)
	{
		// just udpate the goals, but not the position of the servos directly
		seq_goal[i-1]=pgm_read_word(&(array[step][i]));
    4f5e:	f8 01       	movw	r30, r16
    4f60:	3e 96       	adiw	r30, 0x0e	; 14
    4f62:	85 91       	lpm	r24, Z+
    4f64:	94 91       	lpm	r25, Z
    4f66:	90 93 3a 03 	sts	0x033A, r25
    4f6a:	80 93 39 03 	sts	0x0339, r24
		// cutting off servo pulses is the only immediate servo assignment
		if(seq_goal[i-1]==SERVO_NO_PULSE){servo_set(i,SERVO_NO_PULSE);
    4f6e:	80 91 39 03 	lds	r24, 0x0339
    4f72:	90 91 3a 03 	lds	r25, 0x033A
    4f76:	01 96       	adiw	r24, 0x01	; 1
    4f78:	09 f4       	brne	.+2      	; 0x4f7c <seq_dosequence+0x4de>
    4f7a:	d2 c0       	rjmp	.+420    	; 0x5120 <seq_dosequence+0x682>
	// and are calculated from the servo goal and servo speed values.

	for (i=1; i<=SERVO_NUM; i++)
	{
		// just udpate the goals, but not the position of the servos directly
		seq_goal[i-1]=pgm_read_word(&(array[step][i]));
    4f7c:	f8 01       	movw	r30, r16
    4f7e:	70 96       	adiw	r30, 0x10	; 16
    4f80:	85 91       	lpm	r24, Z+
    4f82:	94 91       	lpm	r25, Z
    4f84:	90 93 3c 03 	sts	0x033C, r25
    4f88:	80 93 3b 03 	sts	0x033B, r24
		// cutting off servo pulses is the only immediate servo assignment
		if(seq_goal[i-1]==SERVO_NO_PULSE){servo_set(i,SERVO_NO_PULSE);
    4f8c:	80 91 3b 03 	lds	r24, 0x033B
    4f90:	90 91 3c 03 	lds	r25, 0x033C
    4f94:	01 96       	adiw	r24, 0x01	; 1
    4f96:	09 f4       	brne	.+2      	; 0x4f9a <seq_dosequence+0x4fc>
    4f98:	bd c0       	rjmp	.+378    	; 0x5114 <seq_dosequence+0x676>
	// and are calculated from the servo goal and servo speed values.

	for (i=1; i<=SERVO_NUM; i++)
	{
		// just udpate the goals, but not the position of the servos directly
		seq_goal[i-1]=pgm_read_word(&(array[step][i]));
    4f9a:	f8 01       	movw	r30, r16
    4f9c:	72 96       	adiw	r30, 0x12	; 18
    4f9e:	85 91       	lpm	r24, Z+
    4fa0:	94 91       	lpm	r25, Z
    4fa2:	90 93 3e 03 	sts	0x033E, r25
    4fa6:	80 93 3d 03 	sts	0x033D, r24
		// cutting off servo pulses is the only immediate servo assignment
		if(seq_goal[i-1]==SERVO_NO_PULSE){servo_set(i,SERVO_NO_PULSE);
    4faa:	80 91 3d 03 	lds	r24, 0x033D
    4fae:	90 91 3e 03 	lds	r25, 0x033E
    4fb2:	01 96       	adiw	r24, 0x01	; 1
    4fb4:	09 f4       	brne	.+2      	; 0x4fb8 <seq_dosequence+0x51a>
    4fb6:	a8 c0       	rjmp	.+336    	; 0x5108 <seq_dosequence+0x66a>
	// and are calculated from the servo goal and servo speed values.

	for (i=1; i<=SERVO_NUM; i++)
	{
		// just udpate the goals, but not the position of the servos directly
		seq_goal[i-1]=pgm_read_word(&(array[step][i]));
    4fb8:	f8 01       	movw	r30, r16
    4fba:	74 96       	adiw	r30, 0x14	; 20
    4fbc:	85 91       	lpm	r24, Z+
    4fbe:	94 91       	lpm	r25, Z
    4fc0:	90 93 40 03 	sts	0x0340, r25
    4fc4:	80 93 3f 03 	sts	0x033F, r24
		// cutting off servo pulses is the only immediate servo assignment
		if(seq_goal[i-1]==SERVO_NO_PULSE){servo_set(i,SERVO_NO_PULSE);
    4fc8:	80 91 3f 03 	lds	r24, 0x033F
    4fcc:	90 91 40 03 	lds	r25, 0x0340
    4fd0:	01 96       	adiw	r24, 0x01	; 1
    4fd2:	09 f4       	brne	.+2      	; 0x4fd6 <seq_dosequence+0x538>
    4fd4:	8d c0       	rjmp	.+282    	; 0x50f0 <seq_dosequence+0x652>
	// step has finished, go to next sequence step
	if (sequence_step<sequence_length-1) // normal step
	{
		{
			seq_setservopos(sequence_array, sequence_step); 					// put servos in position
			seq_timeout=pgm_read_word(&(sequence_array[sequence_step][0]));		// restart timer with step time value
    4fd6:	20 91 71 02 	lds	r18, 0x0271
    4fda:	e0 91 6e 02 	lds	r30, 0x026E
    4fde:	f0 91 6f 02 	lds	r31, 0x026F
    4fe2:	86 e1       	ldi	r24, 0x16	; 22
    4fe4:	28 9f       	mul	r18, r24
    4fe6:	e0 0d       	add	r30, r0
    4fe8:	f1 1d       	adc	r31, r1
    4fea:	11 24       	eor	r1, r1
    4fec:	85 91       	lpm	r24, Z+
    4fee:	94 91       	lpm	r25, Z
    4ff0:	90 93 42 03 	sts	0x0342, r25
    4ff4:	80 93 41 03 	sts	0x0341, r24
			sequence_step++;													// advance to next step
    4ff8:	2f 5f       	subi	r18, 0xFF	; 255
    4ffa:	20 93 71 02 	sts	0x0271, r18
    4ffe:	87 ce       	rjmp	.-754    	; 0x4d0e <seq_dosequence+0x270>
	for (i=1; i<=SERVO_NUM; i++)
	{
		// just udpate the goals, but not the position of the servos directly
		seq_goal[i-1]=pgm_read_word(&(array[step][i]));
		// cutting off servo pulses is the only immediate servo assignment
		if(seq_goal[i-1]==SERVO_NO_PULSE){servo_set(i,SERVO_NO_PULSE);
    5000:	6f ef       	ldi	r22, 0xFF	; 255
    5002:	7f ef       	ldi	r23, 0xFF	; 255
    5004:	81 e0       	ldi	r24, 0x01	; 1
    5006:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <servo_set>
    500a:	e5 cd       	rjmp	.-1078   	; 0x4bd6 <seq_dosequence+0x138>
    500c:	6f ef       	ldi	r22, 0xFF	; 255
    500e:	7f ef       	ldi	r23, 0xFF	; 255
    5010:	8a e0       	ldi	r24, 0x0A	; 10
    5012:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <servo_set>
    5016:	2f cf       	rjmp	.-418    	; 0x4e76 <seq_dosequence+0x3d8>
    5018:	6f ef       	ldi	r22, 0xFF	; 255
    501a:	7f ef       	ldi	r23, 0xFF	; 255
    501c:	89 e0       	ldi	r24, 0x09	; 9
    501e:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <servo_set>
    5022:	1a cf       	rjmp	.-460    	; 0x4e58 <seq_dosequence+0x3ba>
    5024:	6f ef       	ldi	r22, 0xFF	; 255
    5026:	7f ef       	ldi	r23, 0xFF	; 255
    5028:	88 e0       	ldi	r24, 0x08	; 8
    502a:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <servo_set>
    502e:	05 cf       	rjmp	.-502    	; 0x4e3a <seq_dosequence+0x39c>
    5030:	6f ef       	ldi	r22, 0xFF	; 255
    5032:	7f ef       	ldi	r23, 0xFF	; 255
    5034:	87 e0       	ldi	r24, 0x07	; 7
    5036:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <servo_set>
    503a:	f0 ce       	rjmp	.-544    	; 0x4e1c <seq_dosequence+0x37e>
    503c:	6f ef       	ldi	r22, 0xFF	; 255
    503e:	7f ef       	ldi	r23, 0xFF	; 255
    5040:	86 e0       	ldi	r24, 0x06	; 6
    5042:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <servo_set>
    5046:	db ce       	rjmp	.-586    	; 0x4dfe <seq_dosequence+0x360>
    5048:	6f ef       	ldi	r22, 0xFF	; 255
    504a:	7f ef       	ldi	r23, 0xFF	; 255
    504c:	85 e0       	ldi	r24, 0x05	; 5
    504e:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <servo_set>
    5052:	c6 ce       	rjmp	.-628    	; 0x4de0 <seq_dosequence+0x342>
    5054:	6f ef       	ldi	r22, 0xFF	; 255
    5056:	7f ef       	ldi	r23, 0xFF	; 255
    5058:	84 e0       	ldi	r24, 0x04	; 4
    505a:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <servo_set>
    505e:	b1 ce       	rjmp	.-670    	; 0x4dc2 <seq_dosequence+0x324>
    5060:	6f ef       	ldi	r22, 0xFF	; 255
    5062:	7f ef       	ldi	r23, 0xFF	; 255
    5064:	83 e0       	ldi	r24, 0x03	; 3
    5066:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <servo_set>
    506a:	9c ce       	rjmp	.-712    	; 0x4da4 <seq_dosequence+0x306>
    506c:	6f ef       	ldi	r22, 0xFF	; 255
    506e:	7f ef       	ldi	r23, 0xFF	; 255
    5070:	82 e0       	ldi	r24, 0x02	; 2
    5072:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <servo_set>
    5076:	87 ce       	rjmp	.-754    	; 0x4d86 <seq_dosequence+0x2e8>
    5078:	6f ef       	ldi	r22, 0xFF	; 255
    507a:	7f ef       	ldi	r23, 0xFF	; 255
    507c:	81 e0       	ldi	r24, 0x01	; 1
    507e:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <servo_set>
    5082:	72 ce       	rjmp	.-796    	; 0x4d68 <seq_dosequence+0x2ca>
    5084:	6f ef       	ldi	r22, 0xFF	; 255
    5086:	7f ef       	ldi	r23, 0xFF	; 255
    5088:	8a e0       	ldi	r24, 0x0A	; 10
    508a:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <servo_set>
    508e:	2a ce       	rjmp	.-940    	; 0x4ce4 <seq_dosequence+0x246>
    5090:	6f ef       	ldi	r22, 0xFF	; 255
    5092:	7f ef       	ldi	r23, 0xFF	; 255
    5094:	89 e0       	ldi	r24, 0x09	; 9
    5096:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <servo_set>
    509a:	15 ce       	rjmp	.-982    	; 0x4cc6 <seq_dosequence+0x228>
    509c:	6f ef       	ldi	r22, 0xFF	; 255
    509e:	7f ef       	ldi	r23, 0xFF	; 255
    50a0:	88 e0       	ldi	r24, 0x08	; 8
    50a2:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <servo_set>
    50a6:	00 ce       	rjmp	.-1024   	; 0x4ca8 <seq_dosequence+0x20a>
    50a8:	6f ef       	ldi	r22, 0xFF	; 255
    50aa:	7f ef       	ldi	r23, 0xFF	; 255
    50ac:	87 e0       	ldi	r24, 0x07	; 7
    50ae:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <servo_set>
    50b2:	eb cd       	rjmp	.-1066   	; 0x4c8a <seq_dosequence+0x1ec>
    50b4:	6f ef       	ldi	r22, 0xFF	; 255
    50b6:	7f ef       	ldi	r23, 0xFF	; 255
    50b8:	86 e0       	ldi	r24, 0x06	; 6
    50ba:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <servo_set>
    50be:	d6 cd       	rjmp	.-1108   	; 0x4c6c <seq_dosequence+0x1ce>
    50c0:	6f ef       	ldi	r22, 0xFF	; 255
    50c2:	7f ef       	ldi	r23, 0xFF	; 255
    50c4:	85 e0       	ldi	r24, 0x05	; 5
    50c6:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <servo_set>
    50ca:	c1 cd       	rjmp	.-1150   	; 0x4c4e <seq_dosequence+0x1b0>
    50cc:	6f ef       	ldi	r22, 0xFF	; 255
    50ce:	7f ef       	ldi	r23, 0xFF	; 255
    50d0:	84 e0       	ldi	r24, 0x04	; 4
    50d2:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <servo_set>
    50d6:	ac cd       	rjmp	.-1192   	; 0x4c30 <seq_dosequence+0x192>
    50d8:	6f ef       	ldi	r22, 0xFF	; 255
    50da:	7f ef       	ldi	r23, 0xFF	; 255
    50dc:	83 e0       	ldi	r24, 0x03	; 3
    50de:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <servo_set>
    50e2:	97 cd       	rjmp	.-1234   	; 0x4c12 <seq_dosequence+0x174>
    50e4:	6f ef       	ldi	r22, 0xFF	; 255
    50e6:	7f ef       	ldi	r23, 0xFF	; 255
    50e8:	82 e0       	ldi	r24, 0x02	; 2
    50ea:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <servo_set>
    50ee:	82 cd       	rjmp	.-1276   	; 0x4bf4 <seq_dosequence+0x156>
    50f0:	6f ef       	ldi	r22, 0xFF	; 255
    50f2:	7f ef       	ldi	r23, 0xFF	; 255
    50f4:	8a e0       	ldi	r24, 0x0A	; 10
    50f6:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <servo_set>
    50fa:	6d cf       	rjmp	.-294    	; 0x4fd6 <seq_dosequence+0x538>
    50fc:	6f ef       	ldi	r22, 0xFF	; 255
    50fe:	7f ef       	ldi	r23, 0xFF	; 255
    5100:	81 e0       	ldi	r24, 0x01	; 1
    5102:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <servo_set>
    5106:	e0 ce       	rjmp	.-576    	; 0x4ec8 <seq_dosequence+0x42a>
    5108:	6f ef       	ldi	r22, 0xFF	; 255
    510a:	7f ef       	ldi	r23, 0xFF	; 255
    510c:	89 e0       	ldi	r24, 0x09	; 9
    510e:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <servo_set>
    5112:	52 cf       	rjmp	.-348    	; 0x4fb8 <seq_dosequence+0x51a>
    5114:	6f ef       	ldi	r22, 0xFF	; 255
    5116:	7f ef       	ldi	r23, 0xFF	; 255
    5118:	88 e0       	ldi	r24, 0x08	; 8
    511a:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <servo_set>
    511e:	3d cf       	rjmp	.-390    	; 0x4f9a <seq_dosequence+0x4fc>
    5120:	6f ef       	ldi	r22, 0xFF	; 255
    5122:	7f ef       	ldi	r23, 0xFF	; 255
    5124:	87 e0       	ldi	r24, 0x07	; 7
    5126:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <servo_set>
    512a:	28 cf       	rjmp	.-432    	; 0x4f7c <seq_dosequence+0x4de>
    512c:	6f ef       	ldi	r22, 0xFF	; 255
    512e:	7f ef       	ldi	r23, 0xFF	; 255
    5130:	86 e0       	ldi	r24, 0x06	; 6
    5132:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <servo_set>
    5136:	13 cf       	rjmp	.-474    	; 0x4f5e <seq_dosequence+0x4c0>
    5138:	6f ef       	ldi	r22, 0xFF	; 255
    513a:	7f ef       	ldi	r23, 0xFF	; 255
    513c:	85 e0       	ldi	r24, 0x05	; 5
    513e:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <servo_set>
    5142:	fe ce       	rjmp	.-516    	; 0x4f40 <seq_dosequence+0x4a2>
    5144:	6f ef       	ldi	r22, 0xFF	; 255
    5146:	7f ef       	ldi	r23, 0xFF	; 255
    5148:	84 e0       	ldi	r24, 0x04	; 4
    514a:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <servo_set>
    514e:	e9 ce       	rjmp	.-558    	; 0x4f22 <seq_dosequence+0x484>
    5150:	6f ef       	ldi	r22, 0xFF	; 255
    5152:	7f ef       	ldi	r23, 0xFF	; 255
    5154:	83 e0       	ldi	r24, 0x03	; 3
    5156:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <servo_set>
    515a:	d4 ce       	rjmp	.-600    	; 0x4f04 <seq_dosequence+0x466>
    515c:	6f ef       	ldi	r22, 0xFF	; 255
    515e:	7f ef       	ldi	r23, 0xFF	; 255
    5160:	82 e0       	ldi	r24, 0x02	; 2
    5162:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <servo_set>
    5166:	bf ce       	rjmp	.-642    	; 0x4ee6 <seq_dosequence+0x448>

00005168 <seq_init>:
static uint8_t sequence_length;

// initialize by registering our real time callback and our timer
void seq_init()
{
	rt_add_function(seq_dosequence);
    5168:	8f e4       	ldi	r24, 0x4F	; 79
    516a:	95 e2       	ldi	r25, 0x25	; 37
    516c:	0e 94 a3 23 	call	0x4746	; 0x4746 <rt_add_function>
	rt_add_timer(&seq_timeout);
    5170:	81 e4       	ldi	r24, 0x41	; 65
    5172:	93 e0       	ldi	r25, 0x03	; 3
    5174:	0c 94 d0 22 	jmp	0x45a0	; 0x45a0 <rt_add_timer>

00005178 <seq_add_completion_callback>:
}

// pass a void function(void) to this, and it will be called at the end of the sequence
void seq_add_completion_callback(void(*usercallback)())
{
	seq_completion_callback=usercallback;
    5178:	90 93 2c 03 	sts	0x032C, r25
    517c:	80 93 2b 03 	sts	0x032B, r24
    5180:	08 95       	ret

00005182 <seq_remove_completion_callback>:
}

void seq_remove_completion_callback()
{
	seq_completion_callback=0;
    5182:	10 92 2c 03 	sts	0x032C, r1
    5186:	10 92 2b 03 	sts	0x032B, r1
    518a:	08 95       	ret

0000518c <seq_loadspeed>:
}

// servo speed control functions
void seq_loadspeed(speed_t speedarray)
{
    518c:	fc 01       	movw	r30, r24
	uint8_t i;
	for(i=0; i<SERVO_NUM; i++ )
	{
		servo_speed[i]=speedarray[i];
    518e:	80 81       	ld	r24, Z
    5190:	91 81       	ldd	r25, Z+1	; 0x01
    5192:	90 93 73 02 	sts	0x0273, r25
    5196:	80 93 72 02 	sts	0x0272, r24
    519a:	82 81       	ldd	r24, Z+2	; 0x02
    519c:	93 81       	ldd	r25, Z+3	; 0x03
    519e:	90 93 75 02 	sts	0x0275, r25
    51a2:	80 93 74 02 	sts	0x0274, r24
    51a6:	84 81       	ldd	r24, Z+4	; 0x04
    51a8:	95 81       	ldd	r25, Z+5	; 0x05
    51aa:	90 93 77 02 	sts	0x0277, r25
    51ae:	80 93 76 02 	sts	0x0276, r24
    51b2:	86 81       	ldd	r24, Z+6	; 0x06
    51b4:	97 81       	ldd	r25, Z+7	; 0x07
    51b6:	90 93 79 02 	sts	0x0279, r25
    51ba:	80 93 78 02 	sts	0x0278, r24
    51be:	80 85       	ldd	r24, Z+8	; 0x08
    51c0:	91 85       	ldd	r25, Z+9	; 0x09
    51c2:	90 93 7b 02 	sts	0x027B, r25
    51c6:	80 93 7a 02 	sts	0x027A, r24
    51ca:	82 85       	ldd	r24, Z+10	; 0x0a
    51cc:	93 85       	ldd	r25, Z+11	; 0x0b
    51ce:	90 93 7d 02 	sts	0x027D, r25
    51d2:	80 93 7c 02 	sts	0x027C, r24
    51d6:	84 85       	ldd	r24, Z+12	; 0x0c
    51d8:	95 85       	ldd	r25, Z+13	; 0x0d
    51da:	90 93 7f 02 	sts	0x027F, r25
    51de:	80 93 7e 02 	sts	0x027E, r24
    51e2:	86 85       	ldd	r24, Z+14	; 0x0e
    51e4:	97 85       	ldd	r25, Z+15	; 0x0f
    51e6:	90 93 81 02 	sts	0x0281, r25
    51ea:	80 93 80 02 	sts	0x0280, r24
    51ee:	80 89       	ldd	r24, Z+16	; 0x10
    51f0:	91 89       	ldd	r25, Z+17	; 0x11
    51f2:	90 93 83 02 	sts	0x0283, r25
    51f6:	80 93 82 02 	sts	0x0282, r24
    51fa:	82 89       	ldd	r24, Z+18	; 0x12
    51fc:	93 89       	ldd	r25, Z+19	; 0x13
    51fe:	90 93 85 02 	sts	0x0285, r25
    5202:	80 93 84 02 	sts	0x0284, r24
    5206:	08 95       	ret

00005208 <seq_resetspeed>:
	}
}

void seq_resetspeed()
{
    5208:	84 e1       	ldi	r24, 0x14	; 20
    520a:	e2 e7       	ldi	r30, 0x72	; 114
    520c:	f2 e0       	ldi	r31, 0x02	; 2
    520e:	df 01       	movw	r26, r30
    5210:	1d 92       	st	X+, r1
    5212:	8a 95       	dec	r24
    5214:	e9 f7       	brne	.-6      	; 0x5210 <seq_resetspeed+0x8>
    5216:	08 95       	ret

00005218 <seq_loadsequence>:
	}
}

// call this first to load the sequence array
void seq_loadsequence(int16_t const array[][SERVO_NUM+1], uint8_t length)
{
    5218:	cf 93       	push	r28
    521a:	df 93       	push	r29
	// stop previous sequence right away before changing pointer array
	sequence_started=0;	// that will stop the sequence interrupts calls
    521c:	10 92 70 02 	sts	0x0270, r1
	sequence_step=0;	// restart at step one
    5220:	10 92 71 02 	sts	0x0271, r1

	// point to the new sequence array and store it's length
	sequence_array=array;
    5224:	90 93 6f 02 	sts	0x026F, r25
    5228:	80 93 6e 02 	sts	0x026E, r24
	sequence_length=length;
    522c:	60 93 6d 02 	sts	0x026D, r22
    5230:	c0 e0       	ldi	r28, 0x00	; 0
    5232:	d0 e0       	ldi	r29, 0x00	; 0

		// better: we should start from where the real position of the servos are,
		// so if there is a servo speed limit they continue smoothly from there.
		// If the servos were not on (SERVO_NO_PULSE), they'll jump to the start position
		// regardless of servo speed settings.
		seq_current[i-1]= servo_read(i);
    5234:	8c 2f       	mov	r24, r28
    5236:	8f 5f       	subi	r24, 0xFF	; 255
    5238:	0e 94 5f 2e 	call	0x5cbe	; 0x5cbe <servo_read>
    523c:	9e 01       	movw	r18, r28
    523e:	22 0f       	add	r18, r18
    5240:	33 1f       	adc	r19, r19
    5242:	f9 01       	movw	r30, r18
    5244:	e9 5e       	subi	r30, 0xE9	; 233
    5246:	fc 4f       	sbci	r31, 0xFC	; 252
    5248:	91 83       	std	Z+1, r25	; 0x01
    524a:	80 83       	st	Z, r24
		// Also equate goals to current so we start from steady state
		seq_goal[i-1]=seq_current[i-1];
    524c:	80 81       	ld	r24, Z
    524e:	91 81       	ldd	r25, Z+1	; 0x01
    5250:	f9 01       	movw	r30, r18
    5252:	e3 5d       	subi	r30, 0xD3	; 211
    5254:	fc 4f       	sbci	r31, 0xFC	; 252
    5256:	91 83       	std	Z+1, r25	; 0x01
    5258:	80 83       	st	Z, r24
    525a:	21 96       	adiw	r28, 0x01	; 1
	sequence_array=array;
	sequence_length=length;

	// init the servo current position at step 0;
	uint8_t i;
	for (i=1; i<=SERVO_NUM; i++)
    525c:	ca 30       	cpi	r28, 0x0A	; 10
    525e:	d1 05       	cpc	r29, r1
    5260:	49 f7       	brne	.-46     	; 0x5234 <seq_loadsequence+0x1c>
		// regardless of servo speed settings.
		seq_current[i-1]= servo_read(i);
		// Also equate goals to current so we start from steady state
		seq_goal[i-1]=seq_current[i-1];
	}
}
    5262:	df 91       	pop	r29
    5264:	cf 91       	pop	r28
    5266:	08 95       	ret

00005268 <seq_startsequence>:

// call this second to execute the sequence from the beginning
void seq_startsequence()
{
	sequence_step=0;
    5268:	10 92 71 02 	sts	0x0271, r1
	sequence_started=1;
    526c:	81 e0       	ldi	r24, 0x01	; 1
    526e:	80 93 70 02 	sts	0x0270, r24
    5272:	08 95       	ret

00005274 <seq_restartsequence>:
}

// this will restart the sequence from the point where it was stopped
void seq_restartsequence()
{
	sequence_started=1;
    5274:	81 e0       	ldi	r24, 0x01	; 1
    5276:	80 93 70 02 	sts	0x0270, r24
    527a:	08 95       	ret

0000527c <seq_stopsequence>:
}

// this will stop the sequencer
void seq_stopsequence()
{
	sequence_started=0;
    527c:	10 92 70 02 	sts	0x0270, r1
	seq_timeout=0;
    5280:	10 92 42 03 	sts	0x0342, r1
    5284:	10 92 41 03 	sts	0x0341, r1
	if(seq_completion_callback) seq_completion_callback();
    5288:	e0 91 2b 03 	lds	r30, 0x032B
    528c:	f0 91 2c 03 	lds	r31, 0x032C
    5290:	30 97       	sbiw	r30, 0x00	; 0
    5292:	09 f0       	breq	.+2      	; 0x5296 <seq_stopsequence+0x1a>
    5294:	09 94       	ijmp
    5296:	08 95       	ret

00005298 <seq_jumptostep>:
}

// call this before calling restart to specify a specific step from which to restart
void seq_jumptostep(uint8_t step)
{
	if(step<sequence_length) sequence_step=step;
    5298:	90 91 6d 02 	lds	r25, 0x026D
    529c:	89 17       	cp	r24, r25
    529e:	10 f4       	brcc	.+4      	; 0x52a4 <seq_jumptostep+0xc>
    52a0:	80 93 71 02 	sts	0x0271, r24
    52a4:	08 95       	ret

000052a6 <seq_setservopos>:
}
******************/

// new version with servo speed control
void seq_setservopos(int16_t const array[][SERVO_NUM+1], uint8_t step)
{
    52a6:	cf 93       	push	r28
    52a8:	df 93       	push	r29
    52aa:	ec 01       	movw	r28, r24
    52ac:	26 e1       	ldi	r18, 0x16	; 22
    52ae:	62 9f       	mul	r22, r18
    52b0:	c0 0d       	add	r28, r0
    52b2:	d1 1d       	adc	r29, r1
    52b4:	11 24       	eor	r1, r1
	// and are calculated from the servo goal and servo speed values.

	for (i=1; i<=SERVO_NUM; i++)
	{
		// just udpate the goals, but not the position of the servos directly
		seq_goal[i-1]=pgm_read_word(&(array[step][i]));
    52b6:	fe 01       	movw	r30, r28
    52b8:	32 96       	adiw	r30, 0x02	; 2
    52ba:	85 91       	lpm	r24, Z+
    52bc:	94 91       	lpm	r25, Z
    52be:	90 93 2e 03 	sts	0x032E, r25
    52c2:	80 93 2d 03 	sts	0x032D, r24
		// cutting off servo pulses is the only immediate servo assignment
		if(seq_goal[i-1]==SERVO_NO_PULSE){servo_set(i,SERVO_NO_PULSE);
    52c6:	80 91 2d 03 	lds	r24, 0x032D
    52ca:	90 91 2e 03 	lds	r25, 0x032E
    52ce:	01 96       	adiw	r24, 0x01	; 1
    52d0:	09 f4       	brne	.+2      	; 0x52d4 <seq_setservopos+0x2e>
    52d2:	89 c0       	rjmp	.+274    	; 0x53e6 <seq_setservopos+0x140>
	// and are calculated from the servo goal and servo speed values.

	for (i=1; i<=SERVO_NUM; i++)
	{
		// just udpate the goals, but not the position of the servos directly
		seq_goal[i-1]=pgm_read_word(&(array[step][i]));
    52d4:	fe 01       	movw	r30, r28
    52d6:	34 96       	adiw	r30, 0x04	; 4
    52d8:	85 91       	lpm	r24, Z+
    52da:	94 91       	lpm	r25, Z
    52dc:	90 93 30 03 	sts	0x0330, r25
    52e0:	80 93 2f 03 	sts	0x032F, r24
		// cutting off servo pulses is the only immediate servo assignment
		if(seq_goal[i-1]==SERVO_NO_PULSE){servo_set(i,SERVO_NO_PULSE);
    52e4:	80 91 2f 03 	lds	r24, 0x032F
    52e8:	90 91 30 03 	lds	r25, 0x0330
    52ec:	01 96       	adiw	r24, 0x01	; 1
    52ee:	09 f4       	brne	.+2      	; 0x52f2 <seq_setservopos+0x4c>
    52f0:	80 c0       	rjmp	.+256    	; 0x53f2 <seq_setservopos+0x14c>
	// and are calculated from the servo goal and servo speed values.

	for (i=1; i<=SERVO_NUM; i++)
	{
		// just udpate the goals, but not the position of the servos directly
		seq_goal[i-1]=pgm_read_word(&(array[step][i]));
    52f2:	fe 01       	movw	r30, r28
    52f4:	36 96       	adiw	r30, 0x06	; 6
    52f6:	85 91       	lpm	r24, Z+
    52f8:	94 91       	lpm	r25, Z
    52fa:	90 93 32 03 	sts	0x0332, r25
    52fe:	80 93 31 03 	sts	0x0331, r24
		// cutting off servo pulses is the only immediate servo assignment
		if(seq_goal[i-1]==SERVO_NO_PULSE){servo_set(i,SERVO_NO_PULSE);
    5302:	80 91 31 03 	lds	r24, 0x0331
    5306:	90 91 32 03 	lds	r25, 0x0332
    530a:	01 96       	adiw	r24, 0x01	; 1
    530c:	09 f4       	brne	.+2      	; 0x5310 <seq_setservopos+0x6a>
    530e:	77 c0       	rjmp	.+238    	; 0x53fe <seq_setservopos+0x158>
	// and are calculated from the servo goal and servo speed values.

	for (i=1; i<=SERVO_NUM; i++)
	{
		// just udpate the goals, but not the position of the servos directly
		seq_goal[i-1]=pgm_read_word(&(array[step][i]));
    5310:	fe 01       	movw	r30, r28
    5312:	38 96       	adiw	r30, 0x08	; 8
    5314:	85 91       	lpm	r24, Z+
    5316:	94 91       	lpm	r25, Z
    5318:	90 93 34 03 	sts	0x0334, r25
    531c:	80 93 33 03 	sts	0x0333, r24
		// cutting off servo pulses is the only immediate servo assignment
		if(seq_goal[i-1]==SERVO_NO_PULSE){servo_set(i,SERVO_NO_PULSE);
    5320:	80 91 33 03 	lds	r24, 0x0333
    5324:	90 91 34 03 	lds	r25, 0x0334
    5328:	01 96       	adiw	r24, 0x01	; 1
    532a:	09 f4       	brne	.+2      	; 0x532e <seq_setservopos+0x88>
    532c:	6e c0       	rjmp	.+220    	; 0x540a <seq_setservopos+0x164>
	// and are calculated from the servo goal and servo speed values.

	for (i=1; i<=SERVO_NUM; i++)
	{
		// just udpate the goals, but not the position of the servos directly
		seq_goal[i-1]=pgm_read_word(&(array[step][i]));
    532e:	fe 01       	movw	r30, r28
    5330:	3a 96       	adiw	r30, 0x0a	; 10
    5332:	85 91       	lpm	r24, Z+
    5334:	94 91       	lpm	r25, Z
    5336:	90 93 36 03 	sts	0x0336, r25
    533a:	80 93 35 03 	sts	0x0335, r24
		// cutting off servo pulses is the only immediate servo assignment
		if(seq_goal[i-1]==SERVO_NO_PULSE){servo_set(i,SERVO_NO_PULSE);
    533e:	80 91 35 03 	lds	r24, 0x0335
    5342:	90 91 36 03 	lds	r25, 0x0336
    5346:	01 96       	adiw	r24, 0x01	; 1
    5348:	09 f4       	brne	.+2      	; 0x534c <seq_setservopos+0xa6>
    534a:	65 c0       	rjmp	.+202    	; 0x5416 <seq_setservopos+0x170>
	// and are calculated from the servo goal and servo speed values.

	for (i=1; i<=SERVO_NUM; i++)
	{
		// just udpate the goals, but not the position of the servos directly
		seq_goal[i-1]=pgm_read_word(&(array[step][i]));
    534c:	fe 01       	movw	r30, r28
    534e:	3c 96       	adiw	r30, 0x0c	; 12
    5350:	85 91       	lpm	r24, Z+
    5352:	94 91       	lpm	r25, Z
    5354:	90 93 38 03 	sts	0x0338, r25
    5358:	80 93 37 03 	sts	0x0337, r24
		// cutting off servo pulses is the only immediate servo assignment
		if(seq_goal[i-1]==SERVO_NO_PULSE){servo_set(i,SERVO_NO_PULSE);
    535c:	80 91 37 03 	lds	r24, 0x0337
    5360:	90 91 38 03 	lds	r25, 0x0338
    5364:	01 96       	adiw	r24, 0x01	; 1
    5366:	09 f4       	brne	.+2      	; 0x536a <seq_setservopos+0xc4>
    5368:	5c c0       	rjmp	.+184    	; 0x5422 <seq_setservopos+0x17c>
	// and are calculated from the servo goal and servo speed values.

	for (i=1; i<=SERVO_NUM; i++)
	{
		// just udpate the goals, but not the position of the servos directly
		seq_goal[i-1]=pgm_read_word(&(array[step][i]));
    536a:	fe 01       	movw	r30, r28
    536c:	3e 96       	adiw	r30, 0x0e	; 14
    536e:	85 91       	lpm	r24, Z+
    5370:	94 91       	lpm	r25, Z
    5372:	90 93 3a 03 	sts	0x033A, r25
    5376:	80 93 39 03 	sts	0x0339, r24
		// cutting off servo pulses is the only immediate servo assignment
		if(seq_goal[i-1]==SERVO_NO_PULSE){servo_set(i,SERVO_NO_PULSE);
    537a:	80 91 39 03 	lds	r24, 0x0339
    537e:	90 91 3a 03 	lds	r25, 0x033A
    5382:	01 96       	adiw	r24, 0x01	; 1
    5384:	09 f4       	brne	.+2      	; 0x5388 <seq_setservopos+0xe2>
    5386:	53 c0       	rjmp	.+166    	; 0x542e <seq_setservopos+0x188>
	// and are calculated from the servo goal and servo speed values.

	for (i=1; i<=SERVO_NUM; i++)
	{
		// just udpate the goals, but not the position of the servos directly
		seq_goal[i-1]=pgm_read_word(&(array[step][i]));
    5388:	fe 01       	movw	r30, r28
    538a:	70 96       	adiw	r30, 0x10	; 16
    538c:	85 91       	lpm	r24, Z+
    538e:	94 91       	lpm	r25, Z
    5390:	90 93 3c 03 	sts	0x033C, r25
    5394:	80 93 3b 03 	sts	0x033B, r24
		// cutting off servo pulses is the only immediate servo assignment
		if(seq_goal[i-1]==SERVO_NO_PULSE){servo_set(i,SERVO_NO_PULSE);
    5398:	80 91 3b 03 	lds	r24, 0x033B
    539c:	90 91 3c 03 	lds	r25, 0x033C
    53a0:	01 96       	adiw	r24, 0x01	; 1
    53a2:	09 f4       	brne	.+2      	; 0x53a6 <seq_setservopos+0x100>
    53a4:	4a c0       	rjmp	.+148    	; 0x543a <seq_setservopos+0x194>
	// and are calculated from the servo goal and servo speed values.

	for (i=1; i<=SERVO_NUM; i++)
	{
		// just udpate the goals, but not the position of the servos directly
		seq_goal[i-1]=pgm_read_word(&(array[step][i]));
    53a6:	fe 01       	movw	r30, r28
    53a8:	72 96       	adiw	r30, 0x12	; 18
    53aa:	85 91       	lpm	r24, Z+
    53ac:	94 91       	lpm	r25, Z
    53ae:	90 93 3e 03 	sts	0x033E, r25
    53b2:	80 93 3d 03 	sts	0x033D, r24
		// cutting off servo pulses is the only immediate servo assignment
		if(seq_goal[i-1]==SERVO_NO_PULSE){servo_set(i,SERVO_NO_PULSE);
    53b6:	80 91 3d 03 	lds	r24, 0x033D
    53ba:	90 91 3e 03 	lds	r25, 0x033E
    53be:	01 96       	adiw	r24, 0x01	; 1
    53c0:	09 f4       	brne	.+2      	; 0x53c4 <seq_setservopos+0x11e>
    53c2:	41 c0       	rjmp	.+130    	; 0x5446 <seq_setservopos+0x1a0>
	// and are calculated from the servo goal and servo speed values.

	for (i=1; i<=SERVO_NUM; i++)
	{
		// just udpate the goals, but not the position of the servos directly
		seq_goal[i-1]=pgm_read_word(&(array[step][i]));
    53c4:	64 96       	adiw	r28, 0x14	; 20
    53c6:	fe 01       	movw	r30, r28
    53c8:	85 91       	lpm	r24, Z+
    53ca:	94 91       	lpm	r25, Z
    53cc:	90 93 40 03 	sts	0x0340, r25
    53d0:	80 93 3f 03 	sts	0x033F, r24
		// cutting off servo pulses is the only immediate servo assignment
		if(seq_goal[i-1]==SERVO_NO_PULSE){servo_set(i,SERVO_NO_PULSE);
    53d4:	80 91 3f 03 	lds	r24, 0x033F
    53d8:	90 91 40 03 	lds	r25, 0x0340
    53dc:	01 96       	adiw	r24, 0x01	; 1
    53de:	c9 f1       	breq	.+114    	; 0x5452 <seq_setservopos+0x1ac>
		// all other servo assignment take place at interrupt time in seq_dosequence()
		}
	}
}
    53e0:	df 91       	pop	r29
    53e2:	cf 91       	pop	r28
    53e4:	08 95       	ret
	for (i=1; i<=SERVO_NUM; i++)
	{
		// just udpate the goals, but not the position of the servos directly
		seq_goal[i-1]=pgm_read_word(&(array[step][i]));
		// cutting off servo pulses is the only immediate servo assignment
		if(seq_goal[i-1]==SERVO_NO_PULSE){servo_set(i,SERVO_NO_PULSE);
    53e6:	6f ef       	ldi	r22, 0xFF	; 255
    53e8:	7f ef       	ldi	r23, 0xFF	; 255
    53ea:	81 e0       	ldi	r24, 0x01	; 1
    53ec:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <servo_set>
    53f0:	71 cf       	rjmp	.-286    	; 0x52d4 <seq_setservopos+0x2e>
    53f2:	6f ef       	ldi	r22, 0xFF	; 255
    53f4:	7f ef       	ldi	r23, 0xFF	; 255
    53f6:	82 e0       	ldi	r24, 0x02	; 2
    53f8:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <servo_set>
    53fc:	7a cf       	rjmp	.-268    	; 0x52f2 <seq_setservopos+0x4c>
    53fe:	6f ef       	ldi	r22, 0xFF	; 255
    5400:	7f ef       	ldi	r23, 0xFF	; 255
    5402:	83 e0       	ldi	r24, 0x03	; 3
    5404:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <servo_set>
    5408:	83 cf       	rjmp	.-250    	; 0x5310 <seq_setservopos+0x6a>
    540a:	6f ef       	ldi	r22, 0xFF	; 255
    540c:	7f ef       	ldi	r23, 0xFF	; 255
    540e:	84 e0       	ldi	r24, 0x04	; 4
    5410:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <servo_set>
    5414:	8c cf       	rjmp	.-232    	; 0x532e <seq_setservopos+0x88>
    5416:	6f ef       	ldi	r22, 0xFF	; 255
    5418:	7f ef       	ldi	r23, 0xFF	; 255
    541a:	85 e0       	ldi	r24, 0x05	; 5
    541c:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <servo_set>
    5420:	95 cf       	rjmp	.-214    	; 0x534c <seq_setservopos+0xa6>
    5422:	6f ef       	ldi	r22, 0xFF	; 255
    5424:	7f ef       	ldi	r23, 0xFF	; 255
    5426:	86 e0       	ldi	r24, 0x06	; 6
    5428:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <servo_set>
    542c:	9e cf       	rjmp	.-196    	; 0x536a <seq_setservopos+0xc4>
    542e:	6f ef       	ldi	r22, 0xFF	; 255
    5430:	7f ef       	ldi	r23, 0xFF	; 255
    5432:	87 e0       	ldi	r24, 0x07	; 7
    5434:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <servo_set>
    5438:	a7 cf       	rjmp	.-178    	; 0x5388 <seq_setservopos+0xe2>
    543a:	6f ef       	ldi	r22, 0xFF	; 255
    543c:	7f ef       	ldi	r23, 0xFF	; 255
    543e:	88 e0       	ldi	r24, 0x08	; 8
    5440:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <servo_set>
    5444:	b0 cf       	rjmp	.-160    	; 0x53a6 <seq_setservopos+0x100>
    5446:	6f ef       	ldi	r22, 0xFF	; 255
    5448:	7f ef       	ldi	r23, 0xFF	; 255
    544a:	89 e0       	ldi	r24, 0x09	; 9
    544c:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <servo_set>
    5450:	b9 cf       	rjmp	.-142    	; 0x53c4 <seq_setservopos+0x11e>
    5452:	6f ef       	ldi	r22, 0xFF	; 255
    5454:	7f ef       	ldi	r23, 0xFF	; 255
    5456:	8a e0       	ldi	r24, 0x0A	; 10
		// all other servo assignment take place at interrupt time in seq_dosequence()
		}
	}
}
    5458:	df 91       	pop	r29
    545a:	cf 91       	pop	r28
	for (i=1; i<=SERVO_NUM; i++)
	{
		// just udpate the goals, but not the position of the servos directly
		seq_goal[i-1]=pgm_read_word(&(array[step][i]));
		// cutting off servo pulses is the only immediate servo assignment
		if(seq_goal[i-1]==SERVO_NO_PULSE){servo_set(i,SERVO_NO_PULSE);
    545c:	0c 94 35 2e 	jmp	0x5c6a	; 0x5c6a <servo_set>

00005460 <serial_init>:
uint8_t outbuf[BUFSIZE_OUT];
fifo_t outfifo;


void serial_init(uint16_t baudrate)
{
    5460:	cf 93       	push	r28
	// Set Parity Check: UPM1 to 1
	// Set Parity Type: UPM0 to odd or even

   *********************************************/
    uint8_t dummydata;		// to avoid warning from compiler later
    uint8_t sreg = SREG;	// save status register
    5462:	cf b7       	in	r28, 0x3f	; 63

    // bit rate calculation
	uint16_t ubrr = (uint16_t) ((uint32_t) F_CPU/(16UL*baudrate) - 1);
    5464:	9c 01       	movw	r18, r24
    5466:	40 e0       	ldi	r20, 0x00	; 0
    5468:	50 e0       	ldi	r21, 0x00	; 0
    546a:	22 0f       	add	r18, r18
    546c:	33 1f       	adc	r19, r19
    546e:	44 1f       	adc	r20, r20
    5470:	55 1f       	adc	r21, r21
    5472:	22 0f       	add	r18, r18
    5474:	33 1f       	adc	r19, r19
    5476:	44 1f       	adc	r20, r20
    5478:	55 1f       	adc	r21, r21
    547a:	22 0f       	add	r18, r18
    547c:	33 1f       	adc	r19, r19
    547e:	44 1f       	adc	r20, r20
    5480:	55 1f       	adc	r21, r21
    5482:	22 0f       	add	r18, r18
    5484:	33 1f       	adc	r19, r19
    5486:	44 1f       	adc	r20, r20
    5488:	55 1f       	adc	r21, r21
    548a:	60 e0       	ldi	r22, 0x00	; 0
    548c:	74 e2       	ldi	r23, 0x24	; 36
    548e:	84 ef       	ldi	r24, 0xF4	; 244
    5490:	90 e0       	ldi	r25, 0x00	; 0
    5492:	0e 94 eb 34 	call	0x69d6	; 0x69d6 <__udivmodsi4>
    5496:	21 50       	subi	r18, 0x01	; 1
    5498:	31 09       	sbc	r19, r1
	UBRR0H=(uint8_t) (ubrr>>8);	//UBRRH = (uint8_t) (ubrr>>8);
    549a:	30 93 c5 00 	sts	0x00C5, r19
	UBRR0L=(uint8_t) (ubrr);	//UBRRL = (uint8_t) (ubrr);
    549e:	20 93 c4 00 	sts	0x00C4, r18

	// Disable interrupts for a short while
	cli();
    54a2:	f8 94       	cli

	// all defaults for UCSRA
	UCSR0A=0x00;
    54a4:	10 92 c0 00 	sts	0x00C0, r1
	// turn on Rx, Tx and set to generate interrupts when Rx got a character
	UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);
    54a8:	88 e9       	ldi	r24, 0x98	; 152
    54aa:	80 93 c1 00 	sts	0x00C1, r24
	// Data mode 8N1,  asynchronous (UCSZ00=8bit,
	UCSR0C=(1 << UCSZ01) | (1 << UCSZ00);
    54ae:	86 e0       	ldi	r24, 0x06	; 6
    54b0:	80 93 c2 00 	sts	0x00C2, r24

	// Flush Receive-Buffer
	do
	{
		dummydata=UDR0; // put the read in something to avoid compiler warning.
    54b4:	80 91 c6 00 	lds	r24, 0x00C6
	}
	while (UCSR0A & (1 << RXC0)); // polling the receive complete bit
    54b8:	80 91 c0 00 	lds	r24, 0x00C0
    54bc:	87 fd       	sbrc	r24, 7
    54be:	fa cf       	rjmp	.-12     	; 0x54b4 <serial_init+0x54>

   // Reset Receive and Transmit Complete Flags
	UCSR0A = (1 << RXC0) | (1 << TXC0);
    54c0:	80 ec       	ldi	r24, 0xC0	; 192
    54c2:	80 93 c0 00 	sts	0x00C0, r24

    // Re-enable interrupts (don't see sei() call?)
    // Oh I see not needed, the global interrupt bit was part of saved SREG!)
    SREG = sreg;
    54c6:	cf bf       	out	0x3f, r28	; 63
    // adding it back, or forgetting might not allow serial to work
    sei();
    54c8:	78 94       	sei
    // Initialize input and output FIFOs
    fifo_init (&infifo,   inbuf, BUFSIZE_IN);
    54ca:	40 e4       	ldi	r20, 0x40	; 64
    54cc:	63 e4       	ldi	r22, 0x43	; 67
    54ce:	73 e0       	ldi	r23, 0x03	; 3
    54d0:	8b e8       	ldi	r24, 0x8B	; 139
    54d2:	93 e0       	ldi	r25, 0x03	; 3
    54d4:	0e 94 38 10 	call	0x2070	; 0x2070 <fifo_init>
    fifo_init (&outfifo, outbuf, BUFSIZE_OUT);
    54d8:	4f ef       	ldi	r20, 0xFF	; 255
    54da:	63 e9       	ldi	r22, 0x93	; 147
    54dc:	73 e0       	ldi	r23, 0x03	; 3
    54de:	83 e8       	ldi	r24, 0x83	; 131
    54e0:	93 e0       	ldi	r25, 0x03	; 3
}
    54e2:	cf 91       	pop	r28
    SREG = sreg;
    // adding it back, or forgetting might not allow serial to work
    sei();
    // Initialize input and output FIFOs
    fifo_init (&infifo,   inbuf, BUFSIZE_IN);
    fifo_init (&outfifo, outbuf, BUFSIZE_OUT);
    54e4:	0c 94 38 10 	jmp	0x2070	; 0x2070 <fifo_init>

000054e8 <serial_init_9600b8N1>:
	// Set Parity Check: UPM1 to 1
	// Set Parity Type: UPM0 to odd or even

   *********************************************/
    uint8_t dummydata;		// to avoid warning from compiler later
    uint8_t sreg = SREG;	// save status register
    54e8:	9f b7       	in	r25, 0x3f	; 63

    // bit rate calculation
	uint16_t ubrr = (uint16_t) ((uint32_t) F_CPU/(16UL*baudrate) - 1);
	UBRR0H=(uint8_t) (ubrr>>8);	//UBRRH = (uint8_t) (ubrr>>8);
    54ea:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L=(uint8_t) (ubrr);	//UBRRL = (uint8_t) (ubrr);
    54ee:	87 e6       	ldi	r24, 0x67	; 103
    54f0:	80 93 c4 00 	sts	0x00C4, r24

	// Disable interrupts for a short while
	cli();
    54f4:	f8 94       	cli

	// all defaults for UCSRA
	UCSR0A=0x00;
    54f6:	10 92 c0 00 	sts	0x00C0, r1
	// turn on Rx, Tx and set to generate interrupts when Rx got a character
	UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);
    54fa:	88 e9       	ldi	r24, 0x98	; 152
    54fc:	80 93 c1 00 	sts	0x00C1, r24
	// Data mode 8N1,  asynchronous (UCSZ00=8bit,
	UCSR0C=(1 << UCSZ01) | (1 << UCSZ00);
    5500:	86 e0       	ldi	r24, 0x06	; 6
    5502:	80 93 c2 00 	sts	0x00C2, r24

	// Flush Receive-Buffer
	do
	{
		dummydata=UDR0; // put the read in something to avoid compiler warning.
    5506:	80 91 c6 00 	lds	r24, 0x00C6
	}
	while (UCSR0A & (1 << RXC0)); // polling the receive complete bit
    550a:	80 91 c0 00 	lds	r24, 0x00C0
    550e:	87 fd       	sbrc	r24, 7
    5510:	fa cf       	rjmp	.-12     	; 0x5506 <serial_init_9600b8N1+0x1e>

   // Reset Receive and Transmit Complete Flags
	UCSR0A = (1 << RXC0) | (1 << TXC0);
    5512:	80 ec       	ldi	r24, 0xC0	; 192
    5514:	80 93 c0 00 	sts	0x00C0, r24

    // Re-enable interrupts (don't see sei() call?)
    // Oh I see not needed, the global interrupt bit was part of saved SREG!)
    SREG = sreg;
    5518:	9f bf       	out	0x3f, r25	; 63
    // adding it back, or forgetting might not allow serial to work
    sei();
    551a:	78 94       	sei
    // Initialize input and output FIFOs
    fifo_init (&infifo,   inbuf, BUFSIZE_IN);
    551c:	40 e4       	ldi	r20, 0x40	; 64
    551e:	63 e4       	ldi	r22, 0x43	; 67
    5520:	73 e0       	ldi	r23, 0x03	; 3
    5522:	8b e8       	ldi	r24, 0x8B	; 139
    5524:	93 e0       	ldi	r25, 0x03	; 3
    5526:	0e 94 38 10 	call	0x2070	; 0x2070 <fifo_init>
    fifo_init (&outfifo, outbuf, BUFSIZE_OUT);
    552a:	4f ef       	ldi	r20, 0xFF	; 255
    552c:	63 e9       	ldi	r22, 0x93	; 147
    552e:	73 e0       	ldi	r23, 0x03	; 3
    5530:	83 e8       	ldi	r24, 0x83	; 131
    5532:	93 e0       	ldi	r25, 0x03	; 3
    5534:	0c 94 38 10 	jmp	0x2070	; 0x2070 <fifo_init>

00005538 <serial_init_9600b7E1>:
	// Set Parity Check: UPM1 to 1
	// Set Parity Type: UPM0 to odd or even

   *********************************************/
    uint8_t dummydata;		// to avoid warning from compiler later
    uint8_t sreg = SREG;	// save status register
    5538:	9f b7       	in	r25, 0x3f	; 63

    // bit rate calculation
	uint16_t ubrr = (uint16_t) ((uint32_t) F_CPU/(16UL*baudrate) - 1);
	UBRR0H=(uint8_t) (ubrr>>8);	//UBRRH = (uint8_t) (ubrr>>8);
    553a:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L=(uint8_t) (ubrr);	//UBRRL = (uint8_t) (ubrr);
    553e:	87 e6       	ldi	r24, 0x67	; 103
    5540:	80 93 c4 00 	sts	0x00C4, r24

	// Disable interrupts for a short while
	cli();
    5544:	f8 94       	cli

	// all defaults for UCSRA
	UCSR0A=0x00;
    5546:	10 92 c0 00 	sts	0x00C0, r1
	// turn on Rx, Tx and set to generate interrupts when Rx got a character
	UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);
    554a:	88 e9       	ldi	r24, 0x98	; 152
    554c:	80 93 c1 00 	sts	0x00C1, r24
	// Data mode 8N1,  asynchronous (UCSZ00=8bit,
	UCSR0C=(1 << UCSZ01) | (1 << UCSZ00);
    5550:	86 e0       	ldi	r24, 0x06	; 6
    5552:	80 93 c2 00 	sts	0x00C2, r24

	// Flush Receive-Buffer
	do
	{
		dummydata=UDR0; // put the read in something to avoid compiler warning.
    5556:	80 91 c6 00 	lds	r24, 0x00C6
	}
	while (UCSR0A & (1 << RXC0)); // polling the receive complete bit
    555a:	80 91 c0 00 	lds	r24, 0x00C0
    555e:	87 fd       	sbrc	r24, 7
    5560:	fa cf       	rjmp	.-12     	; 0x5556 <serial_init_9600b7E1+0x1e>

   // Reset Receive and Transmit Complete Flags
	UCSR0A = (1 << RXC0) | (1 << TXC0);
    5562:	80 ec       	ldi	r24, 0xC0	; 192
    5564:	80 93 c0 00 	sts	0x00C0, r24

    // Re-enable interrupts (don't see sei() call?)
    // Oh I see not needed, the global interrupt bit was part of saved SREG!)
    SREG = sreg;
    5568:	9f bf       	out	0x3f, r25	; 63
    // adding it back, or forgetting might not allow serial to work
    sei();
    556a:	78 94       	sei
    // Initialize input and output FIFOs
    fifo_init (&infifo,   inbuf, BUFSIZE_IN);
    556c:	40 e4       	ldi	r20, 0x40	; 64
    556e:	63 e4       	ldi	r22, 0x43	; 67
    5570:	73 e0       	ldi	r23, 0x03	; 3
    5572:	8b e8       	ldi	r24, 0x8B	; 139
    5574:	93 e0       	ldi	r25, 0x03	; 3
    5576:	0e 94 38 10 	call	0x2070	; 0x2070 <fifo_init>
    fifo_init (&outfifo, outbuf, BUFSIZE_OUT);
    557a:	4f ef       	ldi	r20, 0xFF	; 255
    557c:	63 e9       	ldi	r22, 0x93	; 147
    557e:	73 e0       	ldi	r23, 0x03	; 3
    5580:	83 e8       	ldi	r24, 0x83	; 131
    5582:	93 e0       	ldi	r25, 0x03	; 3
    5584:	0e 94 38 10 	call	0x2070	; 0x2070 <fifo_init>

void serial_init_9600b7E1(void) // 9600 bauds, 7 bits, 1 stop, even parity
{
	serial_init(9600);
	// override control register 0C
	UCSR0C=B00100100;		// 7 bits, 1 stop bit, even parity, asynchronous
    5588:	84 e2       	ldi	r24, 0x24	; 36
    558a:	80 93 c2 00 	sts	0x00C2, r24
    558e:	08 95       	ret

00005590 <serial_enable_rx_interrupt>:

void serial_enable_rx_interrupt(void)
{
    // enable receive complete interrupt
	// (note: this is enabled by default after init)
    UCSR0B |= _BV(RXCIE0);
    5590:	e1 ec       	ldi	r30, 0xC1	; 193
    5592:	f0 e0       	ldi	r31, 0x00	; 0
    5594:	80 81       	ld	r24, Z
    5596:	80 68       	ori	r24, 0x80	; 128
    5598:	80 83       	st	Z, r24
    559a:	08 95       	ret

0000559c <serial_disable_rx_interrupt>:
}

void serial_disable_rx_interrupt(void)
{
	// disable receive complete interrupt
    UCSR0B &= ~_BV(RXCIE0);
    559c:	e1 ec       	ldi	r30, 0xC1	; 193
    559e:	f0 e0       	ldi	r31, 0x00	; 0
    55a0:	80 81       	ld	r24, Z
    55a2:	8f 77       	andi	r24, 0x7F	; 127
    55a4:	80 83       	st	Z, r24
    55a6:	08 95       	ret

000055a8 <__vector_18>:
// generic one not implemented yet
//void uart1_init(int baudrate, int databits, int stopbits, int parity){}

// Input Interrupt - can't do any simpler, just store input in FIFO...
ISR (USART_RX_vect)
{
    55a8:	1f 92       	push	r1
    55aa:	0f 92       	push	r0
    55ac:	0f b6       	in	r0, 0x3f	; 63
    55ae:	0f 92       	push	r0
    55b0:	11 24       	eor	r1, r1
    55b2:	2f 93       	push	r18
    55b4:	8f 93       	push	r24
    55b6:	9f 93       	push	r25
    55b8:	ef 93       	push	r30
    55ba:	ff 93       	push	r31
    _inline_fifo_put (&infifo, UDR0);
    55bc:	20 91 c6 00 	lds	r18, 0x00C6
// add a character to the buffer
static inline uint8_t
_inline_fifo_put (fifo_t *f, const uint8_t data)
{
	// return if no more space
	if (f->count >= f->size)
    55c0:	90 91 8b 03 	lds	r25, 0x038B
    55c4:	80 91 8c 03 	lds	r24, 0x038C
    55c8:	98 17       	cp	r25, r24
    55ca:	c8 f4       	brcc	.+50     	; 0x55fe <__vector_18+0x56>
		return 0;
	// get the write pointer
	uint8_t * pwrite = f->pwrite;
    55cc:	e0 91 8f 03 	lds	r30, 0x038F
    55d0:	f0 91 90 03 	lds	r31, 0x0390
	// write the byte, THEN move pointer to the next position
	*(pwrite++) = data;
    55d4:	cf 01       	movw	r24, r30
    55d6:	01 96       	adiw	r24, 0x01	; 1
    55d8:	20 83       	st	Z, r18
	// get the numbers of bytes left till end of buffer
	uint8_t write2end = f->write2end;
    55da:	20 91 92 03 	lds	r18, 0x0392
	// decrement numbers of bytes left, THEN test for none left
	if (--write2end == 0)
    55de:	21 50       	subi	r18, 0x01	; 1
    55e0:	c1 f0       	breq	.+48     	; 0x5612 <__vector_18+0x6a>
		write2end = f->size;	// size to end of linear buffer
		pwrite -= write2end;	// rewind the write pointer to the beginning
	}
	
	// store updated values of write pointers and write to end # of bytes
	f->write2end = write2end;
    55e2:	20 93 92 03 	sts	0x0392, r18
	f->pwrite = pwrite;
    55e6:	90 93 90 03 	sts	0x0390, r25
    55ea:	80 93 8f 03 	sts	0x038F, r24

	// block interrupts while we update count, so it does not change in interrupt context while we read it
	uint8_t sreg = SREG;	// save status register
    55ee:	9f b7       	in	r25, 0x3f	; 63
	cli();					// no interrupts
    55f0:	f8 94       	cli
	f->count++;				// update count, we stored one more byte
    55f2:	80 91 8b 03 	lds	r24, 0x038B
    55f6:	8f 5f       	subi	r24, 0xFF	; 255
    55f8:	80 93 8b 03 	sts	0x038B, r24
	SREG = sreg;			// reset status register
    55fc:	9f bf       	out	0x3f, r25	; 63
}
    55fe:	ff 91       	pop	r31
    5600:	ef 91       	pop	r30
    5602:	9f 91       	pop	r25
    5604:	8f 91       	pop	r24
    5606:	2f 91       	pop	r18
    5608:	0f 90       	pop	r0
    560a:	0f be       	out	0x3f, r0	; 63
    560c:	0f 90       	pop	r0
    560e:	1f 90       	pop	r1
    5610:	18 95       	reti
	uint8_t write2end = f->write2end;
	// decrement numbers of bytes left, THEN test for none left
	if (--write2end == 0)
	{
		// if end of linear buffer, rewind at beginning of buffer (this is implemented as a circular buffer)
		write2end = f->size;	// size to end of linear buffer
    5612:	20 91 8c 03 	lds	r18, 0x038C
		pwrite -= write2end;	// rewind the write pointer to the beginning
    5616:	82 1b       	sub	r24, r18
    5618:	91 09       	sbc	r25, r1
    561a:	e3 cf       	rjmp	.-58     	; 0x55e2 <__vector_18+0x3a>

0000561c <__vector_19>:
// Read a byte from the output fifo and send it
// Another interrupt will be triggered as soon as one byte is done sending.
// The interrupt routine will deactivate itself when the Fifo is empty
// The serial_putc routine resets the interrupt on to start the process
ISR(USART_UDRE_vect)
{
    561c:	1f 92       	push	r1
    561e:	0f 92       	push	r0
    5620:	0f b6       	in	r0, 0x3f	; 63
    5622:	0f 92       	push	r0
    5624:	11 24       	eor	r1, r1
    5626:	2f 93       	push	r18
    5628:	3f 93       	push	r19
    562a:	8f 93       	push	r24
    562c:	9f 93       	push	r25
    562e:	ef 93       	push	r30
    5630:	ff 93       	push	r31
    // send out byte if there is one waiting
	if (outfifo.count > 0)
    5632:	80 91 83 03 	lds	r24, 0x0383
    5636:	81 11       	cpse	r24, r1
    5638:	10 c0       	rjmp	.+32     	; 0x565a <__vector_19+0x3e>
       UDR0 = _inline_fifo_get (&outfifo);
	// no more bytes, deactivate send interrupts
    else
        UCSR0B &= ~(1 << UDRIE0);
    563a:	80 91 c1 00 	lds	r24, 0x00C1
    563e:	8f 7d       	andi	r24, 0xDF	; 223
    5640:	80 93 c1 00 	sts	0x00C1, r24
}
    5644:	ff 91       	pop	r31
    5646:	ef 91       	pop	r30
    5648:	9f 91       	pop	r25
    564a:	8f 91       	pop	r24
    564c:	3f 91       	pop	r19
    564e:	2f 91       	pop	r18
    5650:	0f 90       	pop	r0
    5652:	0f be       	out	0x3f, r0	; 63
    5654:	0f 90       	pop	r0
    5656:	1f 90       	pop	r1
    5658:	18 95       	reti
// read a character from the buffer
static inline uint8_t 
_inline_fifo_get (fifo_t *f)
{
	// get the read pointer
	uint8_t *pread = f->pread;
    565a:	e0 91 85 03 	lds	r30, 0x0385
    565e:	f0 91 86 03 	lds	r31, 0x0386
	// read the data, THEN advance the pointer
	uint8_t data = *(pread++);
    5662:	cf 01       	movw	r24, r30
    5664:	01 96       	adiw	r24, 0x01	; 1
    5666:	30 81       	ld	r19, Z
	// get the size till end number
	uint8_t read2end = f->read2end;
    5668:	20 91 89 03 	lds	r18, 0x0389
	
	// decrement size, THEN test no space left
	if (--read2end == 0)
    566c:	21 50       	subi	r18, 0x01	; 1
    566e:	21 f4       	brne	.+8      	; 0x5678 <__vector_19+0x5c>
	{
		// if end of linear buffer, rewind to beginning (circular buffer)
		read2end = f->size;	// full buffer available for read
    5670:	20 91 84 03 	lds	r18, 0x0384
		pread -= read2end;	// move read pointer to beginning
    5674:	82 1b       	sub	r24, r18
    5676:	91 09       	sbc	r25, r1
	}
	
	// update the read pointer and read2end values
	f->pread = pread;
    5678:	90 93 86 03 	sts	0x0386, r25
    567c:	80 93 85 03 	sts	0x0385, r24
	f->read2end = read2end;
    5680:	20 93 89 03 	sts	0x0389, r18
	
	// update count, making sure that nobody elses accesses it in interrupt
	uint8_t sreg = SREG;
    5684:	9f b7       	in	r25, 0x3f	; 63
	cli();
    5686:	f8 94       	cli
	f->count--;
    5688:	80 91 83 03 	lds	r24, 0x0383
    568c:	81 50       	subi	r24, 0x01	; 1
    568e:	80 93 83 03 	sts	0x0383, r24
	SREG = sreg;
    5692:	9f bf       	out	0x3f, r25	; 63
// The serial_putc routine resets the interrupt on to start the process
ISR(USART_UDRE_vect)
{
    // send out byte if there is one waiting
	if (outfifo.count > 0)
       UDR0 = _inline_fifo_get (&outfifo);
    5694:	30 93 c6 00 	sts	0x00C6, r19
    5698:	d5 cf       	rjmp	.-86     	; 0x5644 <__vector_19+0x28>

0000569a <serial_putc>:
// Add character to output buffer, and try to send
// returns 0 if buffer full, 1 if success
uint8_t serial_putc(unsigned char ch)
{
	// add character to output buffer
	uint8_t ret = fifo_put (&outfifo, ch);
    569a:	68 2f       	mov	r22, r24
    569c:	83 e8       	ldi	r24, 0x83	; 131
    569e:	93 e0       	ldi	r25, 0x03	; 3
    56a0:	0e 94 42 10 	call	0x2084	; 0x2084 <fifo_put>
	// set interrupt on empty out queue to call ISR
	UCSR0B |= (1 << UDRIE0);
    56a4:	e1 ec       	ldi	r30, 0xC1	; 193
    56a6:	f0 e0       	ldi	r31, 0x00	; 0
    56a8:	90 81       	ld	r25, Z
    56aa:	90 62       	ori	r25, 0x20	; 32
    56ac:	90 83       	st	Z, r25
	return ret;
}
    56ae:	08 95       	ret

000056b0 <serial_available>:

// check if receive characters available
uint8_t serial_available()
{
	return fifo_available(&infifo);
    56b0:	8b e8       	ldi	r24, 0x8B	; 139
    56b2:	93 e0       	ldi	r25, 0x03	; 3
    56b4:	0e 94 97 10 	call	0x212e	; 0x212e <fifo_available>
}
    56b8:	08 95       	ret

000056ba <serial_tx_complete>:

// check if ready to transmit (output buffer full)
// use this one to wait and avoid overrunning the output buffer
uint8_t serial_tx_complete()
{
	return !fifo_available(&outfifo);
    56ba:	83 e8       	ldi	r24, 0x83	; 131
    56bc:	93 e0       	ldi	r25, 0x03	; 3
    56be:	0e 94 97 10 	call	0x212e	; 0x212e <fifo_available>
    56c2:	21 e0       	ldi	r18, 0x01	; 1
    56c4:	89 2b       	or	r24, r25
    56c6:	09 f0       	breq	.+2      	; 0x56ca <serial_tx_complete+0x10>
    56c8:	20 e0       	ldi	r18, 0x00	; 0
}
    56ca:	82 2f       	mov	r24, r18
    56cc:	08 95       	ret

000056ce <serial_getc>:

// this one is only valid if some char available, if not returns 0xFF
// so check serial_available() beforehand
unsigned char serial_getc (void)
{
    return fifo_get_nowait (&infifo);
    56ce:	8b e8       	ldi	r24, 0x8B	; 139
    56d0:	93 e0       	ldi	r25, 0x03	; 3
    56d2:	0e 94 79 10 	call	0x20f2	; 0x20f2 <fifo_get_nowait>
}
    56d6:	08 95       	ret

000056d8 <serial_getc_nowait>:

// returns -1 if no characters available, only works for 7 bit ASCII
int8_t serial_getc_nowait (void)
{
    return fifo_get_nowait (&infifo);
    56d8:	8b e8       	ldi	r24, 0x8B	; 139
    56da:	93 e0       	ldi	r25, 0x03	; 3
    56dc:	0e 94 79 10 	call	0x20f2	; 0x20f2 <fifo_get_nowait>
}
    56e0:	08 95       	ret

000056e2 <serial_getc_wait>:

unsigned char serial_getc_wait (void)
{
    return fifo_get_wait (&infifo);
    56e2:	8b e8       	ldi	r24, 0x8B	; 139
    56e4:	93 e0       	ldi	r25, 0x03	; 3
    56e6:	0c 94 5f 10 	jmp	0x20be	; 0x20be <fifo_get_wait>

000056ea <serial_puts>:
}

// If the output buffer is full, this will wait for serial buffer clear before returning
// all characters are sent guaranteed
void serial_puts(char* string)
{
    56ea:	ff 92       	push	r15
    56ec:	0f 93       	push	r16
    56ee:	1f 93       	push	r17
    56f0:	cf 93       	push	r28
    56f2:	df 93       	push	r29
    56f4:	8c 01       	movw	r16, r24
	uint8_t i=0;
	while( (string[i]!='\0') & (i<255))
    56f6:	fc 01       	movw	r30, r24
    56f8:	80 81       	ld	r24, Z
    56fa:	88 23       	and	r24, r24
    56fc:	c9 f0       	breq	.+50     	; 0x5730 <serial_puts+0x46>
    56fe:	e8 01       	movw	r28, r16

// If the output buffer is full, this will wait for serial buffer clear before returning
// all characters are sent guaranteed
void serial_puts(char* string)
{
	uint8_t i=0;
    5700:	f1 2c       	mov	r15, r1

// check if ready to transmit (output buffer full)
// use this one to wait and avoid overrunning the output buffer
uint8_t serial_tx_complete()
{
	return !fifo_available(&outfifo);
    5702:	83 e8       	ldi	r24, 0x83	; 131
    5704:	93 e0       	ldi	r25, 0x03	; 3
    5706:	0e 94 97 10 	call	0x212e	; 0x212e <fifo_available>
void serial_puts(char* string)
{
	uint8_t i=0;
	while( (string[i]!='\0') & (i<255))
	{
		while(!serial_tx_complete()){};
    570a:	89 2b       	or	r24, r25
    570c:	d1 f7       	brne	.-12     	; 0x5702 <serial_puts+0x18>
// Add character to output buffer, and try to send
// returns 0 if buffer full, 1 if success
uint8_t serial_putc(unsigned char ch)
{
	// add character to output buffer
	uint8_t ret = fifo_put (&outfifo, ch);
    570e:	68 81       	ld	r22, Y
    5710:	83 e8       	ldi	r24, 0x83	; 131
    5712:	93 e0       	ldi	r25, 0x03	; 3
    5714:	0e 94 42 10 	call	0x2084	; 0x2084 <fifo_put>
	// set interrupt on empty out queue to call ISR
	UCSR0B |= (1 << UDRIE0);
    5718:	80 91 c1 00 	lds	r24, 0x00C1
    571c:	80 62       	ori	r24, 0x20	; 32
    571e:	80 93 c1 00 	sts	0x00C1, r24
	uint8_t i=0;
	while( (string[i]!='\0') & (i<255))
	{
		while(!serial_tx_complete()){};
		serial_putc(string[i]);
	 	i++;
    5722:	f3 94       	inc	r15
// If the output buffer is full, this will wait for serial buffer clear before returning
// all characters are sent guaranteed
void serial_puts(char* string)
{
	uint8_t i=0;
	while( (string[i]!='\0') & (i<255))
    5724:	e8 01       	movw	r28, r16
    5726:	cf 0d       	add	r28, r15
    5728:	d1 1d       	adc	r29, r1
    572a:	88 81       	ld	r24, Y
    572c:	81 11       	cpse	r24, r1
    572e:	06 c0       	rjmp	.+12     	; 0x573c <serial_puts+0x52>
	{
		while(!serial_tx_complete()){};
		serial_putc(string[i]);
	 	i++;
	}
}
    5730:	df 91       	pop	r29
    5732:	cf 91       	pop	r28
    5734:	1f 91       	pop	r17
    5736:	0f 91       	pop	r16
    5738:	ff 90       	pop	r15
    573a:	08 95       	ret
// If the output buffer is full, this will wait for serial buffer clear before returning
// all characters are sent guaranteed
void serial_puts(char* string)
{
	uint8_t i=0;
	while( (string[i]!='\0') & (i<255))
    573c:	ff ef       	ldi	r31, 0xFF	; 255
    573e:	ff 12       	cpse	r15, r31
    5740:	e0 cf       	rjmp	.-64     	; 0x5702 <serial_puts+0x18>
	{
		while(!serial_tx_complete()){};
		serial_putc(string[i]);
	 	i++;
	}
}
    5742:	df 91       	pop	r29
    5744:	cf 91       	pop	r28
    5746:	1f 91       	pop	r17
    5748:	0f 91       	pop	r16
    574a:	ff 90       	pop	r15
    574c:	08 95       	ret

0000574e <serial_puts_nowait>:

//this version will return no matter what, not waiting for serial buffer to clear
//if the output buffer is full some character will be lost
uint8_t serial_puts_nowait(char* string)
{
    574e:	0f 93       	push	r16
    5750:	1f 93       	push	r17
    5752:	cf 93       	push	r28
    5754:	df 93       	push	r29
    5756:	ec 01       	movw	r28, r24
	uint8_t i=0;
	uint8_t noerror=1;
	while( (string[i]!='\0') & (i<255))
    5758:	68 81       	ld	r22, Y
//this version will return no matter what, not waiting for serial buffer to clear
//if the output buffer is full some character will be lost
uint8_t serial_puts_nowait(char* string)
{
	uint8_t i=0;
	uint8_t noerror=1;
    575a:	01 e0       	ldi	r16, 0x01	; 1
	while( (string[i]!='\0') & (i<255))
    575c:	66 23       	and	r22, r22
    575e:	91 f0       	breq	.+36     	; 0x5784 <serial_puts_nowait+0x36>

//this version will return no matter what, not waiting for serial buffer to clear
//if the output buffer is full some character will be lost
uint8_t serial_puts_nowait(char* string)
{
	uint8_t i=0;
    5760:	10 e0       	ldi	r17, 0x00	; 0
// Add character to output buffer, and try to send
// returns 0 if buffer full, 1 if success
uint8_t serial_putc(unsigned char ch)
{
	// add character to output buffer
	uint8_t ret = fifo_put (&outfifo, ch);
    5762:	83 e8       	ldi	r24, 0x83	; 131
    5764:	93 e0       	ldi	r25, 0x03	; 3
    5766:	0e 94 42 10 	call	0x2084	; 0x2084 <fifo_put>
	// set interrupt on empty out queue to call ISR
	UCSR0B |= (1 << UDRIE0);
    576a:	90 91 c1 00 	lds	r25, 0x00C1
    576e:	90 62       	ori	r25, 0x20	; 32
    5770:	90 93 c1 00 	sts	0x00C1, r25
{
	uint8_t i=0;
	uint8_t noerror=1;
	while( (string[i]!='\0') & (i<255))
	{
		noerror &= serial_putc(string[i]); // if an overflow occurs, force noerror to 0
    5774:	08 23       	and	r16, r24
	 	i++;
    5776:	1f 5f       	subi	r17, 0xFF	; 255
//if the output buffer is full some character will be lost
uint8_t serial_puts_nowait(char* string)
{
	uint8_t i=0;
	uint8_t noerror=1;
	while( (string[i]!='\0') & (i<255))
    5778:	fe 01       	movw	r30, r28
    577a:	e1 0f       	add	r30, r17
    577c:	f1 1d       	adc	r31, r1
    577e:	60 81       	ld	r22, Z
    5780:	61 11       	cpse	r22, r1
    5782:	06 c0       	rjmp	.+12     	; 0x5790 <serial_puts_nowait+0x42>
	{
		noerror &= serial_putc(string[i]); // if an overflow occurs, force noerror to 0
	 	i++;
	}
	return noerror;
}
    5784:	80 2f       	mov	r24, r16
    5786:	df 91       	pop	r29
    5788:	cf 91       	pop	r28
    578a:	1f 91       	pop	r17
    578c:	0f 91       	pop	r16
    578e:	08 95       	ret
//if the output buffer is full some character will be lost
uint8_t serial_puts_nowait(char* string)
{
	uint8_t i=0;
	uint8_t noerror=1;
	while( (string[i]!='\0') & (i<255))
    5790:	1f 3f       	cpi	r17, 0xFF	; 255
    5792:	39 f7       	brne	.-50     	; 0x5762 <serial_puts_nowait+0x14>
	{
		noerror &= serial_putc(string[i]); // if an overflow occurs, force noerror to 0
	 	i++;
	}
	return noerror;
}
    5794:	80 2f       	mov	r24, r16
    5796:	df 91       	pop	r29
    5798:	cf 91       	pop	r28
    579a:	1f 91       	pop	r17
    579c:	0f 91       	pop	r16
    579e:	08 95       	ret

000057a0 <serial_puts_p>:
#include <avr/pgmspace.h> // optional, already included in this header
const char string[] PROGMEM = "Hello World";
serial_puts_p(string);
**************************************************************************/
void serial_puts_p(const char *progmem_s )
{
    57a0:	1f 93       	push	r17
    57a2:	cf 93       	push	r28
    57a4:	df 93       	push	r29
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) )
    57a6:	ec 01       	movw	r28, r24
    57a8:	21 96       	adiw	r28, 0x01	; 1
    57aa:	fc 01       	movw	r30, r24
    57ac:	14 91       	lpm	r17, Z
    57ae:	11 23       	and	r17, r17
    57b0:	a9 f0       	breq	.+42     	; 0x57dc <serial_puts_p+0x3c>

// check if ready to transmit (output buffer full)
// use this one to wait and avoid overrunning the output buffer
uint8_t serial_tx_complete()
{
	return !fifo_available(&outfifo);
    57b2:	83 e8       	ldi	r24, 0x83	; 131
    57b4:	93 e0       	ldi	r25, 0x03	; 3
    57b6:	0e 94 97 10 	call	0x212e	; 0x212e <fifo_available>
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
    	while(!serial_tx_complete()){};	// wait for serial buffer availability
    57ba:	89 2b       	or	r24, r25
    57bc:	d1 f7       	brne	.-12     	; 0x57b2 <serial_puts_p+0x12>
// Add character to output buffer, and try to send
// returns 0 if buffer full, 1 if success
uint8_t serial_putc(unsigned char ch)
{
	// add character to output buffer
	uint8_t ret = fifo_put (&outfifo, ch);
    57be:	61 2f       	mov	r22, r17
    57c0:	83 e8       	ldi	r24, 0x83	; 131
    57c2:	93 e0       	ldi	r25, 0x03	; 3
    57c4:	0e 94 42 10 	call	0x2084	; 0x2084 <fifo_put>
	// set interrupt on empty out queue to call ISR
	UCSR0B |= (1 << UDRIE0);
    57c8:	80 91 c1 00 	lds	r24, 0x00C1
    57cc:	80 62       	ori	r24, 0x20	; 32
    57ce:	80 93 c1 00 	sts	0x00C1, r24
**************************************************************************/
void serial_puts_p(const char *progmem_s )
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) )
    57d2:	fe 01       	movw	r30, r28
    57d4:	14 91       	lpm	r17, Z
    57d6:	21 96       	adiw	r28, 0x01	; 1
    57d8:	11 11       	cpse	r17, r1
    57da:	eb cf       	rjmp	.-42     	; 0x57b2 <serial_puts_p+0x12>
    {
    	while(!serial_tx_complete()){};	// wait for serial buffer availability
    	serial_putc(c);
    }
}
    57dc:	df 91       	pop	r29
    57de:	cf 91       	pop	r28
    57e0:	1f 91       	pop	r17
    57e2:	08 95       	ret

000057e4 <servo_init>:
 * Set counter1 to 0.5 us ticks on 16 MHz clock
 * Enable overflow interrupts
 * Start by counting a long pause
 * *********************************************/
void servo_init()
{
    57e4:	2f 92       	push	r2
    57e6:	3f 92       	push	r3
    57e8:	5f 92       	push	r5
    57ea:	6f 92       	push	r6
    57ec:	7f 92       	push	r7
    57ee:	8f 92       	push	r8
    57f0:	9f 92       	push	r9
    57f2:	af 92       	push	r10
    57f4:	bf 92       	push	r11
    57f6:	cf 92       	push	r12
    57f8:	df 92       	push	r13
    57fa:	ef 92       	push	r14
    57fc:	ff 92       	push	r15
    57fe:	0f 93       	push	r16
    5800:	1f 93       	push	r17
    5802:	cf 93       	push	r28
    5804:	df 93       	push	r29
    5806:	00 d0       	rcall	.+0      	; 0x5808 <servo_init+0x24>
    5808:	cd b7       	in	r28, 0x3d	; 61
    580a:	de b7       	in	r29, 0x3e	; 62
    580c:	48 e1       	ldi	r20, 0x18	; 24
    580e:	50 e0       	ldi	r21, 0x00	; 0
    5810:	6f ef       	ldi	r22, 0xFF	; 255
    5812:	7f ef       	ldi	r23, 0xFF	; 255
    5814:	82 e9       	ldi	r24, 0x92	; 146
    5816:	94 e0       	ldi	r25, 0x04	; 4
    5818:	0e 94 3e 36 	call	0x6c7c	; 0x6c7c <memset>
	{
		servo_value[i]=SERVO_NO_PULSE; // manipulate directly (could call servo_set() instead)
	}

	// store servo PORTx register addresses in servo_port array
	servo_port[0]=&SERVO1_PORT;
    581c:	ec eb       	ldi	r30, 0xBC	; 188
    581e:	f4 e0       	ldi	r31, 0x04	; 4
    5820:	8b e2       	ldi	r24, 0x2B	; 43
    5822:	90 e0       	ldi	r25, 0x00	; 0
    5824:	91 83       	std	Z+1, r25	; 0x01
    5826:	80 83       	st	Z, r24
	servo_port[1]=&SERVO2_PORT;
    5828:	2e eb       	ldi	r18, 0xBE	; 190
    582a:	e2 2e       	mov	r14, r18
    582c:	24 e0       	ldi	r18, 0x04	; 4
    582e:	f2 2e       	mov	r15, r18
    5830:	d7 01       	movw	r26, r14
    5832:	8d 93       	st	X+, r24
    5834:	9c 93       	st	X, r25
	servo_port[2]=&SERVO3_PORT;
    5836:	60 ec       	ldi	r22, 0xC0	; 192
    5838:	74 e0       	ldi	r23, 0x04	; 4
    583a:	db 01       	movw	r26, r22
    583c:	8d 93       	st	X+, r24
    583e:	9c 93       	st	X, r25
	servo_port[3]=&SERVO4_PORT;
    5840:	32 ec       	ldi	r19, 0xC2	; 194
    5842:	a3 2e       	mov	r10, r19
    5844:	34 e0       	ldi	r19, 0x04	; 4
    5846:	b3 2e       	mov	r11, r19
    5848:	d5 01       	movw	r26, r10
    584a:	8d 93       	st	X+, r24
    584c:	9c 93       	st	X, r25
	servo_port[4]=&SERVO5_PORT;
    584e:	44 ec       	ldi	r20, 0xC4	; 196
    5850:	64 2e       	mov	r6, r20
    5852:	44 e0       	ldi	r20, 0x04	; 4
    5854:	74 2e       	mov	r7, r20
    5856:	d3 01       	movw	r26, r6
    5858:	8d 93       	st	X+, r24
    585a:	9c 93       	st	X, r25
	servo_port[5]=&SERVO6_PORT;
    585c:	85 e2       	ldi	r24, 0x25	; 37
    585e:	90 e0       	ldi	r25, 0x00	; 0
    5860:	a6 ec       	ldi	r26, 0xC6	; 198
    5862:	b4 e0       	ldi	r27, 0x04	; 4
    5864:	8d 93       	st	X+, r24
    5866:	9c 93       	st	X, r25
	servo_port[6]=&SERVO7_PORT;
    5868:	a8 ec       	ldi	r26, 0xC8	; 200
    586a:	b4 e0       	ldi	r27, 0x04	; 4
    586c:	8d 93       	st	X+, r24
    586e:	9c 93       	st	X, r25
	servo_port[7]=&SERVO8_PORT;
    5870:	aa ec       	ldi	r26, 0xCA	; 202
    5872:	b4 e0       	ldi	r27, 0x04	; 4
    5874:	8d 93       	st	X+, r24
    5876:	9c 93       	st	X, r25
	servo_port[8]=&SERVO9_PORT;
    5878:	ac ec       	ldi	r26, 0xCC	; 204
    587a:	b4 e0       	ldi	r27, 0x04	; 4
    587c:	8d 93       	st	X+, r24
    587e:	9c 93       	st	X, r25
	servo_port[9]=&SERVO10_PORT;
    5880:	ae ec       	ldi	r26, 0xCE	; 206
    5882:	b4 e0       	ldi	r27, 0x04	; 4
    5884:	8d 93       	st	X+, r24
    5886:	9c 93       	st	X, r25
	servo_port[10]=&SERVO11_PORT;
    5888:	90 93 d1 04 	sts	0x04D1, r25
    588c:	80 93 d0 04 	sts	0x04D0, r24
	servo_port[11]=&SERVO12_PORT;
    5890:	90 93 d3 04 	sts	0x04D3, r25
    5894:	80 93 d2 04 	sts	0x04D2, r24

	// store servo pins in servo_pin array
	servo_pin[0]= SERVO1_PIN;
    5898:	22 e0       	ldi	r18, 0x02	; 2
    589a:	af ea       	ldi	r26, 0xAF	; 175
    589c:	b4 e0       	ldi	r27, 0x04	; 4
    589e:	2c 93       	st	X, r18
	servo_pin[1]= SERVO2_PIN;
    58a0:	00 eb       	ldi	r16, 0xB0	; 176
    58a2:	14 e0       	ldi	r17, 0x04	; 4
    58a4:	53 e0       	ldi	r21, 0x03	; 3
    58a6:	d5 2e       	mov	r13, r21
    58a8:	d8 01       	movw	r26, r16
    58aa:	dc 92       	st	X, r13
	servo_pin[2]= SERVO3_PIN;
    58ac:	41 eb       	ldi	r20, 0xB1	; 177
    58ae:	54 e0       	ldi	r21, 0x04	; 4
    58b0:	94 e0       	ldi	r25, 0x04	; 4
    58b2:	da 01       	movw	r26, r20
    58b4:	9c 93       	st	X, r25
	servo_pin[3]= SERVO4_PIN;
    58b6:	a2 eb       	ldi	r26, 0xB2	; 178
    58b8:	8a 2e       	mov	r8, r26
    58ba:	a4 e0       	ldi	r26, 0x04	; 4
    58bc:	9a 2e       	mov	r9, r26
    58be:	85 e0       	ldi	r24, 0x05	; 5
    58c0:	d4 01       	movw	r26, r8
    58c2:	8c 93       	st	X, r24
	servo_pin[4]= SERVO5_PIN;
    58c4:	b3 eb       	ldi	r27, 0xB3	; 179
    58c6:	2b 2e       	mov	r2, r27
    58c8:	b4 e0       	ldi	r27, 0x04	; 4
    58ca:	3b 2e       	mov	r3, r27
    58cc:	36 e0       	ldi	r19, 0x06	; 6
    58ce:	d1 01       	movw	r26, r2
    58d0:	3c 93       	st	X, r19
	servo_pin[5]= SERVO6_PIN;
    58d2:	31 e0       	ldi	r19, 0x01	; 1
    58d4:	a4 eb       	ldi	r26, 0xB4	; 180
    58d6:	b4 e0       	ldi	r27, 0x04	; 4
    58d8:	3c 93       	st	X, r19
	servo_pin[6]= SERVO7_PIN;
    58da:	a5 eb       	ldi	r26, 0xB5	; 181
    58dc:	b4 e0       	ldi	r27, 0x04	; 4
    58de:	2c 93       	st	X, r18
	servo_pin[7]= SERVO8_PIN;
    58e0:	26 eb       	ldi	r18, 0xB6	; 182
    58e2:	34 e0       	ldi	r19, 0x04	; 4
    58e4:	d9 01       	movw	r26, r18
    58e6:	dc 92       	st	X, r13
	servo_pin[8]= SERVO9_PIN;
    58e8:	a7 eb       	ldi	r26, 0xB7	; 183
    58ea:	b4 e0       	ldi	r27, 0x04	; 4
    58ec:	9c 93       	st	X, r25
	servo_pin[9]= SERVO10_PIN;
    58ee:	a8 eb       	ldi	r26, 0xB8	; 184
    58f0:	b4 e0       	ldi	r27, 0x04	; 4
    58f2:	8c 93       	st	X, r24
	servo_pin[10]= SERVO11_PIN;
    58f4:	8b e0       	ldi	r24, 0x0B	; 11
    58f6:	80 93 b9 04 	sts	0x04B9, r24
	servo_pin[11]= SERVO12_PIN;
    58fa:	8c e0       	ldi	r24, 0x0C	; 12
    58fc:	80 93 ba 04 	sts	0x04BA, r24


	// Set all servo outputs pins to 0;
	for(i=0; i<SERVO_NUM; i++)
	{
		clear_bit(*servo_port[i], servo_pin[i]);
    5900:	81 e0       	ldi	r24, 0x01	; 1
    5902:	90 e0       	ldi	r25, 0x00	; 0
    5904:	5a 98       	cbi	0x0b, 2	; 11
    5906:	5b 98       	cbi	0x0b, 3	; 11
    5908:	5c 98       	cbi	0x0b, 4	; 11
    590a:	5d 98       	cbi	0x0b, 5	; 11
    590c:	5e 98       	cbi	0x0b, 6	; 11
    590e:	29 98       	cbi	0x05, 1	; 5
    5910:	2a 98       	cbi	0x05, 2	; 5
    5912:	2b 98       	cbi	0x05, 3	; 5
    5914:	2c 98       	cbi	0x05, 4	; 5
    5916:	2d 98       	cbi	0x05, 5	; 5
	}
	// Set all servo pins to output mode
	for(i=0; i<SERVO_NUM; i++)
	{
		set_bit(servo_DDR(*servo_port[i]), servo_pin[i]);
    5918:	01 90       	ld	r0, Z+
    591a:	f0 81       	ld	r31, Z
    591c:	e0 2d       	mov	r30, r0
    591e:	52 90       	ld	r5, -Z
    5920:	6c 01       	movw	r12, r24
    5922:	af ea       	ldi	r26, 0xAF	; 175
    5924:	b4 e0       	ldi	r27, 0x04	; 4
    5926:	0c 90       	ld	r0, X
    5928:	02 c0       	rjmp	.+4      	; 0x592e <servo_init+0x14a>
    592a:	cc 0c       	add	r12, r12
    592c:	dd 1c       	adc	r13, r13
    592e:	0a 94       	dec	r0
    5930:	e2 f7       	brpl	.-8      	; 0x592a <servo_init+0x146>
    5932:	da 82       	std	Y+2, r13	; 0x02
    5934:	c9 82       	std	Y+1, r12	; 0x01
    5936:	5c 28       	or	r5, r12
    5938:	50 82       	st	Z, r5
    593a:	d7 01       	movw	r26, r14
    593c:	ed 91       	ld	r30, X+
    593e:	fc 91       	ld	r31, X
    5940:	f2 90       	ld	r15, -Z
    5942:	6c 01       	movw	r12, r24
    5944:	d8 01       	movw	r26, r16
    5946:	0c 90       	ld	r0, X
    5948:	02 c0       	rjmp	.+4      	; 0x594e <servo_init+0x16a>
    594a:	cc 0c       	add	r12, r12
    594c:	dd 1c       	adc	r13, r13
    594e:	0a 94       	dec	r0
    5950:	e2 f7       	brpl	.-8      	; 0x594a <servo_init+0x166>
    5952:	fc 28       	or	r15, r12
    5954:	f0 82       	st	Z, r15
    5956:	db 01       	movw	r26, r22
    5958:	ed 91       	ld	r30, X+
    595a:	fc 91       	ld	r31, X
    595c:	62 91       	ld	r22, -Z
    595e:	6c 01       	movw	r12, r24
    5960:	da 01       	movw	r26, r20
    5962:	0c 90       	ld	r0, X
    5964:	02 c0       	rjmp	.+4      	; 0x596a <servo_init+0x186>
    5966:	cc 0c       	add	r12, r12
    5968:	dd 1c       	adc	r13, r13
    596a:	0a 94       	dec	r0
    596c:	e2 f7       	brpl	.-8      	; 0x5966 <servo_init+0x182>
    596e:	6c 29       	or	r22, r12
    5970:	60 83       	st	Z, r22
    5972:	d5 01       	movw	r26, r10
    5974:	ed 91       	ld	r30, X+
    5976:	fc 91       	ld	r31, X
    5978:	62 91       	ld	r22, -Z
    597a:	ac 01       	movw	r20, r24
    597c:	d4 01       	movw	r26, r8
    597e:	0c 90       	ld	r0, X
    5980:	02 c0       	rjmp	.+4      	; 0x5986 <servo_init+0x1a2>
    5982:	44 0f       	add	r20, r20
    5984:	55 1f       	adc	r21, r21
    5986:	0a 94       	dec	r0
    5988:	e2 f7       	brpl	.-8      	; 0x5982 <servo_init+0x19e>
    598a:	64 2b       	or	r22, r20
    598c:	60 83       	st	Z, r22
    598e:	d3 01       	movw	r26, r6
    5990:	ed 91       	ld	r30, X+
    5992:	fc 91       	ld	r31, X
    5994:	62 91       	ld	r22, -Z
    5996:	ac 01       	movw	r20, r24
    5998:	d1 01       	movw	r26, r2
    599a:	0c 90       	ld	r0, X
    599c:	02 c0       	rjmp	.+4      	; 0x59a2 <servo_init+0x1be>
    599e:	44 0f       	add	r20, r20
    59a0:	55 1f       	adc	r21, r21
    59a2:	0a 94       	dec	r0
    59a4:	e2 f7       	brpl	.-8      	; 0x599e <servo_init+0x1ba>
    59a6:	64 2b       	or	r22, r20
    59a8:	60 83       	st	Z, r22
    59aa:	a6 ec       	ldi	r26, 0xC6	; 198
    59ac:	b4 e0       	ldi	r27, 0x04	; 4
    59ae:	ed 91       	ld	r30, X+
    59b0:	fc 91       	ld	r31, X
    59b2:	62 91       	ld	r22, -Z
    59b4:	ac 01       	movw	r20, r24
    59b6:	a4 eb       	ldi	r26, 0xB4	; 180
    59b8:	b4 e0       	ldi	r27, 0x04	; 4
    59ba:	0c 90       	ld	r0, X
    59bc:	02 c0       	rjmp	.+4      	; 0x59c2 <servo_init+0x1de>
    59be:	44 0f       	add	r20, r20
    59c0:	55 1f       	adc	r21, r21
    59c2:	0a 94       	dec	r0
    59c4:	e2 f7       	brpl	.-8      	; 0x59be <servo_init+0x1da>
    59c6:	64 2b       	or	r22, r20
    59c8:	60 83       	st	Z, r22
    59ca:	a8 ec       	ldi	r26, 0xC8	; 200
    59cc:	b4 e0       	ldi	r27, 0x04	; 4
    59ce:	ed 91       	ld	r30, X+
    59d0:	fc 91       	ld	r31, X
    59d2:	62 91       	ld	r22, -Z
    59d4:	ac 01       	movw	r20, r24
    59d6:	a5 eb       	ldi	r26, 0xB5	; 181
    59d8:	b4 e0       	ldi	r27, 0x04	; 4
    59da:	0c 90       	ld	r0, X
    59dc:	02 c0       	rjmp	.+4      	; 0x59e2 <servo_init+0x1fe>
    59de:	44 0f       	add	r20, r20
    59e0:	55 1f       	adc	r21, r21
    59e2:	0a 94       	dec	r0
    59e4:	e2 f7       	brpl	.-8      	; 0x59de <servo_init+0x1fa>
    59e6:	64 2b       	or	r22, r20
    59e8:	60 83       	st	Z, r22
    59ea:	aa ec       	ldi	r26, 0xCA	; 202
    59ec:	b4 e0       	ldi	r27, 0x04	; 4
    59ee:	ed 91       	ld	r30, X+
    59f0:	fc 91       	ld	r31, X
    59f2:	42 91       	ld	r20, -Z
    59f4:	6c 01       	movw	r12, r24
    59f6:	d9 01       	movw	r26, r18
    59f8:	0c 90       	ld	r0, X
    59fa:	02 c0       	rjmp	.+4      	; 0x5a00 <servo_init+0x21c>
    59fc:	cc 0c       	add	r12, r12
    59fe:	dd 1c       	adc	r13, r13
    5a00:	0a 94       	dec	r0
    5a02:	e2 f7       	brpl	.-8      	; 0x59fc <servo_init+0x218>
    5a04:	4c 29       	or	r20, r12
    5a06:	40 83       	st	Z, r20
    5a08:	ac ec       	ldi	r26, 0xCC	; 204
    5a0a:	b4 e0       	ldi	r27, 0x04	; 4
    5a0c:	ed 91       	ld	r30, X+
    5a0e:	fc 91       	ld	r31, X
    5a10:	42 91       	ld	r20, -Z
    5a12:	9c 01       	movw	r18, r24
    5a14:	a7 eb       	ldi	r26, 0xB7	; 183
    5a16:	b4 e0       	ldi	r27, 0x04	; 4
    5a18:	0c 90       	ld	r0, X
    5a1a:	02 c0       	rjmp	.+4      	; 0x5a20 <servo_init+0x23c>
    5a1c:	22 0f       	add	r18, r18
    5a1e:	33 1f       	adc	r19, r19
    5a20:	0a 94       	dec	r0
    5a22:	e2 f7       	brpl	.-8      	; 0x5a1c <servo_init+0x238>
    5a24:	42 2b       	or	r20, r18
    5a26:	40 83       	st	Z, r20
    5a28:	ae ec       	ldi	r26, 0xCE	; 206
    5a2a:	b4 e0       	ldi	r27, 0x04	; 4
    5a2c:	ed 91       	ld	r30, X+
    5a2e:	fc 91       	ld	r31, X
    5a30:	22 91       	ld	r18, -Z
    5a32:	a8 eb       	ldi	r26, 0xB8	; 184
    5a34:	b4 e0       	ldi	r27, 0x04	; 4
    5a36:	0c 90       	ld	r0, X
    5a38:	02 c0       	rjmp	.+4      	; 0x5a3e <servo_init+0x25a>
    5a3a:	88 0f       	add	r24, r24
    5a3c:	99 1f       	adc	r25, r25
    5a3e:	0a 94       	dec	r0
    5a40:	e2 f7       	brpl	.-8      	; 0x5a3a <servo_init+0x256>
    5a42:	28 2b       	or	r18, r24
    5a44:	20 83       	st	Z, r18
	}
	// Reset all servo values to SERVO_NO_PULSE

	// Timer1 setup, used for timing servo outputs
	TIMSK &= ~_BV(TOIE1); 			// Disable overflow interrupts for now (TIMER1_OVF_vect)
    5a46:	ef e6       	ldi	r30, 0x6F	; 111
    5a48:	f0 e0       	ldi	r31, 0x00	; 0
    5a4a:	80 81       	ld	r24, Z
    5a4c:	8e 7f       	andi	r24, 0xFE	; 254
    5a4e:	80 83       	st	Z, r24
	current_servo = SERVO_NUM;		// start with servo pause
    5a50:	4a e0       	ldi	r20, 0x0A	; 10
    5a52:	40 93 86 02 	sts	0x0286, r20
	TCCR1A =0; 						// Simple up counting operation until overflow
    5a56:	10 92 80 00 	sts	0x0080, r1
	TCNT1= -(SERVO_PULSE_PAUSE);	// start counter at -16000 us
    5a5a:	04 e8       	ldi	r16, 0x84	; 132
    5a5c:	10 e0       	ldi	r17, 0x00	; 0
    5a5e:	80 e2       	ldi	r24, 0x20	; 32
    5a60:	9e e4       	ldi	r25, 0x4E	; 78
    5a62:	d8 01       	movw	r26, r16
    5a64:	11 96       	adiw	r26, 0x01	; 1
    5a66:	9c 93       	st	X, r25
    5a68:	8e 93       	st	-X, r24

// initial setup
void servo_doRCread_init()
{
	// optional, these should be clear anyhow
	clear_bit(ACSR, ACIC); 		// source is ICP pin (set bit for comparator input)
    5a6a:	20 b7       	in	r18, 0x30	; 48
    5a6c:	2b 7f       	andi	r18, 0xFB	; 251
    5a6e:	20 bf       	out	0x30, r18	; 48
	clear_bit(TCCR1B, ICNC1); 	// no noise cancellation for more precise timing
    5a70:	61 e8       	ldi	r22, 0x81	; 129
    5a72:	70 e0       	ldi	r23, 0x00	; 0
    5a74:	db 01       	movw	r26, r22
    5a76:	2c 91       	ld	r18, X
    5a78:	2f 77       	andi	r18, 0x7F	; 127
    5a7a:	2c 93       	st	X, r18
	clear_bit(TIMSK, ICIE1);	// disable ICP interrupts for now (TIMSK if defined in header as TIMSK1 for ATMega8x)
    5a7c:	20 81       	ld	r18, Z
    5a7e:	2f 7d       	andi	r18, 0xDF	; 223
    5a80:	20 83       	st	Z, r18

	// set ICP pin as input
	digitalMode(SERVO_INPUT_PORT, SERVO_INPUT_PIN, INPUT);
    5a82:	20 98       	cbi	0x04, 0	; 4

	// initial variables, for clarity, should not be needed
	servo_rcbegin=0;
    5a84:	10 92 ae 04 	sts	0x04AE, r1
    5a88:	10 92 ad 04 	sts	0x04AD, r1
	servo_rcend=0;
    5a8c:	10 92 ac 04 	sts	0x04AC, r1
    5a90:	10 92 ab 04 	sts	0x04AB, r1
	servo_gotpulse=0;
    5a94:	10 92 d4 04 	sts	0x04D4, r1
	servo_rctimeout=0;
    5a98:	10 92 bb 04 	sts	0x04BB, r1
	servo_rcpulse=SERVO_NO_PULSE;
    5a9c:	2f ef       	ldi	r18, 0xFF	; 255
    5a9e:	3f ef       	ldi	r19, 0xFF	; 255
    5aa0:	30 93 d8 04 	sts	0x04D8, r19
    5aa4:	20 93 d7 04 	sts	0x04D7, r18
 * Start by counting a long pause
 * *********************************************/
void servo_start()
{
	// Uses clock input divided by 8, 0.5 microsecond/tick
	current_servo = SERVO_NUM;		// start with servo pause
    5aa8:	40 93 86 02 	sts	0x0286, r20
	TCNT1= -(SERVO_PULSE_PAUSE);	// start counter at -16000 us
    5aac:	d8 01       	movw	r26, r16
    5aae:	11 96       	adiw	r26, 0x01	; 1
    5ab0:	9c 93       	st	X, r25
    5ab2:	8e 93       	st	-X, r24
	TIMSK |= _BV(TOIE1); 			// Enable overflow interrupts
    5ab4:	80 81       	ld	r24, Z
    5ab6:	81 60       	ori	r24, 0x01	; 1
    5ab8:	80 83       	st	Z, r24
	sei();							// enable global interrupts
    5aba:	78 94       	sei
	TCCR1B |= _BV(CS11); 			// Launch timer, pre-scaler div clock by 8, gives 0.5 us ticks at 16 MHz
    5abc:	e1 e8       	ldi	r30, 0x81	; 129
    5abe:	f0 e0       	ldi	r31, 0x00	; 0
    5ac0:	80 81       	ld	r24, Z
    5ac2:	82 60       	ori	r24, 0x02	; 2
    5ac4:	80 83       	st	Z, r24


	servo_start(); 					// launch servo unit by default, or input capture would not work
									// since they are all set at SERVO_NO_PULSE it does output pulses

}
    5ac6:	0f 90       	pop	r0
    5ac8:	0f 90       	pop	r0
    5aca:	df 91       	pop	r29
    5acc:	cf 91       	pop	r28
    5ace:	1f 91       	pop	r17
    5ad0:	0f 91       	pop	r16
    5ad2:	ff 90       	pop	r15
    5ad4:	ef 90       	pop	r14
    5ad6:	df 90       	pop	r13
    5ad8:	cf 90       	pop	r12
    5ada:	bf 90       	pop	r11
    5adc:	af 90       	pop	r10
    5ade:	9f 90       	pop	r9
    5ae0:	8f 90       	pop	r8
    5ae2:	7f 90       	pop	r7
    5ae4:	6f 90       	pop	r6
    5ae6:	5f 90       	pop	r5
    5ae8:	3f 90       	pop	r3
    5aea:	2f 90       	pop	r2
    5aec:	08 95       	ret

00005aee <servo_start>:
 * Start by counting a long pause
 * *********************************************/
void servo_start()
{
	// Uses clock input divided by 8, 0.5 microsecond/tick
	current_servo = SERVO_NUM;		// start with servo pause
    5aee:	8a e0       	ldi	r24, 0x0A	; 10
    5af0:	80 93 86 02 	sts	0x0286, r24
	TCNT1= -(SERVO_PULSE_PAUSE);	// start counter at -16000 us
    5af4:	80 e2       	ldi	r24, 0x20	; 32
    5af6:	9e e4       	ldi	r25, 0x4E	; 78
    5af8:	90 93 85 00 	sts	0x0085, r25
    5afc:	80 93 84 00 	sts	0x0084, r24
	TIMSK |= _BV(TOIE1); 			// Enable overflow interrupts
    5b00:	ef e6       	ldi	r30, 0x6F	; 111
    5b02:	f0 e0       	ldi	r31, 0x00	; 0
    5b04:	80 81       	ld	r24, Z
    5b06:	81 60       	ori	r24, 0x01	; 1
    5b08:	80 83       	st	Z, r24
	sei();							// enable global interrupts
    5b0a:	78 94       	sei
	TCCR1B |= _BV(CS11); 			// Launch timer, pre-scaler div clock by 8, gives 0.5 us ticks at 16 MHz
    5b0c:	e1 e8       	ldi	r30, 0x81	; 129
    5b0e:	f0 e0       	ldi	r31, 0x00	; 0
    5b10:	80 81       	ld	r24, Z
    5b12:	82 60       	ori	r24, 0x02	; 2
    5b14:	80 83       	st	Z, r24
    5b16:	08 95       	ret

00005b18 <servo_stop>:
{
	uint8_t i;
	// Set all servo output to 0;
	for(i=0; i<SERVO_NUM; i++)
	{
		clear_bit(*servo_port[i], servo_pin[i]);
    5b18:	e0 91 bc 04 	lds	r30, 0x04BC
    5b1c:	f0 91 bd 04 	lds	r31, 0x04BD
    5b20:	40 81       	ld	r20, Z
    5b22:	81 e0       	ldi	r24, 0x01	; 1
    5b24:	90 e0       	ldi	r25, 0x00	; 0
    5b26:	9c 01       	movw	r18, r24
    5b28:	00 90 af 04 	lds	r0, 0x04AF
    5b2c:	02 c0       	rjmp	.+4      	; 0x5b32 <servo_stop+0x1a>
    5b2e:	22 0f       	add	r18, r18
    5b30:	33 1f       	adc	r19, r19
    5b32:	0a 94       	dec	r0
    5b34:	e2 f7       	brpl	.-8      	; 0x5b2e <servo_stop+0x16>
    5b36:	20 95       	com	r18
    5b38:	24 23       	and	r18, r20
    5b3a:	20 83       	st	Z, r18
    5b3c:	e0 91 be 04 	lds	r30, 0x04BE
    5b40:	f0 91 bf 04 	lds	r31, 0x04BF
    5b44:	40 81       	ld	r20, Z
    5b46:	9c 01       	movw	r18, r24
    5b48:	00 90 b0 04 	lds	r0, 0x04B0
    5b4c:	02 c0       	rjmp	.+4      	; 0x5b52 <servo_stop+0x3a>
    5b4e:	22 0f       	add	r18, r18
    5b50:	33 1f       	adc	r19, r19
    5b52:	0a 94       	dec	r0
    5b54:	e2 f7       	brpl	.-8      	; 0x5b4e <servo_stop+0x36>
    5b56:	20 95       	com	r18
    5b58:	24 23       	and	r18, r20
    5b5a:	20 83       	st	Z, r18
    5b5c:	e0 91 c0 04 	lds	r30, 0x04C0
    5b60:	f0 91 c1 04 	lds	r31, 0x04C1
    5b64:	40 81       	ld	r20, Z
    5b66:	9c 01       	movw	r18, r24
    5b68:	00 90 b1 04 	lds	r0, 0x04B1
    5b6c:	02 c0       	rjmp	.+4      	; 0x5b72 <servo_stop+0x5a>
    5b6e:	22 0f       	add	r18, r18
    5b70:	33 1f       	adc	r19, r19
    5b72:	0a 94       	dec	r0
    5b74:	e2 f7       	brpl	.-8      	; 0x5b6e <servo_stop+0x56>
    5b76:	20 95       	com	r18
    5b78:	24 23       	and	r18, r20
    5b7a:	20 83       	st	Z, r18
    5b7c:	e0 91 c2 04 	lds	r30, 0x04C2
    5b80:	f0 91 c3 04 	lds	r31, 0x04C3
    5b84:	40 81       	ld	r20, Z
    5b86:	9c 01       	movw	r18, r24
    5b88:	00 90 b2 04 	lds	r0, 0x04B2
    5b8c:	02 c0       	rjmp	.+4      	; 0x5b92 <servo_stop+0x7a>
    5b8e:	22 0f       	add	r18, r18
    5b90:	33 1f       	adc	r19, r19
    5b92:	0a 94       	dec	r0
    5b94:	e2 f7       	brpl	.-8      	; 0x5b8e <servo_stop+0x76>
    5b96:	20 95       	com	r18
    5b98:	24 23       	and	r18, r20
    5b9a:	20 83       	st	Z, r18
    5b9c:	e0 91 c4 04 	lds	r30, 0x04C4
    5ba0:	f0 91 c5 04 	lds	r31, 0x04C5
    5ba4:	40 81       	ld	r20, Z
    5ba6:	9c 01       	movw	r18, r24
    5ba8:	00 90 b3 04 	lds	r0, 0x04B3
    5bac:	02 c0       	rjmp	.+4      	; 0x5bb2 <servo_stop+0x9a>
    5bae:	22 0f       	add	r18, r18
    5bb0:	33 1f       	adc	r19, r19
    5bb2:	0a 94       	dec	r0
    5bb4:	e2 f7       	brpl	.-8      	; 0x5bae <servo_stop+0x96>
    5bb6:	20 95       	com	r18
    5bb8:	24 23       	and	r18, r20
    5bba:	20 83       	st	Z, r18
    5bbc:	e0 91 c6 04 	lds	r30, 0x04C6
    5bc0:	f0 91 c7 04 	lds	r31, 0x04C7
    5bc4:	40 81       	ld	r20, Z
    5bc6:	9c 01       	movw	r18, r24
    5bc8:	00 90 b4 04 	lds	r0, 0x04B4
    5bcc:	02 c0       	rjmp	.+4      	; 0x5bd2 <servo_stop+0xba>
    5bce:	22 0f       	add	r18, r18
    5bd0:	33 1f       	adc	r19, r19
    5bd2:	0a 94       	dec	r0
    5bd4:	e2 f7       	brpl	.-8      	; 0x5bce <servo_stop+0xb6>
    5bd6:	20 95       	com	r18
    5bd8:	24 23       	and	r18, r20
    5bda:	20 83       	st	Z, r18
    5bdc:	e0 91 c8 04 	lds	r30, 0x04C8
    5be0:	f0 91 c9 04 	lds	r31, 0x04C9
    5be4:	40 81       	ld	r20, Z
    5be6:	9c 01       	movw	r18, r24
    5be8:	00 90 b5 04 	lds	r0, 0x04B5
    5bec:	02 c0       	rjmp	.+4      	; 0x5bf2 <servo_stop+0xda>
    5bee:	22 0f       	add	r18, r18
    5bf0:	33 1f       	adc	r19, r19
    5bf2:	0a 94       	dec	r0
    5bf4:	e2 f7       	brpl	.-8      	; 0x5bee <servo_stop+0xd6>
    5bf6:	20 95       	com	r18
    5bf8:	24 23       	and	r18, r20
    5bfa:	20 83       	st	Z, r18
    5bfc:	e0 91 ca 04 	lds	r30, 0x04CA
    5c00:	f0 91 cb 04 	lds	r31, 0x04CB
    5c04:	40 81       	ld	r20, Z
    5c06:	9c 01       	movw	r18, r24
    5c08:	00 90 b6 04 	lds	r0, 0x04B6
    5c0c:	02 c0       	rjmp	.+4      	; 0x5c12 <servo_stop+0xfa>
    5c0e:	22 0f       	add	r18, r18
    5c10:	33 1f       	adc	r19, r19
    5c12:	0a 94       	dec	r0
    5c14:	e2 f7       	brpl	.-8      	; 0x5c0e <servo_stop+0xf6>
    5c16:	20 95       	com	r18
    5c18:	24 23       	and	r18, r20
    5c1a:	20 83       	st	Z, r18
    5c1c:	e0 91 cc 04 	lds	r30, 0x04CC
    5c20:	f0 91 cd 04 	lds	r31, 0x04CD
    5c24:	40 81       	ld	r20, Z
    5c26:	9c 01       	movw	r18, r24
    5c28:	00 90 b7 04 	lds	r0, 0x04B7
    5c2c:	02 c0       	rjmp	.+4      	; 0x5c32 <servo_stop+0x11a>
    5c2e:	22 0f       	add	r18, r18
    5c30:	33 1f       	adc	r19, r19
    5c32:	0a 94       	dec	r0
    5c34:	e2 f7       	brpl	.-8      	; 0x5c2e <servo_stop+0x116>
    5c36:	20 95       	com	r18
    5c38:	24 23       	and	r18, r20
    5c3a:	20 83       	st	Z, r18
    5c3c:	e0 91 ce 04 	lds	r30, 0x04CE
    5c40:	f0 91 cf 04 	lds	r31, 0x04CF
    5c44:	20 81       	ld	r18, Z
    5c46:	00 90 b8 04 	lds	r0, 0x04B8
    5c4a:	02 c0       	rjmp	.+4      	; 0x5c50 <servo_stop+0x138>
    5c4c:	88 0f       	add	r24, r24
    5c4e:	99 1f       	adc	r25, r25
    5c50:	0a 94       	dec	r0
    5c52:	e2 f7       	brpl	.-8      	; 0x5c4c <servo_stop+0x134>
    5c54:	80 95       	com	r24
    5c56:	82 23       	and	r24, r18
    5c58:	80 83       	st	Z, r24
	}
	TIMSK &= ~_BV(TOIE1); 	// Disable overflow interrupts
    5c5a:	ef e6       	ldi	r30, 0x6F	; 111
    5c5c:	f0 e0       	ldi	r31, 0x00	; 0
    5c5e:	80 81       	ld	r24, Z
    5c60:	8e 7f       	andi	r24, 0xFE	; 254
    5c62:	80 83       	st	Z, r24
	TCCR1B = 0; 			// Stop timer
    5c64:	10 92 81 00 	sts	0x0081, r1
    5c68:	08 95       	ret

00005c6a <servo_set>:
 * in the global array servo_value[]
 *****************************************************/
void servo_set(uint8_t servo, int16_t time)
{
	// servo must be 1 to SERVO_NUM
	if(servo==0 || servo>SERVO_NUM) return;
    5c6a:	9f ef       	ldi	r25, 0xFF	; 255
    5c6c:	98 0f       	add	r25, r24
    5c6e:	9a 30       	cpi	r25, 0x0A	; 10
    5c70:	a0 f4       	brcc	.+40     	; 0x5c9a <servo_set+0x30>

	// time=SERVO_NO_PULSE means no output
	if(time<=SERVO_NO_PULSE)
    5c72:	77 fd       	sbrc	r23, 7
    5c74:	16 c0       	rjmp	.+44     	; 0x5ca2 <servo_set+0x38>
		servo_value[servo-1]=SERVO_NO_PULSE;
		return;
	}

	// time will be trimmed to (SERVO_PULSE_MAX - SERVO_PULSE_MIN)
	if(time>SERVO_PULSE_MAX) time=SERVO_PULSE_MAX;
    5c76:	65 3c       	cpi	r22, 0xC5	; 197
    5c78:	99 e0       	ldi	r25, 0x09	; 9
    5c7a:	79 07       	cpc	r23, r25
    5c7c:	7c f4       	brge	.+30     	; 0x5c9c <servo_set+0x32>
	if(time<SERVO_PULSE_MIN) time=SERVO_PULSE_MIN;
    5c7e:	64 3f       	cpi	r22, 0xF4	; 244
    5c80:	91 e0       	ldi	r25, 0x01	; 1
    5c82:	79 07       	cpc	r23, r25
    5c84:	cc f4       	brge	.+50     	; 0x5cb8 <servo_set+0x4e>
    5c86:	68 ee       	ldi	r22, 0xE8	; 232
    5c88:	73 e0       	ldi	r23, 0x03	; 3

	// multiply by two to account for counter ticks of 0.5us
	servo_value[servo-1]=2*time;
    5c8a:	e8 2f       	mov	r30, r24
    5c8c:	f0 e0       	ldi	r31, 0x00	; 0
    5c8e:	ee 0f       	add	r30, r30
    5c90:	ff 1f       	adc	r31, r31
    5c92:	e0 57       	subi	r30, 0x70	; 112
    5c94:	fb 4f       	sbci	r31, 0xFB	; 251
    5c96:	71 83       	std	Z+1, r23	; 0x01
    5c98:	60 83       	st	Z, r22
    5c9a:	08 95       	ret
    5c9c:	68 e8       	ldi	r22, 0x88	; 136
    5c9e:	73 e1       	ldi	r23, 0x13	; 19
    5ca0:	f4 cf       	rjmp	.-24     	; 0x5c8a <servo_set+0x20>
	if(servo==0 || servo>SERVO_NUM) return;

	// time=SERVO_NO_PULSE means no output
	if(time<=SERVO_NO_PULSE)
	{
		servo_value[servo-1]=SERVO_NO_PULSE;
    5ca2:	e8 2f       	mov	r30, r24
    5ca4:	f0 e0       	ldi	r31, 0x00	; 0
    5ca6:	ee 0f       	add	r30, r30
    5ca8:	ff 1f       	adc	r31, r31
    5caa:	e0 57       	subi	r30, 0x70	; 112
    5cac:	fb 4f       	sbci	r31, 0xFB	; 251
    5cae:	8f ef       	ldi	r24, 0xFF	; 255
    5cb0:	9f ef       	ldi	r25, 0xFF	; 255
    5cb2:	91 83       	std	Z+1, r25	; 0x01
    5cb4:	80 83       	st	Z, r24
		return;
    5cb6:	08 95       	ret
    5cb8:	66 0f       	add	r22, r22
    5cba:	77 1f       	adc	r23, r23
    5cbc:	e6 cf       	rjmp	.-52     	; 0x5c8a <servo_set+0x20>

00005cbe <servo_read>:
 * in the global array servo_value[]
 *****************************************************/
int16_t servo_read(uint8_t servo)
{
	// servo must be 1 to SERVO_NUM
	if(servo==0 || servo>SERVO_NUM) return 0;
    5cbe:	9f ef       	ldi	r25, 0xFF	; 255
    5cc0:	98 0f       	add	r25, r24
    5cc2:	9a 30       	cpi	r25, 0x0A	; 10
    5cc4:	78 f4       	brcc	.+30     	; 0x5ce4 <servo_read+0x26>

	// time=SERVO_NO_PULSE means no output
	if(servo_value[servo-1]==SERVO_NO_PULSE)
    5cc6:	e8 2f       	mov	r30, r24
    5cc8:	f0 e0       	ldi	r31, 0x00	; 0
    5cca:	ee 0f       	add	r30, r30
    5ccc:	ff 1f       	adc	r31, r31
    5cce:	e0 57       	subi	r30, 0x70	; 112
    5cd0:	fb 4f       	sbci	r31, 0xFB	; 251
    5cd2:	80 81       	ld	r24, Z
    5cd4:	91 81       	ldd	r25, Z+1	; 0x01
    5cd6:	8f 3f       	cpi	r24, 0xFF	; 255
    5cd8:	2f ef       	ldi	r18, 0xFF	; 255
    5cda:	92 07       	cpc	r25, r18
    5cdc:	31 f0       	breq	.+12     	; 0x5cea <servo_read+0x2c>
		return SERVO_NO_PULSE;
	}

	// Divide by two to account for 0.5us counter ticks
	// subtract minimum pulse width
	return (servo_value[servo-1]/2);
    5cde:	96 95       	lsr	r25
    5ce0:	87 95       	ror	r24
    5ce2:	08 95       	ret
 * in the global array servo_value[]
 *****************************************************/
int16_t servo_read(uint8_t servo)
{
	// servo must be 1 to SERVO_NUM
	if(servo==0 || servo>SERVO_NUM) return 0;
    5ce4:	80 e0       	ldi	r24, 0x00	; 0
    5ce6:	90 e0       	ldi	r25, 0x00	; 0
    5ce8:	08 95       	ret

	// time=SERVO_NO_PULSE means no output
	if(servo_value[servo-1]==SERVO_NO_PULSE)
	{
		return SERVO_NO_PULSE;
    5cea:	8f ef       	ldi	r24, 0xFF	; 255
    5cec:	9f ef       	ldi	r25, 0xFF	; 255
	}

	// Divide by two to account for 0.5us counter ticks
	// subtract minimum pulse width
	return (servo_value[servo-1]/2);
}
    5cee:	08 95       	ret

00005cf0 <__vector_13>:
 * next servo pulse length as set in the global variable
 * servo_value[]
 * A value of 0 in the servo means no pulse is put out
 ***************************************************/
ISR(TIMER1_OVF_vect)
{
    5cf0:	1f 92       	push	r1
    5cf2:	0f 92       	push	r0
    5cf4:	0f b6       	in	r0, 0x3f	; 63
    5cf6:	0f 92       	push	r0
    5cf8:	11 24       	eor	r1, r1
    5cfa:	2f 93       	push	r18
    5cfc:	3f 93       	push	r19
    5cfe:	8f 93       	push	r24
    5d00:	9f 93       	push	r25
    5d02:	af 93       	push	r26
    5d04:	bf 93       	push	r27
    5d06:	ef 93       	push	r30
    5d08:	ff 93       	push	r31
	// first end the current pulse except if in pause
	if(current_servo>=SERVO_NUM) // we were doing the long pause
    5d0a:	80 91 86 02 	lds	r24, 0x0286
    5d0e:	8a 30       	cpi	r24, 0x0A	; 10
    5d10:	08 f0       	brcs	.+2      	; 0x5d14 <__vector_13+0x24>
    5d12:	80 c0       	rjmp	.+256    	; 0x5e14 <__vector_13+0x124>

		current_servo=0; // restart at first servo
	}
	else // normal case, end the current servo pulse before starting the next one
	{
		clear_bit(*servo_port[current_servo], servo_pin[current_servo]);
    5d14:	e0 91 86 02 	lds	r30, 0x0286
    5d18:	f0 e0       	ldi	r31, 0x00	; 0
    5d1a:	ee 0f       	add	r30, r30
    5d1c:	ff 1f       	adc	r31, r31
    5d1e:	e4 54       	subi	r30, 0x44	; 68
    5d20:	fb 4f       	sbci	r31, 0xFB	; 251
    5d22:	a0 81       	ld	r26, Z
    5d24:	b1 81       	ldd	r27, Z+1	; 0x01
    5d26:	2c 91       	ld	r18, X
    5d28:	e0 91 86 02 	lds	r30, 0x0286
    5d2c:	f0 e0       	ldi	r31, 0x00	; 0
    5d2e:	e1 55       	subi	r30, 0x51	; 81
    5d30:	fb 4f       	sbci	r31, 0xFB	; 251
    5d32:	81 e0       	ldi	r24, 0x01	; 1
    5d34:	90 e0       	ldi	r25, 0x00	; 0
    5d36:	00 80       	ld	r0, Z
    5d38:	02 c0       	rjmp	.+4      	; 0x5d3e <__vector_13+0x4e>
    5d3a:	88 0f       	add	r24, r24
    5d3c:	99 1f       	adc	r25, r25
    5d3e:	0a 94       	dec	r0
    5d40:	e2 f7       	brpl	.-8      	; 0x5d3a <__vector_13+0x4a>
    5d42:	80 95       	com	r24
    5d44:	82 23       	and	r24, r18
    5d46:	8c 93       	st	X, r24
		// goto next servo
		current_servo++;
    5d48:	80 91 86 02 	lds	r24, 0x0286
    5d4c:	8f 5f       	subi	r24, 0xFF	; 255
    5d4e:	80 93 86 02 	sts	0x0286, r24
	}

	// now start the next one except if it's time for pause
	if(current_servo>=SERVO_NUM) // we've reached the pause
    5d52:	80 91 86 02 	lds	r24, 0x0286
    5d56:	8a 30       	cpi	r24, 0x0A	; 10
    5d58:	08 f0       	brcs	.+2      	; 0x5d5c <__vector_13+0x6c>
    5d5a:	48 c0       	rjmp	.+144    	; 0x5dec <__vector_13+0xfc>
		servo_doRCread_start();
		#endif
	}
	else	// regular start of a new pulse
	{
		if(servo_value[current_servo] != SERVO_NO_PULSE) // regular pulse value
    5d5c:	e0 91 86 02 	lds	r30, 0x0286
    5d60:	f0 e0       	ldi	r31, 0x00	; 0
    5d62:	ee 0f       	add	r30, r30
    5d64:	ff 1f       	adc	r31, r31
    5d66:	ee 56       	subi	r30, 0x6E	; 110
    5d68:	fb 4f       	sbci	r31, 0xFB	; 251
    5d6a:	80 81       	ld	r24, Z
    5d6c:	91 81       	ldd	r25, Z+1	; 0x01
    5d6e:	01 96       	adiw	r24, 0x01	; 1
    5d70:	b1 f1       	breq	.+108    	; 0x5dde <__vector_13+0xee>
		{
			// start pulse
			set_bit(*servo_port[current_servo], servo_pin[current_servo]);
    5d72:	e0 91 86 02 	lds	r30, 0x0286
    5d76:	f0 e0       	ldi	r31, 0x00	; 0
    5d78:	ee 0f       	add	r30, r30
    5d7a:	ff 1f       	adc	r31, r31
    5d7c:	e4 54       	subi	r30, 0x44	; 68
    5d7e:	fb 4f       	sbci	r31, 0xFB	; 251
    5d80:	a0 81       	ld	r26, Z
    5d82:	b1 81       	ldd	r27, Z+1	; 0x01
    5d84:	2c 91       	ld	r18, X
    5d86:	e0 91 86 02 	lds	r30, 0x0286
    5d8a:	f0 e0       	ldi	r31, 0x00	; 0
    5d8c:	e1 55       	subi	r30, 0x51	; 81
    5d8e:	fb 4f       	sbci	r31, 0xFB	; 251
    5d90:	81 e0       	ldi	r24, 0x01	; 1
    5d92:	90 e0       	ldi	r25, 0x00	; 0
    5d94:	00 80       	ld	r0, Z
    5d96:	02 c0       	rjmp	.+4      	; 0x5d9c <__vector_13+0xac>
    5d98:	88 0f       	add	r24, r24
    5d9a:	99 1f       	adc	r25, r25
    5d9c:	0a 94       	dec	r0
    5d9e:	e2 f7       	brpl	.-8      	; 0x5d98 <__vector_13+0xa8>
    5da0:	28 2b       	or	r18, r24
    5da2:	2c 93       	st	X, r18
			// set inverse pulse length, and wait for overflow
			// servo values are stored as twice their us value
			TCNT1= servo_value[current_servo]-4*SERVO_PULSE_CENTER;
#else
			// set normal pulse length, and wait for overflow
			TCNT1= -(servo_value[current_servo]);
    5da4:	e0 91 86 02 	lds	r30, 0x0286
    5da8:	f0 e0       	ldi	r31, 0x00	; 0
    5daa:	ee 0f       	add	r30, r30
    5dac:	ff 1f       	adc	r31, r31
    5dae:	ee 56       	subi	r30, 0x6E	; 110
    5db0:	fb 4f       	sbci	r31, 0xFB	; 251
    5db2:	80 81       	ld	r24, Z
    5db4:	91 81       	ldd	r25, Z+1	; 0x01
    5db6:	91 95       	neg	r25
    5db8:	81 95       	neg	r24
    5dba:	91 09       	sbc	r25, r1
    5dbc:	90 93 85 00 	sts	0x0085, r25
    5dc0:	80 93 84 00 	sts	0x0084, r24
		else	// SERVO_NO_PULSE means no output, wait minimum pulse value
		{
			TCNT1= -SERVO_PULSE_MIN;
		}
	}
}
    5dc4:	ff 91       	pop	r31
    5dc6:	ef 91       	pop	r30
    5dc8:	bf 91       	pop	r27
    5dca:	af 91       	pop	r26
    5dcc:	9f 91       	pop	r25
    5dce:	8f 91       	pop	r24
    5dd0:	3f 91       	pop	r19
    5dd2:	2f 91       	pop	r18
    5dd4:	0f 90       	pop	r0
    5dd6:	0f be       	out	0x3f, r0	; 63
    5dd8:	0f 90       	pop	r0
    5dda:	1f 90       	pop	r1
    5ddc:	18 95       	reti
#endif

		}
		else	// SERVO_NO_PULSE means no output, wait minimum pulse value
		{
			TCNT1= -SERVO_PULSE_MIN;
    5dde:	8c e0       	ldi	r24, 0x0C	; 12
    5de0:	9e ef       	ldi	r25, 0xFE	; 254
    5de2:	90 93 85 00 	sts	0x0085, r25
    5de6:	80 93 84 00 	sts	0x0084, r24
    5dea:	ec cf       	rjmp	.-40     	; 0x5dc4 <__vector_13+0xd4>
	}

	// now start the next one except if it's time for pause
	if(current_servo>=SERVO_NUM) // we've reached the pause
	{
		TCNT1= -(SERVO_PULSE_PAUSE); // load the counter with long pause value
    5dec:	80 e2       	ldi	r24, 0x20	; 32
    5dee:	9e e4       	ldi	r25, 0x4E	; 78
    5df0:	90 93 85 00 	sts	0x0085, r25
    5df4:	80 93 84 00 	sts	0x0084, r24
}

// this is called by the servo interrupt routine on beginning long pause cycle
void servo_doRCread_start()
{
	set_bit(TCCR1B, ICES1); 	// trigger on rising edge
    5df8:	80 91 81 00 	lds	r24, 0x0081
    5dfc:	80 64       	ori	r24, 0x40	; 64
    5dfe:	80 93 81 00 	sts	0x0081, r24
	set_bit(TIFR, ICF1);		// always clear interrupt flag (by setting it to 1) after changing the edge
    5e02:	b5 9a       	sbi	0x16, 5	; 22
								// TIFR is defined to TIFR1 for the Atmega168
	servo_gotpulse=0;			// got no pulse yet in this cycle
    5e04:	10 92 d4 04 	sts	0x04D4, r1
	set_bit(TIMSK, ICIE1);		// enable input capture interrupts - rest of the work is done by interrupt handler
    5e08:	80 91 6f 00 	lds	r24, 0x006F
    5e0c:	80 62       	ori	r24, 0x20	; 32
    5e0e:	80 93 6f 00 	sts	0x006F, r24
    5e12:	d8 cf       	rjmp	.-80     	; 0x5dc4 <__vector_13+0xd4>

// this is called by the servo interrupt routine on resuming after long pause cycle
void servo_doRCread_end()
{
	//uart0_puts("in RC end \n\r");
	clear_bit(TIMSK, ICIE1);	// disable further ICP interrupts, no more readings until long pause
    5e14:	80 91 6f 00 	lds	r24, 0x006F
    5e18:	8f 7d       	andi	r24, 0xDF	; 223
    5e1a:	80 93 6f 00 	sts	0x006F, r24

	// we got a valid pulse reading, store intermediate result.
	if(servo_gotpulse)
    5e1e:	80 91 d4 04 	lds	r24, 0x04D4
    5e22:	81 11       	cpse	r24, r1
    5e24:	0c c0       	rjmp	.+24     	; 0x5e3e <__vector_13+0x14e>
		servo_rcvalid=1;						// flag that there is a valid result in the temporary variable
	}
	// else update the timeout count
	else
	{
		if(servo_rctimeout <= SERVO_RC_TIMEOUT_MAX) servo_rctimeout++;
    5e26:	80 91 bb 04 	lds	r24, 0x04BB
    5e2a:	8b 30       	cpi	r24, 0x0B	; 11
    5e2c:	28 f4       	brcc	.+10     	; 0x5e38 <__vector_13+0x148>
    5e2e:	80 91 bb 04 	lds	r24, 0x04BB
    5e32:	8f 5f       	subi	r24, 0xFF	; 255
    5e34:	80 93 bb 04 	sts	0x04BB, r24
		// if RC reading, stop and read the input capture after the long pause
		#ifdef SERVO_RCINPUT
		servo_doRCread_end();
		#endif

		current_servo=0; // restart at first servo
    5e38:	10 92 86 02 	sts	0x0286, r1
    5e3c:	8a cf       	rjmp	.-236    	; 0x5d52 <__vector_13+0x62>
	clear_bit(TIMSK, ICIE1);	// disable further ICP interrupts, no more readings until long pause

	// we got a valid pulse reading, store intermediate result.
	if(servo_gotpulse)
	{
		servo_rctimeout=0;						// reset timeout count
    5e3e:	10 92 bb 04 	sts	0x04BB, r1
		servo_rctemp=servo_rcend-servo_rcbegin;	//hold the intermediate result without further processing
    5e42:	80 91 ab 04 	lds	r24, 0x04AB
    5e46:	90 91 ac 04 	lds	r25, 0x04AC
    5e4a:	20 91 ad 04 	lds	r18, 0x04AD
    5e4e:	30 91 ae 04 	lds	r19, 0x04AE
    5e52:	82 1b       	sub	r24, r18
    5e54:	93 0b       	sbc	r25, r19
    5e56:	90 93 d6 04 	sts	0x04D6, r25
    5e5a:	80 93 d5 04 	sts	0x04D5, r24
		servo_rcvalid=1;						// flag that there is a valid result in the temporary variable
    5e5e:	81 e0       	ldi	r24, 0x01	; 1
    5e60:	80 93 aa 04 	sts	0x04AA, r24
    5e64:	e9 cf       	rjmp	.-46     	; 0x5e38 <__vector_13+0x148>

00005e66 <servo_RCread>:
// SERVO_NO_PULSE (-1) if timed out or no valid pulse read for 10 cycles

int16_t servo_RCread()
{
	// we timed out too much, no valid servo reading
	if( servo_rctimeout >= SERVO_RC_TIMEOUT_MAX)
    5e66:	80 91 bb 04 	lds	r24, 0x04BB
    5e6a:	8a 30       	cpi	r24, 0x0A	; 10
    5e6c:	e8 f4       	brcc	.+58     	; 0x5ea8 <servo_RCread+0x42>
	{
		servo_rcpulse=SERVO_NO_PULSE;	// reset the value to NO_PULSE
		return servo_rcpulse;
	}
	// we got a new clean reading, store it and return it
	if( servo_rctimeout == 0 && servo_rcvalid)
    5e6e:	80 91 bb 04 	lds	r24, 0x04BB
    5e72:	81 11       	cpse	r24, r1
    5e74:	04 c0       	rjmp	.+8      	; 0x5e7e <servo_RCread+0x18>
    5e76:	80 91 aa 04 	lds	r24, 0x04AA
    5e7a:	81 11       	cpse	r24, r1
    5e7c:	05 c0       	rjmp	.+10     	; 0x5e88 <servo_RCread+0x22>
		servo_rcpulse=servo_rctemp/2;
		servo_rcvalid=0;	// we consumed the reading, invalidate it
		return servo_rcpulse;
	}
	// neither new result nor timed out yet, return the last known result
	return servo_rcpulse;
    5e7e:	80 91 d7 04 	lds	r24, 0x04D7
    5e82:	90 91 d8 04 	lds	r25, 0x04D8
}
    5e86:	08 95       	ret
		return servo_rcpulse;
	}
	// we got a new clean reading, store it and return it
	if( servo_rctimeout == 0 && servo_rcvalid)
	{
		servo_rcpulse=servo_rctemp/2;
    5e88:	20 91 d5 04 	lds	r18, 0x04D5
    5e8c:	30 91 d6 04 	lds	r19, 0x04D6
    5e90:	37 fd       	sbrc	r19, 7
    5e92:	12 c0       	rjmp	.+36     	; 0x5eb8 <servo_RCread+0x52>
    5e94:	35 95       	asr	r19
    5e96:	27 95       	ror	r18
    5e98:	30 93 d8 04 	sts	0x04D8, r19
    5e9c:	20 93 d7 04 	sts	0x04D7, r18
		servo_rcvalid=0;	// we consumed the reading, invalidate it
    5ea0:	10 92 aa 04 	sts	0x04AA, r1
		return servo_rcpulse;
    5ea4:	c9 01       	movw	r24, r18
    5ea6:	08 95       	ret
int16_t servo_RCread()
{
	// we timed out too much, no valid servo reading
	if( servo_rctimeout >= SERVO_RC_TIMEOUT_MAX)
	{
		servo_rcpulse=SERVO_NO_PULSE;	// reset the value to NO_PULSE
    5ea8:	8f ef       	ldi	r24, 0xFF	; 255
    5eaa:	9f ef       	ldi	r25, 0xFF	; 255
    5eac:	90 93 d8 04 	sts	0x04D8, r25
    5eb0:	80 93 d7 04 	sts	0x04D7, r24
		return servo_rcpulse;
    5eb4:	9f ef       	ldi	r25, 0xFF	; 255
    5eb6:	08 95       	ret
	}
	// we got a new clean reading, store it and return it
	if( servo_rctimeout == 0 && servo_rcvalid)
	{
		servo_rcpulse=servo_rctemp/2;
    5eb8:	2f 5f       	subi	r18, 0xFF	; 255
    5eba:	3f 4f       	sbci	r19, 0xFF	; 255
    5ebc:	eb cf       	rjmp	.-42     	; 0x5e94 <servo_RCread+0x2e>

00005ebe <servo_doRCread_init>:

// initial setup
void servo_doRCread_init()
{
	// optional, these should be clear anyhow
	clear_bit(ACSR, ACIC); 		// source is ICP pin (set bit for comparator input)
    5ebe:	80 b7       	in	r24, 0x30	; 48
    5ec0:	8b 7f       	andi	r24, 0xFB	; 251
    5ec2:	80 bf       	out	0x30, r24	; 48
	clear_bit(TCCR1B, ICNC1); 	// no noise cancellation for more precise timing
    5ec4:	e1 e8       	ldi	r30, 0x81	; 129
    5ec6:	f0 e0       	ldi	r31, 0x00	; 0
    5ec8:	80 81       	ld	r24, Z
    5eca:	8f 77       	andi	r24, 0x7F	; 127
    5ecc:	80 83       	st	Z, r24
	clear_bit(TIMSK, ICIE1);	// disable ICP interrupts for now (TIMSK if defined in header as TIMSK1 for ATMega8x)
    5ece:	ef e6       	ldi	r30, 0x6F	; 111
    5ed0:	f0 e0       	ldi	r31, 0x00	; 0
    5ed2:	80 81       	ld	r24, Z
    5ed4:	8f 7d       	andi	r24, 0xDF	; 223
    5ed6:	80 83       	st	Z, r24

	// set ICP pin as input
	digitalMode(SERVO_INPUT_PORT, SERVO_INPUT_PIN, INPUT);
    5ed8:	20 98       	cbi	0x04, 0	; 4

	// initial variables, for clarity, should not be needed
	servo_rcbegin=0;
    5eda:	10 92 ae 04 	sts	0x04AE, r1
    5ede:	10 92 ad 04 	sts	0x04AD, r1
	servo_rcend=0;
    5ee2:	10 92 ac 04 	sts	0x04AC, r1
    5ee6:	10 92 ab 04 	sts	0x04AB, r1
	servo_gotpulse=0;
    5eea:	10 92 d4 04 	sts	0x04D4, r1
	servo_rctimeout=0;
    5eee:	10 92 bb 04 	sts	0x04BB, r1
	servo_rcpulse=SERVO_NO_PULSE;
    5ef2:	8f ef       	ldi	r24, 0xFF	; 255
    5ef4:	9f ef       	ldi	r25, 0xFF	; 255
    5ef6:	90 93 d8 04 	sts	0x04D8, r25
    5efa:	80 93 d7 04 	sts	0x04D7, r24
    5efe:	08 95       	ret

00005f00 <servo_doRCread_start>:
}

// this is called by the servo interrupt routine on beginning long pause cycle
void servo_doRCread_start()
{
	set_bit(TCCR1B, ICES1); 	// trigger on rising edge
    5f00:	e1 e8       	ldi	r30, 0x81	; 129
    5f02:	f0 e0       	ldi	r31, 0x00	; 0
    5f04:	80 81       	ld	r24, Z
    5f06:	80 64       	ori	r24, 0x40	; 64
    5f08:	80 83       	st	Z, r24
	set_bit(TIFR, ICF1);		// always clear interrupt flag (by setting it to 1) after changing the edge
    5f0a:	b5 9a       	sbi	0x16, 5	; 22
								// TIFR is defined to TIFR1 for the Atmega168
	servo_gotpulse=0;			// got no pulse yet in this cycle
    5f0c:	10 92 d4 04 	sts	0x04D4, r1
	set_bit(TIMSK, ICIE1);		// enable input capture interrupts - rest of the work is done by interrupt handler
    5f10:	ef e6       	ldi	r30, 0x6F	; 111
    5f12:	f0 e0       	ldi	r31, 0x00	; 0
    5f14:	80 81       	ld	r24, Z
    5f16:	80 62       	ori	r24, 0x20	; 32
    5f18:	80 83       	st	Z, r24
    5f1a:	08 95       	ret

00005f1c <servo_doRCread_end>:

// this is called by the servo interrupt routine on resuming after long pause cycle
void servo_doRCread_end()
{
	//uart0_puts("in RC end \n\r");
	clear_bit(TIMSK, ICIE1);	// disable further ICP interrupts, no more readings until long pause
    5f1c:	80 91 6f 00 	lds	r24, 0x006F
    5f20:	8f 7d       	andi	r24, 0xDF	; 223
    5f22:	80 93 6f 00 	sts	0x006F, r24

	// we got a valid pulse reading, store intermediate result.
	if(servo_gotpulse)
    5f26:	80 91 d4 04 	lds	r24, 0x04D4
    5f2a:	81 11       	cpse	r24, r1
    5f2c:	0a c0       	rjmp	.+20     	; 0x5f42 <servo_doRCread_end+0x26>
		servo_rcvalid=1;						// flag that there is a valid result in the temporary variable
	}
	// else update the timeout count
	else
	{
		if(servo_rctimeout <= SERVO_RC_TIMEOUT_MAX) servo_rctimeout++;
    5f2e:	80 91 bb 04 	lds	r24, 0x04BB
    5f32:	8b 30       	cpi	r24, 0x0B	; 11
    5f34:	28 f4       	brcc	.+10     	; 0x5f40 <servo_doRCread_end+0x24>
    5f36:	80 91 bb 04 	lds	r24, 0x04BB
    5f3a:	8f 5f       	subi	r24, 0xFF	; 255
    5f3c:	80 93 bb 04 	sts	0x04BB, r24
    5f40:	08 95       	ret
	clear_bit(TIMSK, ICIE1);	// disable further ICP interrupts, no more readings until long pause

	// we got a valid pulse reading, store intermediate result.
	if(servo_gotpulse)
	{
		servo_rctimeout=0;						// reset timeout count
    5f42:	10 92 bb 04 	sts	0x04BB, r1
		servo_rctemp=servo_rcend-servo_rcbegin;	//hold the intermediate result without further processing
    5f46:	80 91 ab 04 	lds	r24, 0x04AB
    5f4a:	90 91 ac 04 	lds	r25, 0x04AC
    5f4e:	20 91 ad 04 	lds	r18, 0x04AD
    5f52:	30 91 ae 04 	lds	r19, 0x04AE
    5f56:	82 1b       	sub	r24, r18
    5f58:	93 0b       	sbc	r25, r19
    5f5a:	90 93 d6 04 	sts	0x04D6, r25
    5f5e:	80 93 d5 04 	sts	0x04D5, r24
		servo_rcvalid=1;						// flag that there is a valid result in the temporary variable
    5f62:	81 e0       	ldi	r24, 0x01	; 1
    5f64:	80 93 aa 04 	sts	0x04AA, r24
    5f68:	08 95       	ret

00005f6a <__vector_10>:



// this is called on interrupt capture event
ISR(TIMER1_CAPT_vect)
{
    5f6a:	1f 92       	push	r1
    5f6c:	0f 92       	push	r0
    5f6e:	0f b6       	in	r0, 0x3f	; 63
    5f70:	0f 92       	push	r0
    5f72:	11 24       	eor	r1, r1
    5f74:	8f 93       	push	r24
    5f76:	9f 93       	push	r25
	cli(); 	// interrupts off, just in case, we want to get this done real fast
    5f78:	f8 94       	cli

	// if we were triggering on the rising edge, this is the pulse beginning
	if (bit_is_set(TCCR1B, ICES1))
    5f7a:	80 91 81 00 	lds	r24, 0x0081
    5f7e:	86 fd       	sbrc	r24, 6
    5f80:	18 c0       	rjmp	.+48     	; 0x5fb2 <__vector_10+0x48>
		set_bit(TIFR, ICF1);		// always clear interrupt flag (by setting it to 1) after changing the edge
	}
	// this is the falling edge, we successfully timed a pulse
	else
	{
		servo_rcend=ICR1;			// read the captured end time
    5f82:	80 91 86 00 	lds	r24, 0x0086
    5f86:	90 91 87 00 	lds	r25, 0x0087
    5f8a:	90 93 ac 04 	sts	0x04AC, r25
    5f8e:	80 93 ab 04 	sts	0x04AB, r24
		servo_gotpulse=1;			// flag that we got a valid pulse reading
    5f92:	81 e0       	ldi	r24, 0x01	; 1
    5f94:	80 93 d4 04 	sts	0x04D4, r24
		clear_bit(TIMSK, ICIE1);	// disable further ICP interrupts, no more readings needed this cycle
    5f98:	80 91 6f 00 	lds	r24, 0x006F
    5f9c:	8f 7d       	andi	r24, 0xDF	; 223
    5f9e:	80 93 6f 00 	sts	0x006F, r24
	}

	sei(); 	// interrupts back on
    5fa2:	78 94       	sei

}
    5fa4:	9f 91       	pop	r25
    5fa6:	8f 91       	pop	r24
    5fa8:	0f 90       	pop	r0
    5faa:	0f be       	out	0x3f, r0	; 63
    5fac:	0f 90       	pop	r0
    5fae:	1f 90       	pop	r1
    5fb0:	18 95       	reti
	cli(); 	// interrupts off, just in case, we want to get this done real fast

	// if we were triggering on the rising edge, this is the pulse beginning
	if (bit_is_set(TCCR1B, ICES1))
	{
		servo_rcbegin=ICR1;			// read the captured begin time
    5fb2:	80 91 86 00 	lds	r24, 0x0086
    5fb6:	90 91 87 00 	lds	r25, 0x0087
    5fba:	90 93 ae 04 	sts	0x04AE, r25
    5fbe:	80 93 ad 04 	sts	0x04AD, r24
		clear_bit(TCCR1B, ICES1); 	// change trigger to falling edge
    5fc2:	80 91 81 00 	lds	r24, 0x0081
    5fc6:	8f 7b       	andi	r24, 0xBF	; 191
    5fc8:	80 93 81 00 	sts	0x0081, r24
		set_bit(TIFR, ICF1);		// always clear interrupt flag (by setting it to 1) after changing the edge
    5fcc:	b5 9a       	sbi	0x16, 5	; 22
    5fce:	e9 cf       	rjmp	.-46     	; 0x5fa2 <__vector_10+0x38>

00005fd0 <suart_putc.part.0>:

  if (_tx_delay == 0)
    return;

#ifdef SUART_TURN_OFF_INTERRUPTS_WHILE_TRANSMIT
  uint8_t oldSREG = SREG;
    5fd0:	2f b7       	in	r18, 0x3f	; 63
  cli();  // turn off interrupts for a clean txmit
    5fd2:	f8 94       	cli
    );
}

inline void suart_tx_pin_write(uint8_t pin_state)
{
    digitalWrite(SUART_TX_PORT, SUART_TX_PIN, pin_state);
    5fd4:	40 98       	cbi	0x08, 0	; 8
  cli();  // turn off interrupts for a clean txmit
#endif

  // Write the start bit
  suart_tx_pin_write(LOW);
  suart_tunedDelay(_tx_delay + XMIT_START_ADJUSTMENT);
    5fd6:	e0 91 8f 02 	lds	r30, 0x028F
    5fda:	f0 91 90 02 	lds	r31, 0x0290
    5fde:	35 96       	adiw	r30, 0x05	; 5

// tuned delay loop
inline void suart_tunedDelay(uint16_t delay) {
  uint8_t tmp=0;

  asm volatile("sbiw    %0, 0x01 \n\t"
    5fe0:	30 e0       	ldi	r19, 0x00	; 0
    5fe2:	31 97       	sbiw	r30, 0x01	; 1
    5fe4:	3f ef       	ldi	r19, 0xFF	; 255
    5fe6:	ef 3f       	cpi	r30, 0xFF	; 255
    5fe8:	f3 07       	cpc	r31, r19
    5fea:	d9 f7       	brne	.-10     	; 0x5fe2 <suart_putc.part.0+0x12>

  // Write each of the 8 bits

	for (mask = 0x01; mask; mask <<= 1)
	{
	  if (b & mask) // choose bit
    5fec:	80 fd       	sbrc	r24, 0
    5fee:	74 c0       	rjmp	.+232    	; 0x60d8 <suart_putc.part.0+0x108>
    );
}

inline void suart_tx_pin_write(uint8_t pin_state)
{
    digitalWrite(SUART_TX_PORT, SUART_TX_PIN, pin_state);
    5ff0:	40 98       	cbi	0x08, 0	; 8
	  if (b & mask) // choose bit
		suart_tx_pin_write(HIGH); // send 1
	  else
		suart_tx_pin_write(LOW); // send 0

	  suart_tunedDelay(_tx_delay);
    5ff2:	e0 91 8f 02 	lds	r30, 0x028F
    5ff6:	f0 91 90 02 	lds	r31, 0x0290

// tuned delay loop
inline void suart_tunedDelay(uint16_t delay) {
  uint8_t tmp=0;

  asm volatile("sbiw    %0, 0x01 \n\t"
    5ffa:	30 e0       	ldi	r19, 0x00	; 0
    5ffc:	31 97       	sbiw	r30, 0x01	; 1
    5ffe:	3f ef       	ldi	r19, 0xFF	; 255
    6000:	ef 3f       	cpi	r30, 0xFF	; 255
    6002:	f3 07       	cpc	r31, r19
    6004:	d9 f7       	brne	.-10     	; 0x5ffc <suart_putc.part.0+0x2c>

  // Write each of the 8 bits

	for (mask = 0x01; mask; mask <<= 1)
	{
	  if (b & mask) // choose bit
    6006:	81 fd       	sbrc	r24, 1
    6008:	75 c0       	rjmp	.+234    	; 0x60f4 <suart_putc.part.0+0x124>
    );
}

inline void suart_tx_pin_write(uint8_t pin_state)
{
    digitalWrite(SUART_TX_PORT, SUART_TX_PIN, pin_state);
    600a:	40 98       	cbi	0x08, 0	; 8
	  if (b & mask) // choose bit
		suart_tx_pin_write(HIGH); // send 1
	  else
		suart_tx_pin_write(LOW); // send 0

	  suart_tunedDelay(_tx_delay);
    600c:	e0 91 8f 02 	lds	r30, 0x028F
    6010:	f0 91 90 02 	lds	r31, 0x0290

// tuned delay loop
inline void suart_tunedDelay(uint16_t delay) {
  uint8_t tmp=0;

  asm volatile("sbiw    %0, 0x01 \n\t"
    6014:	30 e0       	ldi	r19, 0x00	; 0
    6016:	31 97       	sbiw	r30, 0x01	; 1
    6018:	3f ef       	ldi	r19, 0xFF	; 255
    601a:	ef 3f       	cpi	r30, 0xFF	; 255
    601c:	f3 07       	cpc	r31, r19
    601e:	d9 f7       	brne	.-10     	; 0x6016 <suart_putc.part.0+0x46>

  // Write each of the 8 bits

	for (mask = 0x01; mask; mask <<= 1)
	{
	  if (b & mask) // choose bit
    6020:	82 fd       	sbrc	r24, 2
    6022:	66 c0       	rjmp	.+204    	; 0x60f0 <suart_putc.part.0+0x120>
    );
}

inline void suart_tx_pin_write(uint8_t pin_state)
{
    digitalWrite(SUART_TX_PORT, SUART_TX_PIN, pin_state);
    6024:	40 98       	cbi	0x08, 0	; 8
	  if (b & mask) // choose bit
		suart_tx_pin_write(HIGH); // send 1
	  else
		suart_tx_pin_write(LOW); // send 0

	  suart_tunedDelay(_tx_delay);
    6026:	e0 91 8f 02 	lds	r30, 0x028F
    602a:	f0 91 90 02 	lds	r31, 0x0290

// tuned delay loop
inline void suart_tunedDelay(uint16_t delay) {
  uint8_t tmp=0;

  asm volatile("sbiw    %0, 0x01 \n\t"
    602e:	30 e0       	ldi	r19, 0x00	; 0
    6030:	31 97       	sbiw	r30, 0x01	; 1
    6032:	3f ef       	ldi	r19, 0xFF	; 255
    6034:	ef 3f       	cpi	r30, 0xFF	; 255
    6036:	f3 07       	cpc	r31, r19
    6038:	d9 f7       	brne	.-10     	; 0x6030 <suart_putc.part.0+0x60>

  // Write each of the 8 bits

	for (mask = 0x01; mask; mask <<= 1)
	{
	  if (b & mask) // choose bit
    603a:	83 fd       	sbrc	r24, 3
    603c:	57 c0       	rjmp	.+174    	; 0x60ec <suart_putc.part.0+0x11c>
    );
}

inline void suart_tx_pin_write(uint8_t pin_state)
{
    digitalWrite(SUART_TX_PORT, SUART_TX_PIN, pin_state);
    603e:	40 98       	cbi	0x08, 0	; 8
	  if (b & mask) // choose bit
		suart_tx_pin_write(HIGH); // send 1
	  else
		suart_tx_pin_write(LOW); // send 0

	  suart_tunedDelay(_tx_delay);
    6040:	e0 91 8f 02 	lds	r30, 0x028F
    6044:	f0 91 90 02 	lds	r31, 0x0290

// tuned delay loop
inline void suart_tunedDelay(uint16_t delay) {
  uint8_t tmp=0;

  asm volatile("sbiw    %0, 0x01 \n\t"
    6048:	30 e0       	ldi	r19, 0x00	; 0
    604a:	31 97       	sbiw	r30, 0x01	; 1
    604c:	3f ef       	ldi	r19, 0xFF	; 255
    604e:	ef 3f       	cpi	r30, 0xFF	; 255
    6050:	f3 07       	cpc	r31, r19
    6052:	d9 f7       	brne	.-10     	; 0x604a <suart_putc.part.0+0x7a>

  // Write each of the 8 bits

	for (mask = 0x01; mask; mask <<= 1)
	{
	  if (b & mask) // choose bit
    6054:	84 fd       	sbrc	r24, 4
    6056:	48 c0       	rjmp	.+144    	; 0x60e8 <suart_putc.part.0+0x118>
    );
}

inline void suart_tx_pin_write(uint8_t pin_state)
{
    digitalWrite(SUART_TX_PORT, SUART_TX_PIN, pin_state);
    6058:	40 98       	cbi	0x08, 0	; 8
	  if (b & mask) // choose bit
		suart_tx_pin_write(HIGH); // send 1
	  else
		suart_tx_pin_write(LOW); // send 0

	  suart_tunedDelay(_tx_delay);
    605a:	e0 91 8f 02 	lds	r30, 0x028F
    605e:	f0 91 90 02 	lds	r31, 0x0290

// tuned delay loop
inline void suart_tunedDelay(uint16_t delay) {
  uint8_t tmp=0;

  asm volatile("sbiw    %0, 0x01 \n\t"
    6062:	30 e0       	ldi	r19, 0x00	; 0
    6064:	31 97       	sbiw	r30, 0x01	; 1
    6066:	3f ef       	ldi	r19, 0xFF	; 255
    6068:	ef 3f       	cpi	r30, 0xFF	; 255
    606a:	f3 07       	cpc	r31, r19
    606c:	d9 f7       	brne	.-10     	; 0x6064 <suart_putc.part.0+0x94>

  // Write each of the 8 bits

	for (mask = 0x01; mask; mask <<= 1)
	{
	  if (b & mask) // choose bit
    606e:	85 fd       	sbrc	r24, 5
    6070:	39 c0       	rjmp	.+114    	; 0x60e4 <suart_putc.part.0+0x114>
    );
}

inline void suart_tx_pin_write(uint8_t pin_state)
{
    digitalWrite(SUART_TX_PORT, SUART_TX_PIN, pin_state);
    6072:	40 98       	cbi	0x08, 0	; 8
	  if (b & mask) // choose bit
		suart_tx_pin_write(HIGH); // send 1
	  else
		suart_tx_pin_write(LOW); // send 0

	  suart_tunedDelay(_tx_delay);
    6074:	e0 91 8f 02 	lds	r30, 0x028F
    6078:	f0 91 90 02 	lds	r31, 0x0290

// tuned delay loop
inline void suart_tunedDelay(uint16_t delay) {
  uint8_t tmp=0;

  asm volatile("sbiw    %0, 0x01 \n\t"
    607c:	30 e0       	ldi	r19, 0x00	; 0
    607e:	31 97       	sbiw	r30, 0x01	; 1
    6080:	3f ef       	ldi	r19, 0xFF	; 255
    6082:	ef 3f       	cpi	r30, 0xFF	; 255
    6084:	f3 07       	cpc	r31, r19
    6086:	d9 f7       	brne	.-10     	; 0x607e <suart_putc.part.0+0xae>

  // Write each of the 8 bits

	for (mask = 0x01; mask; mask <<= 1)
	{
	  if (b & mask) // choose bit
    6088:	86 fd       	sbrc	r24, 6
    608a:	2a c0       	rjmp	.+84     	; 0x60e0 <suart_putc.part.0+0x110>
    );
}

inline void suart_tx_pin_write(uint8_t pin_state)
{
    digitalWrite(SUART_TX_PORT, SUART_TX_PIN, pin_state);
    608c:	40 98       	cbi	0x08, 0	; 8
	  if (b & mask) // choose bit
		suart_tx_pin_write(HIGH); // send 1
	  else
		suart_tx_pin_write(LOW); // send 0

	  suart_tunedDelay(_tx_delay);
    608e:	e0 91 8f 02 	lds	r30, 0x028F
    6092:	f0 91 90 02 	lds	r31, 0x0290

// tuned delay loop
inline void suart_tunedDelay(uint16_t delay) {
  uint8_t tmp=0;

  asm volatile("sbiw    %0, 0x01 \n\t"
    6096:	30 e0       	ldi	r19, 0x00	; 0
    6098:	31 97       	sbiw	r30, 0x01	; 1
    609a:	3f ef       	ldi	r19, 0xFF	; 255
    609c:	ef 3f       	cpi	r30, 0xFF	; 255
    609e:	f3 07       	cpc	r31, r19
    60a0:	d9 f7       	brne	.-10     	; 0x6098 <suart_putc.part.0+0xc8>

  // Write each of the 8 bits

	for (mask = 0x01; mask; mask <<= 1)
	{
	  if (b & mask) // choose bit
    60a2:	87 ff       	sbrs	r24, 7
    60a4:	1b c0       	rjmp	.+54     	; 0x60dc <suart_putc.part.0+0x10c>
    );
}

inline void suart_tx_pin_write(uint8_t pin_state)
{
    digitalWrite(SUART_TX_PORT, SUART_TX_PIN, pin_state);
    60a6:	40 9a       	sbi	0x08, 0	; 8
	  if (b & mask) // choose bit
		suart_tx_pin_write(HIGH); // send 1
	  else
		suart_tx_pin_write(LOW); // send 0

	  suart_tunedDelay(_tx_delay);
    60a8:	80 91 8f 02 	lds	r24, 0x028F
    60ac:	90 91 90 02 	lds	r25, 0x0290

// tuned delay loop
inline void suart_tunedDelay(uint16_t delay) {
  uint8_t tmp=0;

  asm volatile("sbiw    %0, 0x01 \n\t"
    60b0:	30 e0       	ldi	r19, 0x00	; 0
    60b2:	01 97       	sbiw	r24, 0x01	; 1
    60b4:	3f ef       	ldi	r19, 0xFF	; 255
    60b6:	8f 3f       	cpi	r24, 0xFF	; 255
    60b8:	93 07       	cpc	r25, r19
    60ba:	d9 f7       	brne	.-10     	; 0x60b2 <suart_putc.part.0+0xe2>
    );
}

inline void suart_tx_pin_write(uint8_t pin_state)
{
    digitalWrite(SUART_TX_PORT, SUART_TX_PIN, pin_state);
    60bc:	40 9a       	sbi	0x08, 0	; 8
	}

	suart_tx_pin_write(HIGH); // restore pin to natural state

#ifdef SUART_TURN_OFF_INTERRUPTS_WHILE_TRANSMIT
  SREG = oldSREG; // turn interrupts back on
    60be:	2f bf       	out	0x3f, r18	; 63
  sei();
    60c0:	78 94       	sei
#endif

  suart_tunedDelay(_tx_delay);
    60c2:	80 91 8f 02 	lds	r24, 0x028F
    60c6:	90 91 90 02 	lds	r25, 0x0290

// tuned delay loop
inline void suart_tunedDelay(uint16_t delay) {
  uint8_t tmp=0;

  asm volatile("sbiw    %0, 0x01 \n\t"
    60ca:	20 e0       	ldi	r18, 0x00	; 0
    60cc:	01 97       	sbiw	r24, 0x01	; 1
    60ce:	2f ef       	ldi	r18, 0xFF	; 255
    60d0:	8f 3f       	cpi	r24, 0xFF	; 255
    60d2:	92 07       	cpc	r25, r18
    60d4:	d9 f7       	brne	.-10     	; 0x60cc <suart_putc.part.0+0xfc>
    60d6:	08 95       	ret
    );
}

inline void suart_tx_pin_write(uint8_t pin_state)
{
    digitalWrite(SUART_TX_PORT, SUART_TX_PIN, pin_state);
    60d8:	40 9a       	sbi	0x08, 0	; 8
    60da:	8b cf       	rjmp	.-234    	; 0x5ff2 <suart_putc.part.0+0x22>
    60dc:	40 98       	cbi	0x08, 0	; 8
    60de:	e4 cf       	rjmp	.-56     	; 0x60a8 <suart_putc.part.0+0xd8>
    60e0:	40 9a       	sbi	0x08, 0	; 8
    60e2:	d5 cf       	rjmp	.-86     	; 0x608e <suart_putc.part.0+0xbe>
    60e4:	40 9a       	sbi	0x08, 0	; 8
    60e6:	c6 cf       	rjmp	.-116    	; 0x6074 <suart_putc.part.0+0xa4>
    60e8:	40 9a       	sbi	0x08, 0	; 8
    60ea:	b7 cf       	rjmp	.-146    	; 0x605a <suart_putc.part.0+0x8a>
    60ec:	40 9a       	sbi	0x08, 0	; 8
    60ee:	a8 cf       	rjmp	.-176    	; 0x6040 <suart_putc.part.0+0x70>
    60f0:	40 9a       	sbi	0x08, 0	; 8
    60f2:	99 cf       	rjmp	.-206    	; 0x6026 <suart_putc.part.0+0x56>
    60f4:	40 9a       	sbi	0x08, 0	; 8
    60f6:	8a cf       	rjmp	.-236    	; 0x600c <suart_putc.part.0+0x3c>

000060f8 <suart2_putc.part.1>:

  if (_tx2_delay == 0)
    return;

#ifdef SUART_TURN_OFF_INTERRUPTS_WHILE_TRANSMIT
  uint8_t oldSREG = SREG;
    60f8:	2f b7       	in	r18, 0x3f	; 63
  cli();  // turn off interrupts for a clean txmit
    60fa:	f8 94       	cli
static uint16_t _rx2_delay_stopbit;
static uint16_t _tx2_delay;

inline void suart2_tx_pin_write(uint8_t pin_state)
{
    digitalWrite(SUART2_TX_PORT, SUART2_TX_PIN, pin_state);
    60fc:	41 98       	cbi	0x08, 1	; 8
  cli();  // turn off interrupts for a clean txmit
#endif

  // Write the start bit
  suart2_tx_pin_write(LOW);
  suart_tunedDelay(_tx2_delay + XMIT_START_ADJUSTMENT);
    60fe:	e0 91 87 02 	lds	r30, 0x0287
    6102:	f0 91 88 02 	lds	r31, 0x0288
    6106:	35 96       	adiw	r30, 0x05	; 5

// tuned delay loop
inline void suart_tunedDelay(uint16_t delay) {
  uint8_t tmp=0;

  asm volatile("sbiw    %0, 0x01 \n\t"
    6108:	30 e0       	ldi	r19, 0x00	; 0
    610a:	31 97       	sbiw	r30, 0x01	; 1
    610c:	3f ef       	ldi	r19, 0xFF	; 255
    610e:	ef 3f       	cpi	r30, 0xFF	; 255
    6110:	f3 07       	cpc	r31, r19
    6112:	d9 f7       	brne	.-10     	; 0x610a <suart2_putc.part.1+0x12>

  // Write each of the 8 bits

	for (mask = 0x01; mask; mask <<= 1)
	{
	  if (b & mask) // choose bit
    6114:	80 fd       	sbrc	r24, 0
    6116:	74 c0       	rjmp	.+232    	; 0x6200 <suart2_putc.part.1+0x108>
static uint16_t _rx2_delay_stopbit;
static uint16_t _tx2_delay;

inline void suart2_tx_pin_write(uint8_t pin_state)
{
    digitalWrite(SUART2_TX_PORT, SUART2_TX_PIN, pin_state);
    6118:	41 98       	cbi	0x08, 1	; 8
	  if (b & mask) // choose bit
		suart2_tx_pin_write(HIGH); // send 1
	  else
		suart2_tx_pin_write(LOW); // send 0

	  suart_tunedDelay(_tx2_delay);
    611a:	e0 91 87 02 	lds	r30, 0x0287
    611e:	f0 91 88 02 	lds	r31, 0x0288

// tuned delay loop
inline void suart_tunedDelay(uint16_t delay) {
  uint8_t tmp=0;

  asm volatile("sbiw    %0, 0x01 \n\t"
    6122:	30 e0       	ldi	r19, 0x00	; 0
    6124:	31 97       	sbiw	r30, 0x01	; 1
    6126:	3f ef       	ldi	r19, 0xFF	; 255
    6128:	ef 3f       	cpi	r30, 0xFF	; 255
    612a:	f3 07       	cpc	r31, r19
    612c:	d9 f7       	brne	.-10     	; 0x6124 <suart2_putc.part.1+0x2c>

  // Write each of the 8 bits

	for (mask = 0x01; mask; mask <<= 1)
	{
	  if (b & mask) // choose bit
    612e:	81 fd       	sbrc	r24, 1
    6130:	75 c0       	rjmp	.+234    	; 0x621c <suart2_putc.part.1+0x124>
static uint16_t _rx2_delay_stopbit;
static uint16_t _tx2_delay;

inline void suart2_tx_pin_write(uint8_t pin_state)
{
    digitalWrite(SUART2_TX_PORT, SUART2_TX_PIN, pin_state);
    6132:	41 98       	cbi	0x08, 1	; 8
	  if (b & mask) // choose bit
		suart2_tx_pin_write(HIGH); // send 1
	  else
		suart2_tx_pin_write(LOW); // send 0

	  suart_tunedDelay(_tx2_delay);
    6134:	e0 91 87 02 	lds	r30, 0x0287
    6138:	f0 91 88 02 	lds	r31, 0x0288

// tuned delay loop
inline void suart_tunedDelay(uint16_t delay) {
  uint8_t tmp=0;

  asm volatile("sbiw    %0, 0x01 \n\t"
    613c:	30 e0       	ldi	r19, 0x00	; 0
    613e:	31 97       	sbiw	r30, 0x01	; 1
    6140:	3f ef       	ldi	r19, 0xFF	; 255
    6142:	ef 3f       	cpi	r30, 0xFF	; 255
    6144:	f3 07       	cpc	r31, r19
    6146:	d9 f7       	brne	.-10     	; 0x613e <suart2_putc.part.1+0x46>

  // Write each of the 8 bits

	for (mask = 0x01; mask; mask <<= 1)
	{
	  if (b & mask) // choose bit
    6148:	82 fd       	sbrc	r24, 2
    614a:	66 c0       	rjmp	.+204    	; 0x6218 <suart2_putc.part.1+0x120>
static uint16_t _rx2_delay_stopbit;
static uint16_t _tx2_delay;

inline void suart2_tx_pin_write(uint8_t pin_state)
{
    digitalWrite(SUART2_TX_PORT, SUART2_TX_PIN, pin_state);
    614c:	41 98       	cbi	0x08, 1	; 8
	  if (b & mask) // choose bit
		suart2_tx_pin_write(HIGH); // send 1
	  else
		suart2_tx_pin_write(LOW); // send 0

	  suart_tunedDelay(_tx2_delay);
    614e:	e0 91 87 02 	lds	r30, 0x0287
    6152:	f0 91 88 02 	lds	r31, 0x0288

// tuned delay loop
inline void suart_tunedDelay(uint16_t delay) {
  uint8_t tmp=0;

  asm volatile("sbiw    %0, 0x01 \n\t"
    6156:	30 e0       	ldi	r19, 0x00	; 0
    6158:	31 97       	sbiw	r30, 0x01	; 1
    615a:	3f ef       	ldi	r19, 0xFF	; 255
    615c:	ef 3f       	cpi	r30, 0xFF	; 255
    615e:	f3 07       	cpc	r31, r19
    6160:	d9 f7       	brne	.-10     	; 0x6158 <suart2_putc.part.1+0x60>

  // Write each of the 8 bits

	for (mask = 0x01; mask; mask <<= 1)
	{
	  if (b & mask) // choose bit
    6162:	83 fd       	sbrc	r24, 3
    6164:	57 c0       	rjmp	.+174    	; 0x6214 <suart2_putc.part.1+0x11c>
static uint16_t _rx2_delay_stopbit;
static uint16_t _tx2_delay;

inline void suart2_tx_pin_write(uint8_t pin_state)
{
    digitalWrite(SUART2_TX_PORT, SUART2_TX_PIN, pin_state);
    6166:	41 98       	cbi	0x08, 1	; 8
	  if (b & mask) // choose bit
		suart2_tx_pin_write(HIGH); // send 1
	  else
		suart2_tx_pin_write(LOW); // send 0

	  suart_tunedDelay(_tx2_delay);
    6168:	e0 91 87 02 	lds	r30, 0x0287
    616c:	f0 91 88 02 	lds	r31, 0x0288

// tuned delay loop
inline void suart_tunedDelay(uint16_t delay) {
  uint8_t tmp=0;

  asm volatile("sbiw    %0, 0x01 \n\t"
    6170:	30 e0       	ldi	r19, 0x00	; 0
    6172:	31 97       	sbiw	r30, 0x01	; 1
    6174:	3f ef       	ldi	r19, 0xFF	; 255
    6176:	ef 3f       	cpi	r30, 0xFF	; 255
    6178:	f3 07       	cpc	r31, r19
    617a:	d9 f7       	brne	.-10     	; 0x6172 <suart2_putc.part.1+0x7a>

  // Write each of the 8 bits

	for (mask = 0x01; mask; mask <<= 1)
	{
	  if (b & mask) // choose bit
    617c:	84 fd       	sbrc	r24, 4
    617e:	48 c0       	rjmp	.+144    	; 0x6210 <suart2_putc.part.1+0x118>
static uint16_t _rx2_delay_stopbit;
static uint16_t _tx2_delay;

inline void suart2_tx_pin_write(uint8_t pin_state)
{
    digitalWrite(SUART2_TX_PORT, SUART2_TX_PIN, pin_state);
    6180:	41 98       	cbi	0x08, 1	; 8
	  if (b & mask) // choose bit
		suart2_tx_pin_write(HIGH); // send 1
	  else
		suart2_tx_pin_write(LOW); // send 0

	  suart_tunedDelay(_tx2_delay);
    6182:	e0 91 87 02 	lds	r30, 0x0287
    6186:	f0 91 88 02 	lds	r31, 0x0288

// tuned delay loop
inline void suart_tunedDelay(uint16_t delay) {
  uint8_t tmp=0;

  asm volatile("sbiw    %0, 0x01 \n\t"
    618a:	30 e0       	ldi	r19, 0x00	; 0
    618c:	31 97       	sbiw	r30, 0x01	; 1
    618e:	3f ef       	ldi	r19, 0xFF	; 255
    6190:	ef 3f       	cpi	r30, 0xFF	; 255
    6192:	f3 07       	cpc	r31, r19
    6194:	d9 f7       	brne	.-10     	; 0x618c <suart2_putc.part.1+0x94>

  // Write each of the 8 bits

	for (mask = 0x01; mask; mask <<= 1)
	{
	  if (b & mask) // choose bit
    6196:	85 fd       	sbrc	r24, 5
    6198:	39 c0       	rjmp	.+114    	; 0x620c <suart2_putc.part.1+0x114>
static uint16_t _rx2_delay_stopbit;
static uint16_t _tx2_delay;

inline void suart2_tx_pin_write(uint8_t pin_state)
{
    digitalWrite(SUART2_TX_PORT, SUART2_TX_PIN, pin_state);
    619a:	41 98       	cbi	0x08, 1	; 8
	  if (b & mask) // choose bit
		suart2_tx_pin_write(HIGH); // send 1
	  else
		suart2_tx_pin_write(LOW); // send 0

	  suart_tunedDelay(_tx2_delay);
    619c:	e0 91 87 02 	lds	r30, 0x0287
    61a0:	f0 91 88 02 	lds	r31, 0x0288

// tuned delay loop
inline void suart_tunedDelay(uint16_t delay) {
  uint8_t tmp=0;

  asm volatile("sbiw    %0, 0x01 \n\t"
    61a4:	30 e0       	ldi	r19, 0x00	; 0
    61a6:	31 97       	sbiw	r30, 0x01	; 1
    61a8:	3f ef       	ldi	r19, 0xFF	; 255
    61aa:	ef 3f       	cpi	r30, 0xFF	; 255
    61ac:	f3 07       	cpc	r31, r19
    61ae:	d9 f7       	brne	.-10     	; 0x61a6 <suart2_putc.part.1+0xae>

  // Write each of the 8 bits

	for (mask = 0x01; mask; mask <<= 1)
	{
	  if (b & mask) // choose bit
    61b0:	86 fd       	sbrc	r24, 6
    61b2:	2a c0       	rjmp	.+84     	; 0x6208 <suart2_putc.part.1+0x110>
static uint16_t _rx2_delay_stopbit;
static uint16_t _tx2_delay;

inline void suart2_tx_pin_write(uint8_t pin_state)
{
    digitalWrite(SUART2_TX_PORT, SUART2_TX_PIN, pin_state);
    61b4:	41 98       	cbi	0x08, 1	; 8
	  if (b & mask) // choose bit
		suart2_tx_pin_write(HIGH); // send 1
	  else
		suart2_tx_pin_write(LOW); // send 0

	  suart_tunedDelay(_tx2_delay);
    61b6:	e0 91 87 02 	lds	r30, 0x0287
    61ba:	f0 91 88 02 	lds	r31, 0x0288

// tuned delay loop
inline void suart_tunedDelay(uint16_t delay) {
  uint8_t tmp=0;

  asm volatile("sbiw    %0, 0x01 \n\t"
    61be:	30 e0       	ldi	r19, 0x00	; 0
    61c0:	31 97       	sbiw	r30, 0x01	; 1
    61c2:	3f ef       	ldi	r19, 0xFF	; 255
    61c4:	ef 3f       	cpi	r30, 0xFF	; 255
    61c6:	f3 07       	cpc	r31, r19
    61c8:	d9 f7       	brne	.-10     	; 0x61c0 <suart2_putc.part.1+0xc8>

  // Write each of the 8 bits

	for (mask = 0x01; mask; mask <<= 1)
	{
	  if (b & mask) // choose bit
    61ca:	87 ff       	sbrs	r24, 7
    61cc:	1b c0       	rjmp	.+54     	; 0x6204 <suart2_putc.part.1+0x10c>
static uint16_t _rx2_delay_stopbit;
static uint16_t _tx2_delay;

inline void suart2_tx_pin_write(uint8_t pin_state)
{
    digitalWrite(SUART2_TX_PORT, SUART2_TX_PIN, pin_state);
    61ce:	41 9a       	sbi	0x08, 1	; 8
	  if (b & mask) // choose bit
		suart2_tx_pin_write(HIGH); // send 1
	  else
		suart2_tx_pin_write(LOW); // send 0

	  suart_tunedDelay(_tx2_delay);
    61d0:	80 91 87 02 	lds	r24, 0x0287
    61d4:	90 91 88 02 	lds	r25, 0x0288

// tuned delay loop
inline void suart_tunedDelay(uint16_t delay) {
  uint8_t tmp=0;

  asm volatile("sbiw    %0, 0x01 \n\t"
    61d8:	30 e0       	ldi	r19, 0x00	; 0
    61da:	01 97       	sbiw	r24, 0x01	; 1
    61dc:	3f ef       	ldi	r19, 0xFF	; 255
    61de:	8f 3f       	cpi	r24, 0xFF	; 255
    61e0:	93 07       	cpc	r25, r19
    61e2:	d9 f7       	brne	.-10     	; 0x61da <suart2_putc.part.1+0xe2>
static uint16_t _rx2_delay_stopbit;
static uint16_t _tx2_delay;

inline void suart2_tx_pin_write(uint8_t pin_state)
{
    digitalWrite(SUART2_TX_PORT, SUART2_TX_PIN, pin_state);
    61e4:	41 9a       	sbi	0x08, 1	; 8
	}

	suart2_tx_pin_write(HIGH); // restore pin to natural state

#ifdef SUART_TURN_OFF_INTERRUPTS_WHILE_TRANSMIT
  SREG = oldSREG; // turn interrupts back on
    61e6:	2f bf       	out	0x3f, r18	; 63
  sei();
    61e8:	78 94       	sei
#endif

  suart_tunedDelay(_tx2_delay);
    61ea:	80 91 87 02 	lds	r24, 0x0287
    61ee:	90 91 88 02 	lds	r25, 0x0288

// tuned delay loop
inline void suart_tunedDelay(uint16_t delay) {
  uint8_t tmp=0;

  asm volatile("sbiw    %0, 0x01 \n\t"
    61f2:	20 e0       	ldi	r18, 0x00	; 0
    61f4:	01 97       	sbiw	r24, 0x01	; 1
    61f6:	2f ef       	ldi	r18, 0xFF	; 255
    61f8:	8f 3f       	cpi	r24, 0xFF	; 255
    61fa:	92 07       	cpc	r25, r18
    61fc:	d9 f7       	brne	.-10     	; 0x61f4 <suart2_putc.part.1+0xfc>
    61fe:	08 95       	ret
static uint16_t _rx2_delay_stopbit;
static uint16_t _tx2_delay;

inline void suart2_tx_pin_write(uint8_t pin_state)
{
    digitalWrite(SUART2_TX_PORT, SUART2_TX_PIN, pin_state);
    6200:	41 9a       	sbi	0x08, 1	; 8
    6202:	8b cf       	rjmp	.-234    	; 0x611a <suart2_putc.part.1+0x22>
    6204:	41 98       	cbi	0x08, 1	; 8
    6206:	e4 cf       	rjmp	.-56     	; 0x61d0 <suart2_putc.part.1+0xd8>
    6208:	41 9a       	sbi	0x08, 1	; 8
    620a:	d5 cf       	rjmp	.-86     	; 0x61b6 <suart2_putc.part.1+0xbe>
    620c:	41 9a       	sbi	0x08, 1	; 8
    620e:	c6 cf       	rjmp	.-116    	; 0x619c <suart2_putc.part.1+0xa4>
    6210:	41 9a       	sbi	0x08, 1	; 8
    6212:	b7 cf       	rjmp	.-146    	; 0x6182 <suart2_putc.part.1+0x8a>
    6214:	41 9a       	sbi	0x08, 1	; 8
    6216:	a8 cf       	rjmp	.-176    	; 0x6168 <suart2_putc.part.1+0x70>
    6218:	41 9a       	sbi	0x08, 1	; 8
    621a:	99 cf       	rjmp	.-206    	; 0x614e <suart2_putc.part.1+0x56>
    621c:	41 9a       	sbi	0x08, 1	; 8
    621e:	8a cf       	rjmp	.-236    	; 0x6134 <suart2_putc.part.1+0x3c>

00006220 <suart_init>:
    digitalWrite(SUART_TX_PORT, SUART_TX_PIN, pin_state);
}

// Module Init
void suart_init(long speed)
{
    6220:	0f 93       	push	r16
    6222:	1f 93       	push	r17
  _rx_delay_centering=0;
    6224:	10 92 96 02 	sts	0x0296, r1
    6228:	10 92 95 02 	sts	0x0295, r1
  _rx_delay_intrabit=0;
    622c:	10 92 94 02 	sts	0x0294, r1
    6230:	10 92 93 02 	sts	0x0293, r1
  _rx_delay_stopbit=0;
    6234:	10 92 92 02 	sts	0x0292, r1
    6238:	10 92 91 02 	sts	0x0291, r1
  _tx_delay=0;
    623c:	10 92 90 02 	sts	0x0290, r1
    6240:	10 92 8f 02 	sts	0x028F, r1

  // set Tx pin for output
  digitalMode(SUART_TX_PORT, SUART_TX_PIN, OUTPUT);
    6244:	38 9a       	sbi	0x07, 0	; 7
  digitalWrite(SUART_TX_PORT, SUART_TX_PIN, HIGH);
    6246:	40 9a       	sbi	0x08, 0	; 8
  // read delay settings from table to match baud rate

  uint8_t i;
  for (i=0; i<sizeof(suart_delay_table)/sizeof(suart_delay_table[0]); ++i)
  {
    long baud = pgm_read_dword(&suart_delay_table[i].baud);
    6248:	e8 ed       	ldi	r30, 0xD8	; 216
    624a:	f8 e1       	ldi	r31, 0x18	; 24
    624c:	05 91       	lpm	r16, Z+
    624e:	15 91       	lpm	r17, Z+
    6250:	25 91       	lpm	r18, Z+
    6252:	34 91       	lpm	r19, Z
    if (baud == speed)
    6254:	06 17       	cp	r16, r22
    6256:	17 07       	cpc	r17, r23
    6258:	28 07       	cpc	r18, r24
    625a:	39 07       	cpc	r19, r25
    625c:	09 f4       	brne	.+2      	; 0x6260 <suart_init+0x40>
    625e:	87 c0       	rjmp	.+270    	; 0x636e <suart_init+0x14e>
  // read delay settings from table to match baud rate

  uint8_t i;
  for (i=0; i<sizeof(suart_delay_table)/sizeof(suart_delay_table[0]); ++i)
  {
    long baud = pgm_read_dword(&suart_delay_table[i].baud);
    6260:	e4 ee       	ldi	r30, 0xE4	; 228
    6262:	f8 e1       	ldi	r31, 0x18	; 24
    6264:	05 91       	lpm	r16, Z+
    6266:	15 91       	lpm	r17, Z+
    6268:	25 91       	lpm	r18, Z+
    626a:	34 91       	lpm	r19, Z
    if (baud == speed)
    626c:	06 17       	cp	r16, r22
    626e:	17 07       	cpc	r17, r23
    6270:	28 07       	cpc	r18, r24
    6272:	39 07       	cpc	r19, r25
    6274:	09 f4       	brne	.+2      	; 0x6278 <suart_init+0x58>
    6276:	c4 c0       	rjmp	.+392    	; 0x6400 <suart_init+0x1e0>
  // read delay settings from table to match baud rate

  uint8_t i;
  for (i=0; i<sizeof(suart_delay_table)/sizeof(suart_delay_table[0]); ++i)
  {
    long baud = pgm_read_dword(&suart_delay_table[i].baud);
    6278:	e0 ef       	ldi	r30, 0xF0	; 240
    627a:	f8 e1       	ldi	r31, 0x18	; 24
    627c:	05 91       	lpm	r16, Z+
    627e:	15 91       	lpm	r17, Z+
    6280:	25 91       	lpm	r18, Z+
    6282:	34 91       	lpm	r19, Z
    if (baud == speed)
    6284:	06 17       	cp	r16, r22
    6286:	17 07       	cpc	r17, r23
    6288:	28 07       	cpc	r18, r24
    628a:	39 07       	cpc	r19, r25
    628c:	09 f4       	brne	.+2      	; 0x6290 <suart_init+0x70>
    628e:	bb c0       	rjmp	.+374    	; 0x6406 <suart_init+0x1e6>
  // read delay settings from table to match baud rate

  uint8_t i;
  for (i=0; i<sizeof(suart_delay_table)/sizeof(suart_delay_table[0]); ++i)
  {
    long baud = pgm_read_dword(&suart_delay_table[i].baud);
    6290:	ec ef       	ldi	r30, 0xFC	; 252
    6292:	f8 e1       	ldi	r31, 0x18	; 24
    6294:	05 91       	lpm	r16, Z+
    6296:	15 91       	lpm	r17, Z+
    6298:	25 91       	lpm	r18, Z+
    629a:	34 91       	lpm	r19, Z
    if (baud == speed)
    629c:	06 17       	cp	r16, r22
    629e:	17 07       	cpc	r17, r23
    62a0:	28 07       	cpc	r18, r24
    62a2:	39 07       	cpc	r19, r25
    62a4:	09 f4       	brne	.+2      	; 0x62a8 <suart_init+0x88>
    62a6:	b2 c0       	rjmp	.+356    	; 0x640c <suart_init+0x1ec>
  // read delay settings from table to match baud rate

  uint8_t i;
  for (i=0; i<sizeof(suart_delay_table)/sizeof(suart_delay_table[0]); ++i)
  {
    long baud = pgm_read_dword(&suart_delay_table[i].baud);
    62a8:	e8 e0       	ldi	r30, 0x08	; 8
    62aa:	f9 e1       	ldi	r31, 0x19	; 25
    62ac:	05 91       	lpm	r16, Z+
    62ae:	15 91       	lpm	r17, Z+
    62b0:	25 91       	lpm	r18, Z+
    62b2:	34 91       	lpm	r19, Z
    if (baud == speed)
    62b4:	06 17       	cp	r16, r22
    62b6:	17 07       	cpc	r17, r23
    62b8:	28 07       	cpc	r18, r24
    62ba:	39 07       	cpc	r19, r25
    62bc:	09 f4       	brne	.+2      	; 0x62c0 <suart_init+0xa0>
    62be:	a9 c0       	rjmp	.+338    	; 0x6412 <suart_init+0x1f2>
  // read delay settings from table to match baud rate

  uint8_t i;
  for (i=0; i<sizeof(suart_delay_table)/sizeof(suart_delay_table[0]); ++i)
  {
    long baud = pgm_read_dword(&suart_delay_table[i].baud);
    62c0:	e4 e1       	ldi	r30, 0x14	; 20
    62c2:	f9 e1       	ldi	r31, 0x19	; 25
    62c4:	05 91       	lpm	r16, Z+
    62c6:	15 91       	lpm	r17, Z+
    62c8:	25 91       	lpm	r18, Z+
    62ca:	34 91       	lpm	r19, Z
    if (baud == speed)
    62cc:	06 17       	cp	r16, r22
    62ce:	17 07       	cpc	r17, r23
    62d0:	28 07       	cpc	r18, r24
    62d2:	39 07       	cpc	r19, r25
    62d4:	09 f4       	brne	.+2      	; 0x62d8 <suart_init+0xb8>
    62d6:	a0 c0       	rjmp	.+320    	; 0x6418 <suart_init+0x1f8>
  // read delay settings from table to match baud rate

  uint8_t i;
  for (i=0; i<sizeof(suart_delay_table)/sizeof(suart_delay_table[0]); ++i)
  {
    long baud = pgm_read_dword(&suart_delay_table[i].baud);
    62d8:	e0 e2       	ldi	r30, 0x20	; 32
    62da:	f9 e1       	ldi	r31, 0x19	; 25
    62dc:	05 91       	lpm	r16, Z+
    62de:	15 91       	lpm	r17, Z+
    62e0:	25 91       	lpm	r18, Z+
    62e2:	34 91       	lpm	r19, Z
    if (baud == speed)
    62e4:	06 17       	cp	r16, r22
    62e6:	17 07       	cpc	r17, r23
    62e8:	28 07       	cpc	r18, r24
    62ea:	39 07       	cpc	r19, r25
    62ec:	09 f4       	brne	.+2      	; 0x62f0 <suart_init+0xd0>
    62ee:	97 c0       	rjmp	.+302    	; 0x641e <suart_init+0x1fe>
  // read delay settings from table to match baud rate

  uint8_t i;
  for (i=0; i<sizeof(suart_delay_table)/sizeof(suart_delay_table[0]); ++i)
  {
    long baud = pgm_read_dword(&suart_delay_table[i].baud);
    62f0:	ec e2       	ldi	r30, 0x2C	; 44
    62f2:	f9 e1       	ldi	r31, 0x19	; 25
    62f4:	05 91       	lpm	r16, Z+
    62f6:	15 91       	lpm	r17, Z+
    62f8:	25 91       	lpm	r18, Z+
    62fa:	34 91       	lpm	r19, Z
    if (baud == speed)
    62fc:	06 17       	cp	r16, r22
    62fe:	17 07       	cpc	r17, r23
    6300:	28 07       	cpc	r18, r24
    6302:	39 07       	cpc	r19, r25
    6304:	09 f4       	brne	.+2      	; 0x6308 <suart_init+0xe8>
    6306:	8e c0       	rjmp	.+284    	; 0x6424 <suart_init+0x204>
  // read delay settings from table to match baud rate

  uint8_t i;
  for (i=0; i<sizeof(suart_delay_table)/sizeof(suart_delay_table[0]); ++i)
  {
    long baud = pgm_read_dword(&suart_delay_table[i].baud);
    6308:	e8 e3       	ldi	r30, 0x38	; 56
    630a:	f9 e1       	ldi	r31, 0x19	; 25
    630c:	05 91       	lpm	r16, Z+
    630e:	15 91       	lpm	r17, Z+
    6310:	25 91       	lpm	r18, Z+
    6312:	34 91       	lpm	r19, Z
    if (baud == speed)
    6314:	06 17       	cp	r16, r22
    6316:	17 07       	cpc	r17, r23
    6318:	28 07       	cpc	r18, r24
    631a:	39 07       	cpc	r19, r25
    631c:	09 f4       	brne	.+2      	; 0x6320 <suart_init+0x100>
    631e:	85 c0       	rjmp	.+266    	; 0x642a <suart_init+0x20a>
  // read delay settings from table to match baud rate

  uint8_t i;
  for (i=0; i<sizeof(suart_delay_table)/sizeof(suart_delay_table[0]); ++i)
  {
    long baud = pgm_read_dword(&suart_delay_table[i].baud);
    6320:	e4 e4       	ldi	r30, 0x44	; 68
    6322:	f9 e1       	ldi	r31, 0x19	; 25
    6324:	05 91       	lpm	r16, Z+
    6326:	15 91       	lpm	r17, Z+
    6328:	25 91       	lpm	r18, Z+
    632a:	34 91       	lpm	r19, Z
    if (baud == speed)
    632c:	06 17       	cp	r16, r22
    632e:	17 07       	cpc	r17, r23
    6330:	28 07       	cpc	r18, r24
    6332:	39 07       	cpc	r19, r25
    6334:	09 f4       	brne	.+2      	; 0x6338 <suart_init+0x118>
    6336:	7c c0       	rjmp	.+248    	; 0x6430 <suart_init+0x210>
  // read delay settings from table to match baud rate

  uint8_t i;
  for (i=0; i<sizeof(suart_delay_table)/sizeof(suart_delay_table[0]); ++i)
  {
    long baud = pgm_read_dword(&suart_delay_table[i].baud);
    6338:	e0 e5       	ldi	r30, 0x50	; 80
    633a:	f9 e1       	ldi	r31, 0x19	; 25
    633c:	05 91       	lpm	r16, Z+
    633e:	15 91       	lpm	r17, Z+
    6340:	25 91       	lpm	r18, Z+
    6342:	34 91       	lpm	r19, Z
    if (baud == speed)
    6344:	06 17       	cp	r16, r22
    6346:	17 07       	cpc	r17, r23
    6348:	28 07       	cpc	r18, r24
    634a:	39 07       	cpc	r19, r25
    634c:	09 f4       	brne	.+2      	; 0x6350 <suart_init+0x130>
    634e:	73 c0       	rjmp	.+230    	; 0x6436 <suart_init+0x216>
  // read delay settings from table to match baud rate

  uint8_t i;
  for (i=0; i<sizeof(suart_delay_table)/sizeof(suart_delay_table[0]); ++i)
  {
    long baud = pgm_read_dword(&suart_delay_table[i].baud);
    6350:	ec e5       	ldi	r30, 0x5C	; 92
    6352:	f9 e1       	ldi	r31, 0x19	; 25
    6354:	05 91       	lpm	r16, Z+
    6356:	15 91       	lpm	r17, Z+
    6358:	25 91       	lpm	r18, Z+
    635a:	34 91       	lpm	r19, Z
    if (baud == speed)
    635c:	06 17       	cp	r16, r22
    635e:	17 07       	cpc	r17, r23
    6360:	28 07       	cpc	r18, r24
    6362:	39 07       	cpc	r19, r25
    6364:	09 f4       	brne	.+2      	; 0x6368 <suart_init+0x148>
    6366:	6a c0       	rjmp	.+212    	; 0x643c <suart_init+0x21c>
      _rx_delay_stopbit = pgm_read_word(&suart_delay_table[i].rx_delay_stopbit);
      _tx_delay = pgm_read_word(&suart_delay_table[i].tx_delay);
      break;
    }
  }
}
    6368:	1f 91       	pop	r17
    636a:	0f 91       	pop	r16
    636c:	08 95       	ret
  // read delay settings from table to match baud rate

  uint8_t i;
  for (i=0; i<sizeof(suart_delay_table)/sizeof(suart_delay_table[0]); ++i)
  {
    long baud = pgm_read_dword(&suart_delay_table[i].baud);
    636e:	80 e0       	ldi	r24, 0x00	; 0
    6370:	90 e0       	ldi	r25, 0x00	; 0
    if (baud == speed)
    {
      _rx_delay_centering = pgm_read_word(&suart_delay_table[i].rx_delay_centering);
    6372:	fc 01       	movw	r30, r24
    6374:	ee 0f       	add	r30, r30
    6376:	ff 1f       	adc	r31, r31
    6378:	e8 0f       	add	r30, r24
    637a:	f9 1f       	adc	r31, r25
    637c:	ee 0f       	add	r30, r30
    637e:	ff 1f       	adc	r31, r31
    6380:	ee 0f       	add	r30, r30
    6382:	ff 1f       	adc	r31, r31
    6384:	e4 52       	subi	r30, 0x24	; 36
    6386:	f7 4e       	sbci	r31, 0xE7	; 231
    6388:	25 91       	lpm	r18, Z+
    638a:	34 91       	lpm	r19, Z
    638c:	30 93 96 02 	sts	0x0296, r19
    6390:	20 93 95 02 	sts	0x0295, r18
      _rx_delay_intrabit = pgm_read_word(&suart_delay_table[i].rx_delay_intrabit);
    6394:	fc 01       	movw	r30, r24
    6396:	ee 0f       	add	r30, r30
    6398:	ff 1f       	adc	r31, r31
    639a:	e8 0f       	add	r30, r24
    639c:	f9 1f       	adc	r31, r25
    639e:	ee 0f       	add	r30, r30
    63a0:	ff 1f       	adc	r31, r31
    63a2:	ee 0f       	add	r30, r30
    63a4:	ff 1f       	adc	r31, r31
    63a6:	e2 52       	subi	r30, 0x22	; 34
    63a8:	f7 4e       	sbci	r31, 0xE7	; 231
    63aa:	25 91       	lpm	r18, Z+
    63ac:	34 91       	lpm	r19, Z
    63ae:	30 93 94 02 	sts	0x0294, r19
    63b2:	20 93 93 02 	sts	0x0293, r18
      _rx_delay_stopbit = pgm_read_word(&suart_delay_table[i].rx_delay_stopbit);
    63b6:	fc 01       	movw	r30, r24
    63b8:	ee 0f       	add	r30, r30
    63ba:	ff 1f       	adc	r31, r31
    63bc:	e8 0f       	add	r30, r24
    63be:	f9 1f       	adc	r31, r25
    63c0:	ee 0f       	add	r30, r30
    63c2:	ff 1f       	adc	r31, r31
    63c4:	ee 0f       	add	r30, r30
    63c6:	ff 1f       	adc	r31, r31
    63c8:	e0 52       	subi	r30, 0x20	; 32
    63ca:	f7 4e       	sbci	r31, 0xE7	; 231
    63cc:	25 91       	lpm	r18, Z+
    63ce:	34 91       	lpm	r19, Z
    63d0:	30 93 92 02 	sts	0x0292, r19
    63d4:	20 93 91 02 	sts	0x0291, r18
      _tx_delay = pgm_read_word(&suart_delay_table[i].tx_delay);
    63d8:	fc 01       	movw	r30, r24
    63da:	ee 0f       	add	r30, r30
    63dc:	ff 1f       	adc	r31, r31
    63de:	e8 0f       	add	r30, r24
    63e0:	f9 1f       	adc	r31, r25
    63e2:	ee 0f       	add	r30, r30
    63e4:	ff 1f       	adc	r31, r31
    63e6:	ee 0f       	add	r30, r30
    63e8:	ff 1f       	adc	r31, r31
    63ea:	ee 51       	subi	r30, 0x1E	; 30
    63ec:	f7 4e       	sbci	r31, 0xE7	; 231
    63ee:	85 91       	lpm	r24, Z+
    63f0:	94 91       	lpm	r25, Z
    63f2:	90 93 90 02 	sts	0x0290, r25
    63f6:	80 93 8f 02 	sts	0x028F, r24
      break;
    }
  }
}
    63fa:	1f 91       	pop	r17
    63fc:	0f 91       	pop	r16
    63fe:	08 95       	ret
  // read delay settings from table to match baud rate

  uint8_t i;
  for (i=0; i<sizeof(suart_delay_table)/sizeof(suart_delay_table[0]); ++i)
  {
    long baud = pgm_read_dword(&suart_delay_table[i].baud);
    6400:	81 e0       	ldi	r24, 0x01	; 1
    6402:	90 e0       	ldi	r25, 0x00	; 0
    6404:	b6 cf       	rjmp	.-148    	; 0x6372 <suart_init+0x152>
    6406:	82 e0       	ldi	r24, 0x02	; 2
    6408:	90 e0       	ldi	r25, 0x00	; 0
    640a:	b3 cf       	rjmp	.-154    	; 0x6372 <suart_init+0x152>
    640c:	83 e0       	ldi	r24, 0x03	; 3
    640e:	90 e0       	ldi	r25, 0x00	; 0
    6410:	b0 cf       	rjmp	.-160    	; 0x6372 <suart_init+0x152>
    6412:	84 e0       	ldi	r24, 0x04	; 4
    6414:	90 e0       	ldi	r25, 0x00	; 0
    6416:	ad cf       	rjmp	.-166    	; 0x6372 <suart_init+0x152>
    6418:	85 e0       	ldi	r24, 0x05	; 5
    641a:	90 e0       	ldi	r25, 0x00	; 0
    641c:	aa cf       	rjmp	.-172    	; 0x6372 <suart_init+0x152>
    641e:	86 e0       	ldi	r24, 0x06	; 6
    6420:	90 e0       	ldi	r25, 0x00	; 0
    6422:	a7 cf       	rjmp	.-178    	; 0x6372 <suart_init+0x152>
    6424:	87 e0       	ldi	r24, 0x07	; 7
    6426:	90 e0       	ldi	r25, 0x00	; 0
    6428:	a4 cf       	rjmp	.-184    	; 0x6372 <suart_init+0x152>
    642a:	88 e0       	ldi	r24, 0x08	; 8
    642c:	90 e0       	ldi	r25, 0x00	; 0
    642e:	a1 cf       	rjmp	.-190    	; 0x6372 <suart_init+0x152>
    6430:	89 e0       	ldi	r24, 0x09	; 9
    6432:	90 e0       	ldi	r25, 0x00	; 0
    6434:	9e cf       	rjmp	.-196    	; 0x6372 <suart_init+0x152>
    6436:	8a e0       	ldi	r24, 0x0A	; 10
    6438:	90 e0       	ldi	r25, 0x00	; 0
    643a:	9b cf       	rjmp	.-202    	; 0x6372 <suart_init+0x152>
    643c:	8b e0       	ldi	r24, 0x0B	; 11
    643e:	90 e0       	ldi	r25, 0x00	; 0
    6440:	98 cf       	rjmp	.-208    	; 0x6372 <suart_init+0x152>

00006442 <suart_putc>:

void suart_putc(uint8_t b)
{
	uint8_t mask;

  if (_tx_delay == 0)
    6442:	20 91 8f 02 	lds	r18, 0x028F
    6446:	30 91 90 02 	lds	r19, 0x0290
    644a:	23 2b       	or	r18, r19
    644c:	11 f0       	breq	.+4      	; 0x6452 <suart_putc+0x10>
    644e:	0c 94 e8 2f 	jmp	0x5fd0	; 0x5fd0 <suart_putc.part.0>
    6452:	08 95       	ret

00006454 <suart_puts>:

  suart_tunedDelay(_tx_delay);
}

void suart_puts(char* string)
{
    6454:	1f 93       	push	r17
    6456:	cf 93       	push	r28
    6458:	df 93       	push	r29
    645a:	ec 01       	movw	r28, r24
	uint8_t i=0;
	while( (string[i]!='\0') & (i<255))
    645c:	88 81       	ld	r24, Y
    645e:	88 23       	and	r24, r24
    6460:	71 f0       	breq	.+28     	; 0x647e <suart_puts+0x2a>
    6462:	20 91 8f 02 	lds	r18, 0x028F
    6466:	30 91 90 02 	lds	r19, 0x0290
    646a:	23 2b       	or	r18, r19
    646c:	91 f4       	brne	.+36     	; 0x6492 <suart_puts+0x3e>
  suart_tunedDelay(_tx_delay);
}

void suart_puts(char* string)
{
	uint8_t i=0;
    646e:	80 e0       	ldi	r24, 0x00	; 0
	while( (string[i]!='\0') & (i<255))
	{
		suart_putc(string[i]);
	 	i++;
    6470:	8f 5f       	subi	r24, 0xFF	; 255
}

void suart_puts(char* string)
{
	uint8_t i=0;
	while( (string[i]!='\0') & (i<255))
    6472:	fe 01       	movw	r30, r28
    6474:	e8 0f       	add	r30, r24
    6476:	f1 1d       	adc	r31, r1
    6478:	90 81       	ld	r25, Z
    647a:	91 11       	cpse	r25, r1
    647c:	04 c0       	rjmp	.+8      	; 0x6486 <suart_puts+0x32>
	{
		suart_putc(string[i]);
	 	i++;
	}
}
    647e:	df 91       	pop	r29
    6480:	cf 91       	pop	r28
    6482:	1f 91       	pop	r17
    6484:	08 95       	ret
}

void suart_puts(char* string)
{
	uint8_t i=0;
	while( (string[i]!='\0') & (i<255))
    6486:	8f 3f       	cpi	r24, 0xFF	; 255
    6488:	99 f7       	brne	.-26     	; 0x6470 <suart_puts+0x1c>
	{
		suart_putc(string[i]);
	 	i++;
	}
}
    648a:	df 91       	pop	r29
    648c:	cf 91       	pop	r28
    648e:	1f 91       	pop	r17
    6490:	08 95       	ret
  suart_tunedDelay(_tx_delay);
}

void suart_puts(char* string)
{
	uint8_t i=0;
    6492:	10 e0       	ldi	r17, 0x00	; 0
    6494:	0e 94 e8 2f 	call	0x5fd0	; 0x5fd0 <suart_putc.part.0>
	while( (string[i]!='\0') & (i<255))
	{
		suart_putc(string[i]);
	 	i++;
    6498:	1f 5f       	subi	r17, 0xFF	; 255
}

void suart_puts(char* string)
{
	uint8_t i=0;
	while( (string[i]!='\0') & (i<255))
    649a:	fe 01       	movw	r30, r28
    649c:	e1 0f       	add	r30, r17
    649e:	f1 1d       	adc	r31, r1
    64a0:	80 81       	ld	r24, Z
    64a2:	88 23       	and	r24, r24
    64a4:	61 f3       	breq	.-40     	; 0x647e <suart_puts+0x2a>
    64a6:	1f 3f       	cpi	r17, 0xFF	; 255
    64a8:	a9 f7       	brne	.-22     	; 0x6494 <suart_puts+0x40>
    64aa:	e9 cf       	rjmp	.-46     	; 0x647e <suart_puts+0x2a>

000064ac <suart_puts_p>:
#include <avr/pgmspace.h> // optional, already included in this header
const char string[] PROGMEM = "Hello World";
suart_puts_p(string);
**************************************************************************/
void suart_puts_p(const char *progmem_s )
{
    64ac:	cf 93       	push	r28
    64ae:	df 93       	push	r29
    64b0:	ec 01       	movw	r28, r24
    register char c;
    while ( (c = pgm_read_byte(progmem_s++)) )
    64b2:	fe 01       	movw	r30, r28
    64b4:	84 91       	lpm	r24, Z
    64b6:	88 23       	and	r24, r24
    64b8:	59 f0       	breq	.+22     	; 0x64d0 <suart_puts_p+0x24>

void suart_putc(uint8_t b)
{
	uint8_t mask;

  if (_tx_delay == 0)
    64ba:	20 91 8f 02 	lds	r18, 0x028F
    64be:	30 91 90 02 	lds	r19, 0x0290
    64c2:	23 2b       	or	r18, r19
    64c4:	41 f4       	brne	.+16     	; 0x64d6 <suart_puts_p+0x2a>
    64c6:	21 96       	adiw	r28, 0x01	; 1
suart_puts_p(string);
**************************************************************************/
void suart_puts_p(const char *progmem_s )
{
    register char c;
    while ( (c = pgm_read_byte(progmem_s++)) )
    64c8:	fe 01       	movw	r30, r28
    64ca:	84 91       	lpm	r24, Z
    64cc:	81 11       	cpse	r24, r1
    64ce:	f5 cf       	rjmp	.-22     	; 0x64ba <suart_puts_p+0xe>
      suart_putc(c);
}
    64d0:	df 91       	pop	r29
    64d2:	cf 91       	pop	r28
    64d4:	08 95       	ret
    64d6:	0e 94 e8 2f 	call	0x5fd0	; 0x5fd0 <suart_putc.part.0>
    64da:	21 96       	adiw	r28, 0x01	; 1
    64dc:	f5 cf       	rjmp	.-22     	; 0x64c8 <suart_puts_p+0x1c>

000064de <suart2_init>:
    digitalWrite(SUART2_TX_PORT, SUART2_TX_PIN, pin_state);
}

// Module Init
void suart2_init(long speed)
{
    64de:	0f 93       	push	r16
    64e0:	1f 93       	push	r17
  _rx2_delay_centering=0;
    64e2:	10 92 8e 02 	sts	0x028E, r1
    64e6:	10 92 8d 02 	sts	0x028D, r1
  _rx2_delay_intrabit=0;
    64ea:	10 92 8c 02 	sts	0x028C, r1
    64ee:	10 92 8b 02 	sts	0x028B, r1
  _rx2_delay_stopbit=0;
    64f2:	10 92 8a 02 	sts	0x028A, r1
    64f6:	10 92 89 02 	sts	0x0289, r1
  _tx2_delay=0;
    64fa:	10 92 88 02 	sts	0x0288, r1
    64fe:	10 92 87 02 	sts	0x0287, r1

  // set Tx pin for output
  digitalMode(SUART2_TX_PORT, SUART2_TX_PIN, OUTPUT);
    6502:	39 9a       	sbi	0x07, 1	; 7
  digitalWrite(SUART2_TX_PORT, SUART2_TX_PIN, HIGH);
    6504:	41 9a       	sbi	0x08, 1	; 8
  // read delay settings from table to match baud rate

  uint8_t i;
  for (i=0; i<sizeof(suart_delay_table)/sizeof(suart_delay_table[0]); ++i)
  {
    long baud = pgm_read_dword(&suart_delay_table[i].baud);
    6506:	e8 ed       	ldi	r30, 0xD8	; 216
    6508:	f8 e1       	ldi	r31, 0x18	; 24
    650a:	05 91       	lpm	r16, Z+
    650c:	15 91       	lpm	r17, Z+
    650e:	25 91       	lpm	r18, Z+
    6510:	34 91       	lpm	r19, Z
    if (baud == speed)
    6512:	06 17       	cp	r16, r22
    6514:	17 07       	cpc	r17, r23
    6516:	28 07       	cpc	r18, r24
    6518:	39 07       	cpc	r19, r25
    651a:	09 f4       	brne	.+2      	; 0x651e <suart2_init+0x40>
    651c:	87 c0       	rjmp	.+270    	; 0x662c <suart2_init+0x14e>
  // read delay settings from table to match baud rate

  uint8_t i;
  for (i=0; i<sizeof(suart_delay_table)/sizeof(suart_delay_table[0]); ++i)
  {
    long baud = pgm_read_dword(&suart_delay_table[i].baud);
    651e:	e4 ee       	ldi	r30, 0xE4	; 228
    6520:	f8 e1       	ldi	r31, 0x18	; 24
    6522:	05 91       	lpm	r16, Z+
    6524:	15 91       	lpm	r17, Z+
    6526:	25 91       	lpm	r18, Z+
    6528:	34 91       	lpm	r19, Z
    if (baud == speed)
    652a:	06 17       	cp	r16, r22
    652c:	17 07       	cpc	r17, r23
    652e:	28 07       	cpc	r18, r24
    6530:	39 07       	cpc	r19, r25
    6532:	09 f4       	brne	.+2      	; 0x6536 <suart2_init+0x58>
    6534:	c4 c0       	rjmp	.+392    	; 0x66be <suart2_init+0x1e0>
  // read delay settings from table to match baud rate

  uint8_t i;
  for (i=0; i<sizeof(suart_delay_table)/sizeof(suart_delay_table[0]); ++i)
  {
    long baud = pgm_read_dword(&suart_delay_table[i].baud);
    6536:	e0 ef       	ldi	r30, 0xF0	; 240
    6538:	f8 e1       	ldi	r31, 0x18	; 24
    653a:	05 91       	lpm	r16, Z+
    653c:	15 91       	lpm	r17, Z+
    653e:	25 91       	lpm	r18, Z+
    6540:	34 91       	lpm	r19, Z
    if (baud == speed)
    6542:	06 17       	cp	r16, r22
    6544:	17 07       	cpc	r17, r23
    6546:	28 07       	cpc	r18, r24
    6548:	39 07       	cpc	r19, r25
    654a:	09 f4       	brne	.+2      	; 0x654e <suart2_init+0x70>
    654c:	bb c0       	rjmp	.+374    	; 0x66c4 <suart2_init+0x1e6>
  // read delay settings from table to match baud rate

  uint8_t i;
  for (i=0; i<sizeof(suart_delay_table)/sizeof(suart_delay_table[0]); ++i)
  {
    long baud = pgm_read_dword(&suart_delay_table[i].baud);
    654e:	ec ef       	ldi	r30, 0xFC	; 252
    6550:	f8 e1       	ldi	r31, 0x18	; 24
    6552:	05 91       	lpm	r16, Z+
    6554:	15 91       	lpm	r17, Z+
    6556:	25 91       	lpm	r18, Z+
    6558:	34 91       	lpm	r19, Z
    if (baud == speed)
    655a:	06 17       	cp	r16, r22
    655c:	17 07       	cpc	r17, r23
    655e:	28 07       	cpc	r18, r24
    6560:	39 07       	cpc	r19, r25
    6562:	09 f4       	brne	.+2      	; 0x6566 <suart2_init+0x88>
    6564:	b2 c0       	rjmp	.+356    	; 0x66ca <suart2_init+0x1ec>
  // read delay settings from table to match baud rate

  uint8_t i;
  for (i=0; i<sizeof(suart_delay_table)/sizeof(suart_delay_table[0]); ++i)
  {
    long baud = pgm_read_dword(&suart_delay_table[i].baud);
    6566:	e8 e0       	ldi	r30, 0x08	; 8
    6568:	f9 e1       	ldi	r31, 0x19	; 25
    656a:	05 91       	lpm	r16, Z+
    656c:	15 91       	lpm	r17, Z+
    656e:	25 91       	lpm	r18, Z+
    6570:	34 91       	lpm	r19, Z
    if (baud == speed)
    6572:	06 17       	cp	r16, r22
    6574:	17 07       	cpc	r17, r23
    6576:	28 07       	cpc	r18, r24
    6578:	39 07       	cpc	r19, r25
    657a:	09 f4       	brne	.+2      	; 0x657e <suart2_init+0xa0>
    657c:	a9 c0       	rjmp	.+338    	; 0x66d0 <suart2_init+0x1f2>
  // read delay settings from table to match baud rate

  uint8_t i;
  for (i=0; i<sizeof(suart_delay_table)/sizeof(suart_delay_table[0]); ++i)
  {
    long baud = pgm_read_dword(&suart_delay_table[i].baud);
    657e:	e4 e1       	ldi	r30, 0x14	; 20
    6580:	f9 e1       	ldi	r31, 0x19	; 25
    6582:	05 91       	lpm	r16, Z+
    6584:	15 91       	lpm	r17, Z+
    6586:	25 91       	lpm	r18, Z+
    6588:	34 91       	lpm	r19, Z
    if (baud == speed)
    658a:	06 17       	cp	r16, r22
    658c:	17 07       	cpc	r17, r23
    658e:	28 07       	cpc	r18, r24
    6590:	39 07       	cpc	r19, r25
    6592:	09 f4       	brne	.+2      	; 0x6596 <suart2_init+0xb8>
    6594:	a0 c0       	rjmp	.+320    	; 0x66d6 <suart2_init+0x1f8>
  // read delay settings from table to match baud rate

  uint8_t i;
  for (i=0; i<sizeof(suart_delay_table)/sizeof(suart_delay_table[0]); ++i)
  {
    long baud = pgm_read_dword(&suart_delay_table[i].baud);
    6596:	e0 e2       	ldi	r30, 0x20	; 32
    6598:	f9 e1       	ldi	r31, 0x19	; 25
    659a:	05 91       	lpm	r16, Z+
    659c:	15 91       	lpm	r17, Z+
    659e:	25 91       	lpm	r18, Z+
    65a0:	34 91       	lpm	r19, Z
    if (baud == speed)
    65a2:	06 17       	cp	r16, r22
    65a4:	17 07       	cpc	r17, r23
    65a6:	28 07       	cpc	r18, r24
    65a8:	39 07       	cpc	r19, r25
    65aa:	09 f4       	brne	.+2      	; 0x65ae <suart2_init+0xd0>
    65ac:	97 c0       	rjmp	.+302    	; 0x66dc <suart2_init+0x1fe>
  // read delay settings from table to match baud rate

  uint8_t i;
  for (i=0; i<sizeof(suart_delay_table)/sizeof(suart_delay_table[0]); ++i)
  {
    long baud = pgm_read_dword(&suart_delay_table[i].baud);
    65ae:	ec e2       	ldi	r30, 0x2C	; 44
    65b0:	f9 e1       	ldi	r31, 0x19	; 25
    65b2:	05 91       	lpm	r16, Z+
    65b4:	15 91       	lpm	r17, Z+
    65b6:	25 91       	lpm	r18, Z+
    65b8:	34 91       	lpm	r19, Z
    if (baud == speed)
    65ba:	06 17       	cp	r16, r22
    65bc:	17 07       	cpc	r17, r23
    65be:	28 07       	cpc	r18, r24
    65c0:	39 07       	cpc	r19, r25
    65c2:	09 f4       	brne	.+2      	; 0x65c6 <suart2_init+0xe8>
    65c4:	8e c0       	rjmp	.+284    	; 0x66e2 <suart2_init+0x204>
  // read delay settings from table to match baud rate

  uint8_t i;
  for (i=0; i<sizeof(suart_delay_table)/sizeof(suart_delay_table[0]); ++i)
  {
    long baud = pgm_read_dword(&suart_delay_table[i].baud);
    65c6:	e8 e3       	ldi	r30, 0x38	; 56
    65c8:	f9 e1       	ldi	r31, 0x19	; 25
    65ca:	05 91       	lpm	r16, Z+
    65cc:	15 91       	lpm	r17, Z+
    65ce:	25 91       	lpm	r18, Z+
    65d0:	34 91       	lpm	r19, Z
    if (baud == speed)
    65d2:	06 17       	cp	r16, r22
    65d4:	17 07       	cpc	r17, r23
    65d6:	28 07       	cpc	r18, r24
    65d8:	39 07       	cpc	r19, r25
    65da:	09 f4       	brne	.+2      	; 0x65de <suart2_init+0x100>
    65dc:	85 c0       	rjmp	.+266    	; 0x66e8 <suart2_init+0x20a>
  // read delay settings from table to match baud rate

  uint8_t i;
  for (i=0; i<sizeof(suart_delay_table)/sizeof(suart_delay_table[0]); ++i)
  {
    long baud = pgm_read_dword(&suart_delay_table[i].baud);
    65de:	e4 e4       	ldi	r30, 0x44	; 68
    65e0:	f9 e1       	ldi	r31, 0x19	; 25
    65e2:	05 91       	lpm	r16, Z+
    65e4:	15 91       	lpm	r17, Z+
    65e6:	25 91       	lpm	r18, Z+
    65e8:	34 91       	lpm	r19, Z
    if (baud == speed)
    65ea:	06 17       	cp	r16, r22
    65ec:	17 07       	cpc	r17, r23
    65ee:	28 07       	cpc	r18, r24
    65f0:	39 07       	cpc	r19, r25
    65f2:	09 f4       	brne	.+2      	; 0x65f6 <suart2_init+0x118>
    65f4:	7c c0       	rjmp	.+248    	; 0x66ee <suart2_init+0x210>
  // read delay settings from table to match baud rate

  uint8_t i;
  for (i=0; i<sizeof(suart_delay_table)/sizeof(suart_delay_table[0]); ++i)
  {
    long baud = pgm_read_dword(&suart_delay_table[i].baud);
    65f6:	e0 e5       	ldi	r30, 0x50	; 80
    65f8:	f9 e1       	ldi	r31, 0x19	; 25
    65fa:	05 91       	lpm	r16, Z+
    65fc:	15 91       	lpm	r17, Z+
    65fe:	25 91       	lpm	r18, Z+
    6600:	34 91       	lpm	r19, Z
    if (baud == speed)
    6602:	06 17       	cp	r16, r22
    6604:	17 07       	cpc	r17, r23
    6606:	28 07       	cpc	r18, r24
    6608:	39 07       	cpc	r19, r25
    660a:	09 f4       	brne	.+2      	; 0x660e <suart2_init+0x130>
    660c:	73 c0       	rjmp	.+230    	; 0x66f4 <suart2_init+0x216>
  // read delay settings from table to match baud rate

  uint8_t i;
  for (i=0; i<sizeof(suart_delay_table)/sizeof(suart_delay_table[0]); ++i)
  {
    long baud = pgm_read_dword(&suart_delay_table[i].baud);
    660e:	ec e5       	ldi	r30, 0x5C	; 92
    6610:	f9 e1       	ldi	r31, 0x19	; 25
    6612:	05 91       	lpm	r16, Z+
    6614:	15 91       	lpm	r17, Z+
    6616:	25 91       	lpm	r18, Z+
    6618:	34 91       	lpm	r19, Z
    if (baud == speed)
    661a:	06 17       	cp	r16, r22
    661c:	17 07       	cpc	r17, r23
    661e:	28 07       	cpc	r18, r24
    6620:	39 07       	cpc	r19, r25
    6622:	09 f4       	brne	.+2      	; 0x6626 <suart2_init+0x148>
    6624:	6a c0       	rjmp	.+212    	; 0x66fa <suart2_init+0x21c>
  suart2_puts("\r\nsuart2 output test\r\n");
  char string[64];
  sprintf(string, "PORT: %2d PIN: %2d \r\n", SUART2_TX_PORT, SUART2_TX_PIN);
  suart2_puts(string);
  ***********/
}
    6626:	1f 91       	pop	r17
    6628:	0f 91       	pop	r16
    662a:	08 95       	ret
  // read delay settings from table to match baud rate

  uint8_t i;
  for (i=0; i<sizeof(suart_delay_table)/sizeof(suart_delay_table[0]); ++i)
  {
    long baud = pgm_read_dword(&suart_delay_table[i].baud);
    662c:	80 e0       	ldi	r24, 0x00	; 0
    662e:	90 e0       	ldi	r25, 0x00	; 0
    if (baud == speed)
    {
      _rx2_delay_centering = pgm_read_word(&suart_delay_table[i].rx_delay_centering);
    6630:	fc 01       	movw	r30, r24
    6632:	ee 0f       	add	r30, r30
    6634:	ff 1f       	adc	r31, r31
    6636:	e8 0f       	add	r30, r24
    6638:	f9 1f       	adc	r31, r25
    663a:	ee 0f       	add	r30, r30
    663c:	ff 1f       	adc	r31, r31
    663e:	ee 0f       	add	r30, r30
    6640:	ff 1f       	adc	r31, r31
    6642:	e4 52       	subi	r30, 0x24	; 36
    6644:	f7 4e       	sbci	r31, 0xE7	; 231
    6646:	25 91       	lpm	r18, Z+
    6648:	34 91       	lpm	r19, Z
    664a:	30 93 8e 02 	sts	0x028E, r19
    664e:	20 93 8d 02 	sts	0x028D, r18
      _rx2_delay_intrabit = pgm_read_word(&suart_delay_table[i].rx_delay_intrabit);
    6652:	fc 01       	movw	r30, r24
    6654:	ee 0f       	add	r30, r30
    6656:	ff 1f       	adc	r31, r31
    6658:	e8 0f       	add	r30, r24
    665a:	f9 1f       	adc	r31, r25
    665c:	ee 0f       	add	r30, r30
    665e:	ff 1f       	adc	r31, r31
    6660:	ee 0f       	add	r30, r30
    6662:	ff 1f       	adc	r31, r31
    6664:	e2 52       	subi	r30, 0x22	; 34
    6666:	f7 4e       	sbci	r31, 0xE7	; 231
    6668:	25 91       	lpm	r18, Z+
    666a:	34 91       	lpm	r19, Z
    666c:	30 93 8c 02 	sts	0x028C, r19
    6670:	20 93 8b 02 	sts	0x028B, r18
      _rx2_delay_stopbit = pgm_read_word(&suart_delay_table[i].rx_delay_stopbit);
    6674:	fc 01       	movw	r30, r24
    6676:	ee 0f       	add	r30, r30
    6678:	ff 1f       	adc	r31, r31
    667a:	e8 0f       	add	r30, r24
    667c:	f9 1f       	adc	r31, r25
    667e:	ee 0f       	add	r30, r30
    6680:	ff 1f       	adc	r31, r31
    6682:	ee 0f       	add	r30, r30
    6684:	ff 1f       	adc	r31, r31
    6686:	e0 52       	subi	r30, 0x20	; 32
    6688:	f7 4e       	sbci	r31, 0xE7	; 231
    668a:	25 91       	lpm	r18, Z+
    668c:	34 91       	lpm	r19, Z
    668e:	30 93 8a 02 	sts	0x028A, r19
    6692:	20 93 89 02 	sts	0x0289, r18
      _tx2_delay = pgm_read_word(&suart_delay_table[i].tx_delay);
    6696:	fc 01       	movw	r30, r24
    6698:	ee 0f       	add	r30, r30
    669a:	ff 1f       	adc	r31, r31
    669c:	e8 0f       	add	r30, r24
    669e:	f9 1f       	adc	r31, r25
    66a0:	ee 0f       	add	r30, r30
    66a2:	ff 1f       	adc	r31, r31
    66a4:	ee 0f       	add	r30, r30
    66a6:	ff 1f       	adc	r31, r31
    66a8:	ee 51       	subi	r30, 0x1E	; 30
    66aa:	f7 4e       	sbci	r31, 0xE7	; 231
    66ac:	85 91       	lpm	r24, Z+
    66ae:	94 91       	lpm	r25, Z
    66b0:	90 93 88 02 	sts	0x0288, r25
    66b4:	80 93 87 02 	sts	0x0287, r24
  suart2_puts("\r\nsuart2 output test\r\n");
  char string[64];
  sprintf(string, "PORT: %2d PIN: %2d \r\n", SUART2_TX_PORT, SUART2_TX_PIN);
  suart2_puts(string);
  ***********/
}
    66b8:	1f 91       	pop	r17
    66ba:	0f 91       	pop	r16
    66bc:	08 95       	ret
  // read delay settings from table to match baud rate

  uint8_t i;
  for (i=0; i<sizeof(suart_delay_table)/sizeof(suart_delay_table[0]); ++i)
  {
    long baud = pgm_read_dword(&suart_delay_table[i].baud);
    66be:	81 e0       	ldi	r24, 0x01	; 1
    66c0:	90 e0       	ldi	r25, 0x00	; 0
    66c2:	b6 cf       	rjmp	.-148    	; 0x6630 <suart2_init+0x152>
    66c4:	82 e0       	ldi	r24, 0x02	; 2
    66c6:	90 e0       	ldi	r25, 0x00	; 0
    66c8:	b3 cf       	rjmp	.-154    	; 0x6630 <suart2_init+0x152>
    66ca:	83 e0       	ldi	r24, 0x03	; 3
    66cc:	90 e0       	ldi	r25, 0x00	; 0
    66ce:	b0 cf       	rjmp	.-160    	; 0x6630 <suart2_init+0x152>
    66d0:	84 e0       	ldi	r24, 0x04	; 4
    66d2:	90 e0       	ldi	r25, 0x00	; 0
    66d4:	ad cf       	rjmp	.-166    	; 0x6630 <suart2_init+0x152>
    66d6:	85 e0       	ldi	r24, 0x05	; 5
    66d8:	90 e0       	ldi	r25, 0x00	; 0
    66da:	aa cf       	rjmp	.-172    	; 0x6630 <suart2_init+0x152>
    66dc:	86 e0       	ldi	r24, 0x06	; 6
    66de:	90 e0       	ldi	r25, 0x00	; 0
    66e0:	a7 cf       	rjmp	.-178    	; 0x6630 <suart2_init+0x152>
    66e2:	87 e0       	ldi	r24, 0x07	; 7
    66e4:	90 e0       	ldi	r25, 0x00	; 0
    66e6:	a4 cf       	rjmp	.-184    	; 0x6630 <suart2_init+0x152>
    66e8:	88 e0       	ldi	r24, 0x08	; 8
    66ea:	90 e0       	ldi	r25, 0x00	; 0
    66ec:	a1 cf       	rjmp	.-190    	; 0x6630 <suart2_init+0x152>
    66ee:	89 e0       	ldi	r24, 0x09	; 9
    66f0:	90 e0       	ldi	r25, 0x00	; 0
    66f2:	9e cf       	rjmp	.-196    	; 0x6630 <suart2_init+0x152>
    66f4:	8a e0       	ldi	r24, 0x0A	; 10
    66f6:	90 e0       	ldi	r25, 0x00	; 0
    66f8:	9b cf       	rjmp	.-202    	; 0x6630 <suart2_init+0x152>
    66fa:	8b e0       	ldi	r24, 0x0B	; 11
    66fc:	90 e0       	ldi	r25, 0x00	; 0
    66fe:	98 cf       	rjmp	.-208    	; 0x6630 <suart2_init+0x152>

00006700 <suart2_putc>:

void suart2_putc(uint8_t b)
{
	uint8_t mask;

  if (_tx2_delay == 0)
    6700:	20 91 87 02 	lds	r18, 0x0287
    6704:	30 91 88 02 	lds	r19, 0x0288
    6708:	23 2b       	or	r18, r19
    670a:	11 f0       	breq	.+4      	; 0x6710 <suart2_putc+0x10>
    670c:	0c 94 7c 30 	jmp	0x60f8	; 0x60f8 <suart2_putc.part.1>
    6710:	08 95       	ret

00006712 <suart2_puts>:

  suart_tunedDelay(_tx2_delay);
}

void suart2_puts(char* string)
{
    6712:	1f 93       	push	r17
    6714:	cf 93       	push	r28
    6716:	df 93       	push	r29
    6718:	ec 01       	movw	r28, r24
	uint8_t i=0;
	while( (string[i]!='\0') & (i<255))
    671a:	88 81       	ld	r24, Y
    671c:	88 23       	and	r24, r24
    671e:	71 f0       	breq	.+28     	; 0x673c <suart2_puts+0x2a>
    6720:	20 91 87 02 	lds	r18, 0x0287
    6724:	30 91 88 02 	lds	r19, 0x0288
    6728:	23 2b       	or	r18, r19
    672a:	91 f4       	brne	.+36     	; 0x6750 <suart2_puts+0x3e>
  suart_tunedDelay(_tx2_delay);
}

void suart2_puts(char* string)
{
	uint8_t i=0;
    672c:	80 e0       	ldi	r24, 0x00	; 0
	while( (string[i]!='\0') & (i<255))
	{
		suart2_putc(string[i]);
	 	i++;
    672e:	8f 5f       	subi	r24, 0xFF	; 255
}

void suart2_puts(char* string)
{
	uint8_t i=0;
	while( (string[i]!='\0') & (i<255))
    6730:	fe 01       	movw	r30, r28
    6732:	e8 0f       	add	r30, r24
    6734:	f1 1d       	adc	r31, r1
    6736:	90 81       	ld	r25, Z
    6738:	91 11       	cpse	r25, r1
    673a:	04 c0       	rjmp	.+8      	; 0x6744 <suart2_puts+0x32>
	{
		suart2_putc(string[i]);
	 	i++;
	}
}
    673c:	df 91       	pop	r29
    673e:	cf 91       	pop	r28
    6740:	1f 91       	pop	r17
    6742:	08 95       	ret
}

void suart2_puts(char* string)
{
	uint8_t i=0;
	while( (string[i]!='\0') & (i<255))
    6744:	8f 3f       	cpi	r24, 0xFF	; 255
    6746:	99 f7       	brne	.-26     	; 0x672e <suart2_puts+0x1c>
	{
		suart2_putc(string[i]);
	 	i++;
	}
}
    6748:	df 91       	pop	r29
    674a:	cf 91       	pop	r28
    674c:	1f 91       	pop	r17
    674e:	08 95       	ret
  suart_tunedDelay(_tx2_delay);
}

void suart2_puts(char* string)
{
	uint8_t i=0;
    6750:	10 e0       	ldi	r17, 0x00	; 0
    6752:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <suart2_putc.part.1>
	while( (string[i]!='\0') & (i<255))
	{
		suart2_putc(string[i]);
	 	i++;
    6756:	1f 5f       	subi	r17, 0xFF	; 255
}

void suart2_puts(char* string)
{
	uint8_t i=0;
	while( (string[i]!='\0') & (i<255))
    6758:	fe 01       	movw	r30, r28
    675a:	e1 0f       	add	r30, r17
    675c:	f1 1d       	adc	r31, r1
    675e:	80 81       	ld	r24, Z
    6760:	88 23       	and	r24, r24
    6762:	61 f3       	breq	.-40     	; 0x673c <suart2_puts+0x2a>
    6764:	1f 3f       	cpi	r17, 0xFF	; 255
    6766:	a9 f7       	brne	.-22     	; 0x6752 <suart2_puts+0x40>
    6768:	e9 cf       	rjmp	.-46     	; 0x673c <suart2_puts+0x2a>

0000676a <suart2_puts_p>:
	 	i++;
	}
}

void suart2_puts_p(const char *progmem_s )
{
    676a:	cf 93       	push	r28
    676c:	df 93       	push	r29
    676e:	ec 01       	movw	r28, r24
    register char c;
    while ( (c = pgm_read_byte(progmem_s++)) )
    6770:	fe 01       	movw	r30, r28
    6772:	84 91       	lpm	r24, Z
    6774:	88 23       	and	r24, r24
    6776:	59 f0       	breq	.+22     	; 0x678e <suart2_puts_p+0x24>

void suart2_putc(uint8_t b)
{
	uint8_t mask;

  if (_tx2_delay == 0)
    6778:	20 91 87 02 	lds	r18, 0x0287
    677c:	30 91 88 02 	lds	r19, 0x0288
    6780:	23 2b       	or	r18, r19
    6782:	41 f4       	brne	.+16     	; 0x6794 <suart2_puts_p+0x2a>
    6784:	21 96       	adiw	r28, 0x01	; 1
}

void suart2_puts_p(const char *progmem_s )
{
    register char c;
    while ( (c = pgm_read_byte(progmem_s++)) )
    6786:	fe 01       	movw	r30, r28
    6788:	84 91       	lpm	r24, Z
    678a:	81 11       	cpse	r24, r1
    678c:	f5 cf       	rjmp	.-22     	; 0x6778 <suart2_puts_p+0xe>
      suart2_putc(c);
}
    678e:	df 91       	pop	r29
    6790:	cf 91       	pop	r28
    6792:	08 95       	ret
    6794:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <suart2_putc.part.1>
    6798:	21 96       	adiw	r28, 0x01	; 1
    679a:	f5 cf       	rjmp	.-22     	; 0x6786 <suart2_puts_p+0x1c>

0000679c <randomSeed>:
#include "wmath.h"
#include "stdlib.h"

void randomSeed(uint32_t seed)
{
  if (seed != 0) {
    679c:	61 15       	cp	r22, r1
    679e:	71 05       	cpc	r23, r1
    67a0:	81 05       	cpc	r24, r1
    67a2:	91 05       	cpc	r25, r1
    67a4:	09 f4       	brne	.+2      	; 0x67a8 <randomSeed+0xc>
    67a6:	08 95       	ret
    srandom(seed);
    67a8:	0c 94 12 36 	jmp	0x6c24	; 0x6c24 <srandom>

000067ac <random_howbig>:
  }
}

int32_t random_howbig(int32_t howbig)
{
    67ac:	cf 93       	push	r28
    67ae:	df 93       	push	r29
    67b0:	00 d0       	rcall	.+0      	; 0x67b2 <random_howbig+0x6>
    67b2:	00 d0       	rcall	.+0      	; 0x67b4 <random_howbig+0x8>
    67b4:	cd b7       	in	r28, 0x3d	; 61
    67b6:	de b7       	in	r29, 0x3e	; 62
    67b8:	9b 01       	movw	r18, r22
    67ba:	ac 01       	movw	r20, r24
  if (howbig == 0) {
    67bc:	61 15       	cp	r22, r1
    67be:	71 05       	cpc	r23, r1
    67c0:	81 05       	cpc	r24, r1
    67c2:	91 05       	cpc	r25, r1
    67c4:	51 f4       	brne	.+20     	; 0x67da <random_howbig+0x2e>
    return 0;
    67c6:	60 e0       	ldi	r22, 0x00	; 0
    67c8:	70 e0       	ldi	r23, 0x00	; 0
    67ca:	cb 01       	movw	r24, r22
  }
  return random() % howbig;
}
    67cc:	0f 90       	pop	r0
    67ce:	0f 90       	pop	r0
    67d0:	0f 90       	pop	r0
    67d2:	0f 90       	pop	r0
    67d4:	df 91       	pop	r29
    67d6:	cf 91       	pop	r28
    67d8:	08 95       	ret
int32_t random_howbig(int32_t howbig)
{
  if (howbig == 0) {
    return 0;
  }
  return random() % howbig;
    67da:	69 83       	std	Y+1, r22	; 0x01
    67dc:	3a 83       	std	Y+2, r19	; 0x02
    67de:	4b 83       	std	Y+3, r20	; 0x03
    67e0:	5c 83       	std	Y+4, r21	; 0x04
    67e2:	0e 94 0d 36 	call	0x6c1a	; 0x6c1a <random>
    67e6:	29 81       	ldd	r18, Y+1	; 0x01
    67e8:	3a 81       	ldd	r19, Y+2	; 0x02
    67ea:	4b 81       	ldd	r20, Y+3	; 0x03
    67ec:	5c 81       	ldd	r21, Y+4	; 0x04
    67ee:	0e 94 0d 35 	call	0x6a1a	; 0x6a1a <__divmodsi4>
}
    67f2:	0f 90       	pop	r0
    67f4:	0f 90       	pop	r0
    67f6:	0f 90       	pop	r0
    67f8:	0f 90       	pop	r0
    67fa:	df 91       	pop	r29
    67fc:	cf 91       	pop	r28
    67fe:	08 95       	ret

00006800 <random_howsmall_howbig>:

int32_t random_howsmall_howbig(int32_t howsmall, int32_t howbig)
{
    6800:	cf 92       	push	r12
    6802:	df 92       	push	r13
    6804:	ef 92       	push	r14
    6806:	ff 92       	push	r15
    6808:	cf 93       	push	r28
    680a:	df 93       	push	r29
    680c:	00 d0       	rcall	.+0      	; 0x680e <random_howsmall_howbig+0xe>
    680e:	00 d0       	rcall	.+0      	; 0x6810 <random_howsmall_howbig+0x10>
    6810:	cd b7       	in	r28, 0x3d	; 61
    6812:	de b7       	in	r29, 0x3e	; 62
    6814:	6b 01       	movw	r12, r22
    6816:	7c 01       	movw	r14, r24
  if (howsmall >= howbig) {
    6818:	62 17       	cp	r22, r18
    681a:	73 07       	cpc	r23, r19
    681c:	84 07       	cpc	r24, r20
    681e:	95 07       	cpc	r25, r21
    6820:	64 f4       	brge	.+24     	; 0x683a <random_howsmall_howbig+0x3a>
    return howsmall;
  }
  long diff = howbig - howsmall;
    6822:	26 1b       	sub	r18, r22
    6824:	37 0b       	sbc	r19, r23
    6826:	48 0b       	sbc	r20, r24
    6828:	59 0b       	sbc	r21, r25
  }
}

int32_t random_howbig(int32_t howbig)
{
  if (howbig == 0) {
    682a:	91 f4       	brne	.+36     	; 0x6850 <random_howsmall_howbig+0x50>
    return 0;
    682c:	60 e0       	ldi	r22, 0x00	; 0
    682e:	70 e0       	ldi	r23, 0x00	; 0
    6830:	cb 01       	movw	r24, r22
{
  if (howsmall >= howbig) {
    return howsmall;
  }
  long diff = howbig - howsmall;
  return random_howbig(diff) + howsmall;
    6832:	6c 0d       	add	r22, r12
    6834:	7d 1d       	adc	r23, r13
    6836:	8e 1d       	adc	r24, r14
    6838:	9f 1d       	adc	r25, r15
}
    683a:	0f 90       	pop	r0
    683c:	0f 90       	pop	r0
    683e:	0f 90       	pop	r0
    6840:	0f 90       	pop	r0
    6842:	df 91       	pop	r29
    6844:	cf 91       	pop	r28
    6846:	ff 90       	pop	r15
    6848:	ef 90       	pop	r14
    684a:	df 90       	pop	r13
    684c:	cf 90       	pop	r12
    684e:	08 95       	ret
int32_t random_howbig(int32_t howbig)
{
  if (howbig == 0) {
    return 0;
  }
  return random() % howbig;
    6850:	29 83       	std	Y+1, r18	; 0x01
    6852:	3a 83       	std	Y+2, r19	; 0x02
    6854:	4b 83       	std	Y+3, r20	; 0x03
    6856:	5c 83       	std	Y+4, r21	; 0x04
    6858:	0e 94 0d 36 	call	0x6c1a	; 0x6c1a <random>
    685c:	29 81       	ldd	r18, Y+1	; 0x01
    685e:	3a 81       	ldd	r19, Y+2	; 0x02
    6860:	4b 81       	ldd	r20, Y+3	; 0x03
    6862:	5c 81       	ldd	r21, Y+4	; 0x04
    6864:	0e 94 0d 35 	call	0x6a1a	; 0x6a1a <__divmodsi4>
    6868:	e4 cf       	rjmp	.-56     	; 0x6832 <random_howsmall_howbig+0x32>

0000686a <map32>:
  long diff = howbig - howsmall;
  return random_howbig(diff) + howsmall;
}

int32_t map32(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min, int32_t out_max)
{
    686a:	4f 92       	push	r4
    686c:	5f 92       	push	r5
    686e:	6f 92       	push	r6
    6870:	7f 92       	push	r7
    6872:	af 92       	push	r10
    6874:	bf 92       	push	r11
    6876:	cf 92       	push	r12
    6878:	df 92       	push	r13
    687a:	ef 92       	push	r14
    687c:	ff 92       	push	r15
    687e:	0f 93       	push	r16
    6880:	1f 93       	push	r17
    6882:	cf 93       	push	r28
    6884:	df 93       	push	r29
    6886:	cd b7       	in	r28, 0x3d	; 61
    6888:	de b7       	in	r29, 0x3e	; 62
    688a:	29 01       	movw	r4, r18
    688c:	3a 01       	movw	r6, r20
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    688e:	62 1b       	sub	r22, r18
    6890:	73 0b       	sbc	r23, r19
    6892:	84 0b       	sbc	r24, r20
    6894:	95 0b       	sbc	r25, r21
    6896:	29 89       	ldd	r18, Y+17	; 0x11
    6898:	3a 89       	ldd	r19, Y+18	; 0x12
    689a:	4b 89       	ldd	r20, Y+19	; 0x13
    689c:	5c 89       	ldd	r21, Y+20	; 0x14
    689e:	2a 19       	sub	r18, r10
    68a0:	3b 09       	sbc	r19, r11
    68a2:	4c 09       	sbc	r20, r12
    68a4:	5d 09       	sbc	r21, r13
    68a6:	29 8b       	std	Y+17, r18	; 0x11
    68a8:	3a 8b       	std	Y+18, r19	; 0x12
    68aa:	4b 8b       	std	Y+19, r20	; 0x13
    68ac:	5c 8b       	std	Y+20, r21	; 0x14
    68ae:	9b 01       	movw	r18, r22
    68b0:	ac 01       	movw	r20, r24
    68b2:	69 89       	ldd	r22, Y+17	; 0x11
    68b4:	7a 89       	ldd	r23, Y+18	; 0x12
    68b6:	8b 89       	ldd	r24, Y+19	; 0x13
    68b8:	9c 89       	ldd	r25, Y+20	; 0x14
    68ba:	0e 94 c7 34 	call	0x698e	; 0x698e <__mulsi3>
    68be:	e4 18       	sub	r14, r4
    68c0:	f5 08       	sbc	r15, r5
    68c2:	06 09       	sbc	r16, r6
    68c4:	17 09       	sbc	r17, r7
    68c6:	a8 01       	movw	r20, r16
    68c8:	97 01       	movw	r18, r14
    68ca:	0e 94 0d 35 	call	0x6a1a	; 0x6a1a <__divmodsi4>
    68ce:	2a 0d       	add	r18, r10
    68d0:	3b 1d       	adc	r19, r11
    68d2:	4c 1d       	adc	r20, r12
    68d4:	5d 1d       	adc	r21, r13
}
    68d6:	ca 01       	movw	r24, r20
    68d8:	b9 01       	movw	r22, r18
    68da:	df 91       	pop	r29
    68dc:	cf 91       	pop	r28
    68de:	1f 91       	pop	r17
    68e0:	0f 91       	pop	r16
    68e2:	ff 90       	pop	r15
    68e4:	ef 90       	pop	r14
    68e6:	df 90       	pop	r13
    68e8:	cf 90       	pop	r12
    68ea:	bf 90       	pop	r11
    68ec:	af 90       	pop	r10
    68ee:	7f 90       	pop	r7
    68f0:	6f 90       	pop	r6
    68f2:	5f 90       	pop	r5
    68f4:	4f 90       	pop	r4
    68f6:	08 95       	ret

000068f8 <randSeed>:

// same with smaller size integers
void randSeed(uint16_t seed)
{
  if (seed != 0) {
    68f8:	00 97       	sbiw	r24, 0x00	; 0
    68fa:	09 f4       	brne	.+2      	; 0x68fe <randSeed+0x6>
    68fc:	08 95       	ret
    srand(seed);
    68fe:	0c 94 b3 35 	jmp	0x6b66	; 0x6b66 <srand>

00006902 <rand_howbig>:
  }
}

int16_t rand_howbig(int16_t howbig)
{
    6902:	cf 93       	push	r28
    6904:	df 93       	push	r29
    6906:	ec 01       	movw	r28, r24
  if (howbig == 0) {
    6908:	00 97       	sbiw	r24, 0x00	; 0
    690a:	29 f4       	brne	.+10     	; 0x6916 <rand_howbig+0x14>
    return 0;
    690c:	80 e0       	ldi	r24, 0x00	; 0
    690e:	90 e0       	ldi	r25, 0x00	; 0
  }
  return rand() % howbig;
}
    6910:	df 91       	pop	r29
    6912:	cf 91       	pop	r28
    6914:	08 95       	ret
int16_t rand_howbig(int16_t howbig)
{
  if (howbig == 0) {
    return 0;
  }
  return rand() % howbig;
    6916:	0e 94 ae 35 	call	0x6b5c	; 0x6b5c <rand>
    691a:	be 01       	movw	r22, r28
    691c:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__divmodhi4>
}
    6920:	df 91       	pop	r29
    6922:	cf 91       	pop	r28
    6924:	08 95       	ret

00006926 <rand_howsmall_howbig>:

int16_t rand_howsmall_howbig(int16_t howsmall, int16_t howbig)
{
    6926:	0f 93       	push	r16
    6928:	1f 93       	push	r17
    692a:	cf 93       	push	r28
    692c:	df 93       	push	r29
    692e:	ec 01       	movw	r28, r24
  if (howsmall >= howbig) {
    6930:	86 17       	cp	r24, r22
    6932:	97 07       	cpc	r25, r23
    6934:	44 f4       	brge	.+16     	; 0x6946 <rand_howsmall_howbig+0x20>
    return howsmall;
  }
  long diff = howbig - howsmall;
    6936:	8b 01       	movw	r16, r22
    6938:	08 1b       	sub	r16, r24
    693a:	19 0b       	sbc	r17, r25
  }
}

int16_t rand_howbig(int16_t howbig)
{
  if (howbig == 0) {
    693c:	49 f4       	brne	.+18     	; 0x6950 <rand_howsmall_howbig+0x2a>
    return 0;
    693e:	80 e0       	ldi	r24, 0x00	; 0
    6940:	90 e0       	ldi	r25, 0x00	; 0
{
  if (howsmall >= howbig) {
    return howsmall;
  }
  long diff = howbig - howsmall;
  return rand_howbig(diff) + howsmall;
    6942:	8c 0f       	add	r24, r28
    6944:	9d 1f       	adc	r25, r29
}
    6946:	df 91       	pop	r29
    6948:	cf 91       	pop	r28
    694a:	1f 91       	pop	r17
    694c:	0f 91       	pop	r16
    694e:	08 95       	ret
int16_t rand_howbig(int16_t howbig)
{
  if (howbig == 0) {
    return 0;
  }
  return rand() % howbig;
    6950:	0e 94 ae 35 	call	0x6b5c	; 0x6b5c <rand>
    6954:	b8 01       	movw	r22, r16
    6956:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__divmodhi4>
    695a:	f3 cf       	rjmp	.-26     	; 0x6942 <rand_howsmall_howbig+0x1c>

0000695c <map>:
  long diff = howbig - howsmall;
  return rand_howbig(diff) + howsmall;
}

int16_t map(int16_t x, int16_t in_min, int16_t in_max, int16_t out_min, int16_t out_max)
{
    695c:	0f 93       	push	r16
    695e:	1f 93       	push	r17
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    6960:	fc 01       	movw	r30, r24
    6962:	e6 1b       	sub	r30, r22
    6964:	f7 0b       	sbc	r31, r23
    6966:	02 1b       	sub	r16, r18
    6968:	13 0b       	sbc	r17, r19
    696a:	e0 9f       	mul	r30, r16
    696c:	c0 01       	movw	r24, r0
    696e:	e1 9f       	mul	r30, r17
    6970:	90 0d       	add	r25, r0
    6972:	f0 9f       	mul	r31, r16
    6974:	90 0d       	add	r25, r0
    6976:	11 24       	eor	r1, r1
    6978:	46 1b       	sub	r20, r22
    697a:	57 0b       	sbc	r21, r23
    697c:	ba 01       	movw	r22, r20
    697e:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__divmodhi4>
}
    6982:	cb 01       	movw	r24, r22
    6984:	82 0f       	add	r24, r18
    6986:	93 1f       	adc	r25, r19
    6988:	1f 91       	pop	r17
    698a:	0f 91       	pop	r16
    698c:	08 95       	ret

0000698e <__mulsi3>:
    698e:	db 01       	movw	r26, r22
    6990:	8f 93       	push	r24
    6992:	9f 93       	push	r25
    6994:	0e 94 32 35 	call	0x6a64	; 0x6a64 <__muluhisi3>
    6998:	bf 91       	pop	r27
    699a:	af 91       	pop	r26
    699c:	a2 9f       	mul	r26, r18
    699e:	80 0d       	add	r24, r0
    69a0:	91 1d       	adc	r25, r1
    69a2:	a3 9f       	mul	r26, r19
    69a4:	90 0d       	add	r25, r0
    69a6:	b2 9f       	mul	r27, r18
    69a8:	90 0d       	add	r25, r0
    69aa:	11 24       	eor	r1, r1
    69ac:	08 95       	ret

000069ae <__divmodhi4>:
    69ae:	97 fb       	bst	r25, 7
    69b0:	07 2e       	mov	r0, r23
    69b2:	16 f4       	brtc	.+4      	; 0x69b8 <__divmodhi4+0xa>
    69b4:	00 94       	com	r0
    69b6:	07 d0       	rcall	.+14     	; 0x69c6 <__divmodhi4_neg1>
    69b8:	77 fd       	sbrc	r23, 7
    69ba:	09 d0       	rcall	.+18     	; 0x69ce <__divmodhi4_neg2>
    69bc:	0e 94 3d 35 	call	0x6a7a	; 0x6a7a <__udivmodhi4>
    69c0:	07 fc       	sbrc	r0, 7
    69c2:	05 d0       	rcall	.+10     	; 0x69ce <__divmodhi4_neg2>
    69c4:	3e f4       	brtc	.+14     	; 0x69d4 <__divmodhi4_exit>

000069c6 <__divmodhi4_neg1>:
    69c6:	90 95       	com	r25
    69c8:	81 95       	neg	r24
    69ca:	9f 4f       	sbci	r25, 0xFF	; 255
    69cc:	08 95       	ret

000069ce <__divmodhi4_neg2>:
    69ce:	70 95       	com	r23
    69d0:	61 95       	neg	r22
    69d2:	7f 4f       	sbci	r23, 0xFF	; 255

000069d4 <__divmodhi4_exit>:
    69d4:	08 95       	ret

000069d6 <__udivmodsi4>:
    69d6:	a1 e2       	ldi	r26, 0x21	; 33
    69d8:	1a 2e       	mov	r1, r26
    69da:	aa 1b       	sub	r26, r26
    69dc:	bb 1b       	sub	r27, r27
    69de:	fd 01       	movw	r30, r26
    69e0:	0d c0       	rjmp	.+26     	; 0x69fc <__udivmodsi4_ep>

000069e2 <__udivmodsi4_loop>:
    69e2:	aa 1f       	adc	r26, r26
    69e4:	bb 1f       	adc	r27, r27
    69e6:	ee 1f       	adc	r30, r30
    69e8:	ff 1f       	adc	r31, r31
    69ea:	a2 17       	cp	r26, r18
    69ec:	b3 07       	cpc	r27, r19
    69ee:	e4 07       	cpc	r30, r20
    69f0:	f5 07       	cpc	r31, r21
    69f2:	20 f0       	brcs	.+8      	; 0x69fc <__udivmodsi4_ep>
    69f4:	a2 1b       	sub	r26, r18
    69f6:	b3 0b       	sbc	r27, r19
    69f8:	e4 0b       	sbc	r30, r20
    69fa:	f5 0b       	sbc	r31, r21

000069fc <__udivmodsi4_ep>:
    69fc:	66 1f       	adc	r22, r22
    69fe:	77 1f       	adc	r23, r23
    6a00:	88 1f       	adc	r24, r24
    6a02:	99 1f       	adc	r25, r25
    6a04:	1a 94       	dec	r1
    6a06:	69 f7       	brne	.-38     	; 0x69e2 <__udivmodsi4_loop>
    6a08:	60 95       	com	r22
    6a0a:	70 95       	com	r23
    6a0c:	80 95       	com	r24
    6a0e:	90 95       	com	r25
    6a10:	9b 01       	movw	r18, r22
    6a12:	ac 01       	movw	r20, r24
    6a14:	bd 01       	movw	r22, r26
    6a16:	cf 01       	movw	r24, r30
    6a18:	08 95       	ret

00006a1a <__divmodsi4>:
    6a1a:	05 2e       	mov	r0, r21
    6a1c:	97 fb       	bst	r25, 7
    6a1e:	1e f4       	brtc	.+6      	; 0x6a26 <__divmodsi4+0xc>
    6a20:	00 94       	com	r0
    6a22:	0e 94 24 35 	call	0x6a48	; 0x6a48 <__negsi2>
    6a26:	57 fd       	sbrc	r21, 7
    6a28:	07 d0       	rcall	.+14     	; 0x6a38 <__divmodsi4_neg2>
    6a2a:	0e 94 eb 34 	call	0x69d6	; 0x69d6 <__udivmodsi4>
    6a2e:	07 fc       	sbrc	r0, 7
    6a30:	03 d0       	rcall	.+6      	; 0x6a38 <__divmodsi4_neg2>
    6a32:	4e f4       	brtc	.+18     	; 0x6a46 <__divmodsi4_exit>
    6a34:	0c 94 24 35 	jmp	0x6a48	; 0x6a48 <__negsi2>

00006a38 <__divmodsi4_neg2>:
    6a38:	50 95       	com	r21
    6a3a:	40 95       	com	r20
    6a3c:	30 95       	com	r19
    6a3e:	21 95       	neg	r18
    6a40:	3f 4f       	sbci	r19, 0xFF	; 255
    6a42:	4f 4f       	sbci	r20, 0xFF	; 255
    6a44:	5f 4f       	sbci	r21, 0xFF	; 255

00006a46 <__divmodsi4_exit>:
    6a46:	08 95       	ret

00006a48 <__negsi2>:
    6a48:	90 95       	com	r25
    6a4a:	80 95       	com	r24
    6a4c:	70 95       	com	r23
    6a4e:	61 95       	neg	r22
    6a50:	7f 4f       	sbci	r23, 0xFF	; 255
    6a52:	8f 4f       	sbci	r24, 0xFF	; 255
    6a54:	9f 4f       	sbci	r25, 0xFF	; 255
    6a56:	08 95       	ret

00006a58 <__tablejump2__>:
    6a58:	ee 0f       	add	r30, r30
    6a5a:	ff 1f       	adc	r31, r31

00006a5c <__tablejump__>:
    6a5c:	05 90       	lpm	r0, Z+
    6a5e:	f4 91       	lpm	r31, Z
    6a60:	e0 2d       	mov	r30, r0
    6a62:	09 94       	ijmp

00006a64 <__muluhisi3>:
    6a64:	0e 94 51 35 	call	0x6aa2	; 0x6aa2 <__umulhisi3>
    6a68:	a5 9f       	mul	r26, r21
    6a6a:	90 0d       	add	r25, r0
    6a6c:	b4 9f       	mul	r27, r20
    6a6e:	90 0d       	add	r25, r0
    6a70:	a4 9f       	mul	r26, r20
    6a72:	80 0d       	add	r24, r0
    6a74:	91 1d       	adc	r25, r1
    6a76:	11 24       	eor	r1, r1
    6a78:	08 95       	ret

00006a7a <__udivmodhi4>:
    6a7a:	aa 1b       	sub	r26, r26
    6a7c:	bb 1b       	sub	r27, r27
    6a7e:	51 e1       	ldi	r21, 0x11	; 17
    6a80:	07 c0       	rjmp	.+14     	; 0x6a90 <__udivmodhi4_ep>

00006a82 <__udivmodhi4_loop>:
    6a82:	aa 1f       	adc	r26, r26
    6a84:	bb 1f       	adc	r27, r27
    6a86:	a6 17       	cp	r26, r22
    6a88:	b7 07       	cpc	r27, r23
    6a8a:	10 f0       	brcs	.+4      	; 0x6a90 <__udivmodhi4_ep>
    6a8c:	a6 1b       	sub	r26, r22
    6a8e:	b7 0b       	sbc	r27, r23

00006a90 <__udivmodhi4_ep>:
    6a90:	88 1f       	adc	r24, r24
    6a92:	99 1f       	adc	r25, r25
    6a94:	5a 95       	dec	r21
    6a96:	a9 f7       	brne	.-22     	; 0x6a82 <__udivmodhi4_loop>
    6a98:	80 95       	com	r24
    6a9a:	90 95       	com	r25
    6a9c:	bc 01       	movw	r22, r24
    6a9e:	cd 01       	movw	r24, r26
    6aa0:	08 95       	ret

00006aa2 <__umulhisi3>:
    6aa2:	a2 9f       	mul	r26, r18
    6aa4:	b0 01       	movw	r22, r0
    6aa6:	b3 9f       	mul	r27, r19
    6aa8:	c0 01       	movw	r24, r0
    6aaa:	a3 9f       	mul	r26, r19
    6aac:	70 0d       	add	r23, r0
    6aae:	81 1d       	adc	r24, r1
    6ab0:	11 24       	eor	r1, r1
    6ab2:	91 1d       	adc	r25, r1
    6ab4:	b2 9f       	mul	r27, r18
    6ab6:	70 0d       	add	r23, r0
    6ab8:	81 1d       	adc	r24, r1
    6aba:	11 24       	eor	r1, r1
    6abc:	91 1d       	adc	r25, r1
    6abe:	08 95       	ret

00006ac0 <do_rand>:
    6ac0:	8f 92       	push	r8
    6ac2:	9f 92       	push	r9
    6ac4:	af 92       	push	r10
    6ac6:	bf 92       	push	r11
    6ac8:	cf 92       	push	r12
    6aca:	df 92       	push	r13
    6acc:	ef 92       	push	r14
    6ace:	ff 92       	push	r15
    6ad0:	cf 93       	push	r28
    6ad2:	df 93       	push	r29
    6ad4:	ec 01       	movw	r28, r24
    6ad6:	68 81       	ld	r22, Y
    6ad8:	79 81       	ldd	r23, Y+1	; 0x01
    6ada:	8a 81       	ldd	r24, Y+2	; 0x02
    6adc:	9b 81       	ldd	r25, Y+3	; 0x03
    6ade:	61 15       	cp	r22, r1
    6ae0:	71 05       	cpc	r23, r1
    6ae2:	81 05       	cpc	r24, r1
    6ae4:	91 05       	cpc	r25, r1
    6ae6:	21 f4       	brne	.+8      	; 0x6af0 <do_rand+0x30>
    6ae8:	64 e2       	ldi	r22, 0x24	; 36
    6aea:	79 ed       	ldi	r23, 0xD9	; 217
    6aec:	8b e5       	ldi	r24, 0x5B	; 91
    6aee:	97 e0       	ldi	r25, 0x07	; 7
    6af0:	2d e1       	ldi	r18, 0x1D	; 29
    6af2:	33 ef       	ldi	r19, 0xF3	; 243
    6af4:	41 e0       	ldi	r20, 0x01	; 1
    6af6:	50 e0       	ldi	r21, 0x00	; 0
    6af8:	0e 94 0d 35 	call	0x6a1a	; 0x6a1a <__divmodsi4>
    6afc:	49 01       	movw	r8, r18
    6afe:	5a 01       	movw	r10, r20
    6b00:	9b 01       	movw	r18, r22
    6b02:	ac 01       	movw	r20, r24
    6b04:	a7 ea       	ldi	r26, 0xA7	; 167
    6b06:	b1 e4       	ldi	r27, 0x41	; 65
    6b08:	0e 94 32 35 	call	0x6a64	; 0x6a64 <__muluhisi3>
    6b0c:	6b 01       	movw	r12, r22
    6b0e:	7c 01       	movw	r14, r24
    6b10:	ac ee       	ldi	r26, 0xEC	; 236
    6b12:	b4 ef       	ldi	r27, 0xF4	; 244
    6b14:	a5 01       	movw	r20, r10
    6b16:	94 01       	movw	r18, r8
    6b18:	0e 94 5c 3c 	call	0x78b8	; 0x78b8 <__mulohisi3>
    6b1c:	c6 0e       	add	r12, r22
    6b1e:	d7 1e       	adc	r13, r23
    6b20:	e8 1e       	adc	r14, r24
    6b22:	f9 1e       	adc	r15, r25
    6b24:	f7 fe       	sbrs	r15, 7
    6b26:	06 c0       	rjmp	.+12     	; 0x6b34 <do_rand+0x74>
    6b28:	81 e0       	ldi	r24, 0x01	; 1
    6b2a:	c8 1a       	sub	r12, r24
    6b2c:	d1 08       	sbc	r13, r1
    6b2e:	e1 08       	sbc	r14, r1
    6b30:	80 e8       	ldi	r24, 0x80	; 128
    6b32:	f8 0a       	sbc	r15, r24
    6b34:	c8 82       	st	Y, r12
    6b36:	d9 82       	std	Y+1, r13	; 0x01
    6b38:	ea 82       	std	Y+2, r14	; 0x02
    6b3a:	fb 82       	std	Y+3, r15	; 0x03
    6b3c:	c6 01       	movw	r24, r12
    6b3e:	9f 77       	andi	r25, 0x7F	; 127
    6b40:	df 91       	pop	r29
    6b42:	cf 91       	pop	r28
    6b44:	ff 90       	pop	r15
    6b46:	ef 90       	pop	r14
    6b48:	df 90       	pop	r13
    6b4a:	cf 90       	pop	r12
    6b4c:	bf 90       	pop	r11
    6b4e:	af 90       	pop	r10
    6b50:	9f 90       	pop	r9
    6b52:	8f 90       	pop	r8
    6b54:	08 95       	ret

00006b56 <rand_r>:
    6b56:	0e 94 60 35 	call	0x6ac0	; 0x6ac0 <do_rand>
    6b5a:	08 95       	ret

00006b5c <rand>:
    6b5c:	80 e0       	ldi	r24, 0x00	; 0
    6b5e:	91 e0       	ldi	r25, 0x01	; 1
    6b60:	0e 94 60 35 	call	0x6ac0	; 0x6ac0 <do_rand>
    6b64:	08 95       	ret

00006b66 <srand>:
    6b66:	a0 e0       	ldi	r26, 0x00	; 0
    6b68:	b0 e0       	ldi	r27, 0x00	; 0
    6b6a:	80 93 00 01 	sts	0x0100, r24
    6b6e:	90 93 01 01 	sts	0x0101, r25
    6b72:	a0 93 02 01 	sts	0x0102, r26
    6b76:	b0 93 03 01 	sts	0x0103, r27
    6b7a:	08 95       	ret

00006b7c <do_random>:
    6b7c:	8f 92       	push	r8
    6b7e:	9f 92       	push	r9
    6b80:	af 92       	push	r10
    6b82:	bf 92       	push	r11
    6b84:	cf 92       	push	r12
    6b86:	df 92       	push	r13
    6b88:	ef 92       	push	r14
    6b8a:	ff 92       	push	r15
    6b8c:	cf 93       	push	r28
    6b8e:	df 93       	push	r29
    6b90:	ec 01       	movw	r28, r24
    6b92:	68 81       	ld	r22, Y
    6b94:	79 81       	ldd	r23, Y+1	; 0x01
    6b96:	8a 81       	ldd	r24, Y+2	; 0x02
    6b98:	9b 81       	ldd	r25, Y+3	; 0x03
    6b9a:	61 15       	cp	r22, r1
    6b9c:	71 05       	cpc	r23, r1
    6b9e:	81 05       	cpc	r24, r1
    6ba0:	91 05       	cpc	r25, r1
    6ba2:	21 f4       	brne	.+8      	; 0x6bac <do_random+0x30>
    6ba4:	64 e2       	ldi	r22, 0x24	; 36
    6ba6:	79 ed       	ldi	r23, 0xD9	; 217
    6ba8:	8b e5       	ldi	r24, 0x5B	; 91
    6baa:	97 e0       	ldi	r25, 0x07	; 7
    6bac:	2d e1       	ldi	r18, 0x1D	; 29
    6bae:	33 ef       	ldi	r19, 0xF3	; 243
    6bb0:	41 e0       	ldi	r20, 0x01	; 1
    6bb2:	50 e0       	ldi	r21, 0x00	; 0
    6bb4:	0e 94 0d 35 	call	0x6a1a	; 0x6a1a <__divmodsi4>
    6bb8:	49 01       	movw	r8, r18
    6bba:	5a 01       	movw	r10, r20
    6bbc:	9b 01       	movw	r18, r22
    6bbe:	ac 01       	movw	r20, r24
    6bc0:	a7 ea       	ldi	r26, 0xA7	; 167
    6bc2:	b1 e4       	ldi	r27, 0x41	; 65
    6bc4:	0e 94 32 35 	call	0x6a64	; 0x6a64 <__muluhisi3>
    6bc8:	6b 01       	movw	r12, r22
    6bca:	7c 01       	movw	r14, r24
    6bcc:	ac ee       	ldi	r26, 0xEC	; 236
    6bce:	b4 ef       	ldi	r27, 0xF4	; 244
    6bd0:	a5 01       	movw	r20, r10
    6bd2:	94 01       	movw	r18, r8
    6bd4:	0e 94 5c 3c 	call	0x78b8	; 0x78b8 <__mulohisi3>
    6bd8:	c6 0e       	add	r12, r22
    6bda:	d7 1e       	adc	r13, r23
    6bdc:	e8 1e       	adc	r14, r24
    6bde:	f9 1e       	adc	r15, r25
    6be0:	f7 fe       	sbrs	r15, 7
    6be2:	06 c0       	rjmp	.+12     	; 0x6bf0 <do_random+0x74>
    6be4:	81 e0       	ldi	r24, 0x01	; 1
    6be6:	c8 1a       	sub	r12, r24
    6be8:	d1 08       	sbc	r13, r1
    6bea:	e1 08       	sbc	r14, r1
    6bec:	80 e8       	ldi	r24, 0x80	; 128
    6bee:	f8 0a       	sbc	r15, r24
    6bf0:	c8 82       	st	Y, r12
    6bf2:	d9 82       	std	Y+1, r13	; 0x01
    6bf4:	ea 82       	std	Y+2, r14	; 0x02
    6bf6:	fb 82       	std	Y+3, r15	; 0x03
    6bf8:	c7 01       	movw	r24, r14
    6bfa:	b6 01       	movw	r22, r12
    6bfc:	9f 77       	andi	r25, 0x7F	; 127
    6bfe:	df 91       	pop	r29
    6c00:	cf 91       	pop	r28
    6c02:	ff 90       	pop	r15
    6c04:	ef 90       	pop	r14
    6c06:	df 90       	pop	r13
    6c08:	cf 90       	pop	r12
    6c0a:	bf 90       	pop	r11
    6c0c:	af 90       	pop	r10
    6c0e:	9f 90       	pop	r9
    6c10:	8f 90       	pop	r8
    6c12:	08 95       	ret

00006c14 <random_r>:
    6c14:	0e 94 be 35 	call	0x6b7c	; 0x6b7c <do_random>
    6c18:	08 95       	ret

00006c1a <random>:
    6c1a:	84 e0       	ldi	r24, 0x04	; 4
    6c1c:	91 e0       	ldi	r25, 0x01	; 1
    6c1e:	0e 94 be 35 	call	0x6b7c	; 0x6b7c <do_random>
    6c22:	08 95       	ret

00006c24 <srandom>:
    6c24:	60 93 04 01 	sts	0x0104, r22
    6c28:	70 93 05 01 	sts	0x0105, r23
    6c2c:	80 93 06 01 	sts	0x0106, r24
    6c30:	90 93 07 01 	sts	0x0107, r25
    6c34:	08 95       	ret

00006c36 <atoi>:
    6c36:	fc 01       	movw	r30, r24
    6c38:	88 27       	eor	r24, r24
    6c3a:	99 27       	eor	r25, r25
    6c3c:	e8 94       	clt
    6c3e:	21 91       	ld	r18, Z+
    6c40:	20 32       	cpi	r18, 0x20	; 32
    6c42:	e9 f3       	breq	.-6      	; 0x6c3e <atoi+0x8>
    6c44:	29 30       	cpi	r18, 0x09	; 9
    6c46:	10 f0       	brcs	.+4      	; 0x6c4c <atoi+0x16>
    6c48:	2e 30       	cpi	r18, 0x0E	; 14
    6c4a:	c8 f3       	brcs	.-14     	; 0x6c3e <atoi+0x8>
    6c4c:	2b 32       	cpi	r18, 0x2B	; 43
    6c4e:	41 f0       	breq	.+16     	; 0x6c60 <atoi+0x2a>
    6c50:	2d 32       	cpi	r18, 0x2D	; 45
    6c52:	39 f4       	brne	.+14     	; 0x6c62 <atoi+0x2c>
    6c54:	68 94       	set
    6c56:	04 c0       	rjmp	.+8      	; 0x6c60 <atoi+0x2a>
    6c58:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <__mulhi_const_10>
    6c5c:	82 0f       	add	r24, r18
    6c5e:	91 1d       	adc	r25, r1
    6c60:	21 91       	ld	r18, Z+
    6c62:	20 53       	subi	r18, 0x30	; 48
    6c64:	2a 30       	cpi	r18, 0x0A	; 10
    6c66:	c0 f3       	brcs	.-16     	; 0x6c58 <atoi+0x22>
    6c68:	1e f4       	brtc	.+6      	; 0x6c70 <atoi+0x3a>
    6c6a:	90 95       	com	r25
    6c6c:	81 95       	neg	r24
    6c6e:	9f 4f       	sbci	r25, 0xFF	; 255
    6c70:	08 95       	ret

00006c72 <strtok>:
    6c72:	46 e4       	ldi	r20, 0x46	; 70
    6c74:	52 e0       	ldi	r21, 0x02	; 2
    6c76:	0e 94 55 36 	call	0x6caa	; 0x6caa <strtok_r>
    6c7a:	08 95       	ret

00006c7c <memset>:
    6c7c:	dc 01       	movw	r26, r24
    6c7e:	01 c0       	rjmp	.+2      	; 0x6c82 <memset+0x6>
    6c80:	6d 93       	st	X+, r22
    6c82:	41 50       	subi	r20, 0x01	; 1
    6c84:	50 40       	sbci	r21, 0x00	; 0
    6c86:	e0 f7       	brcc	.-8      	; 0x6c80 <memset+0x4>
    6c88:	08 95       	ret

00006c8a <strcmp>:
    6c8a:	fb 01       	movw	r30, r22
    6c8c:	dc 01       	movw	r26, r24
    6c8e:	8d 91       	ld	r24, X+
    6c90:	01 90       	ld	r0, Z+
    6c92:	80 19       	sub	r24, r0
    6c94:	01 10       	cpse	r0, r1
    6c96:	d9 f3       	breq	.-10     	; 0x6c8e <strcmp+0x4>
    6c98:	99 0b       	sbc	r25, r25
    6c9a:	08 95       	ret

00006c9c <strcpy>:
    6c9c:	fb 01       	movw	r30, r22
    6c9e:	dc 01       	movw	r26, r24
    6ca0:	01 90       	ld	r0, Z+
    6ca2:	0d 92       	st	X+, r0
    6ca4:	00 20       	and	r0, r0
    6ca6:	e1 f7       	brne	.-8      	; 0x6ca0 <strcpy+0x4>
    6ca8:	08 95       	ret

00006caa <strtok_r>:
    6caa:	fa 01       	movw	r30, r20
    6cac:	a1 91       	ld	r26, Z+
    6cae:	b0 81       	ld	r27, Z
    6cb0:	00 97       	sbiw	r24, 0x00	; 0
    6cb2:	19 f4       	brne	.+6      	; 0x6cba <strtok_r+0x10>
    6cb4:	10 97       	sbiw	r26, 0x00	; 0
    6cb6:	e1 f0       	breq	.+56     	; 0x6cf0 <strtok_r+0x46>
    6cb8:	cd 01       	movw	r24, r26
    6cba:	dc 01       	movw	r26, r24
    6cbc:	cd 01       	movw	r24, r26
    6cbe:	0d 90       	ld	r0, X+
    6cc0:	00 20       	and	r0, r0
    6cc2:	11 f4       	brne	.+4      	; 0x6cc8 <strtok_r+0x1e>
    6cc4:	c0 01       	movw	r24, r0
    6cc6:	13 c0       	rjmp	.+38     	; 0x6cee <strtok_r+0x44>
    6cc8:	fb 01       	movw	r30, r22
    6cca:	21 91       	ld	r18, Z+
    6ccc:	22 23       	and	r18, r18
    6cce:	19 f0       	breq	.+6      	; 0x6cd6 <strtok_r+0x2c>
    6cd0:	20 15       	cp	r18, r0
    6cd2:	d9 f7       	brne	.-10     	; 0x6cca <strtok_r+0x20>
    6cd4:	f3 cf       	rjmp	.-26     	; 0x6cbc <strtok_r+0x12>
    6cd6:	fb 01       	movw	r30, r22
    6cd8:	21 91       	ld	r18, Z+
    6cda:	20 15       	cp	r18, r0
    6cdc:	19 f4       	brne	.+6      	; 0x6ce4 <strtok_r+0x3a>
    6cde:	1e 92       	st	-X, r1
    6ce0:	11 96       	adiw	r26, 0x01	; 1
    6ce2:	06 c0       	rjmp	.+12     	; 0x6cf0 <strtok_r+0x46>
    6ce4:	22 23       	and	r18, r18
    6ce6:	c1 f7       	brne	.-16     	; 0x6cd8 <strtok_r+0x2e>
    6ce8:	0d 90       	ld	r0, X+
    6cea:	00 20       	and	r0, r0
    6cec:	a1 f7       	brne	.-24     	; 0x6cd6 <strtok_r+0x2c>
    6cee:	d0 01       	movw	r26, r0
    6cf0:	fa 01       	movw	r30, r20
    6cf2:	a1 93       	st	Z+, r26
    6cf4:	b0 83       	st	Z, r27
    6cf6:	08 95       	ret

00006cf8 <__mulhi_const_10>:
    6cf8:	7a e0       	ldi	r23, 0x0A	; 10
    6cfa:	97 9f       	mul	r25, r23
    6cfc:	90 2d       	mov	r25, r0
    6cfe:	87 9f       	mul	r24, r23
    6d00:	80 2d       	mov	r24, r0
    6d02:	91 0d       	add	r25, r1
    6d04:	11 24       	eor	r1, r1
    6d06:	08 95       	ret

00006d08 <sprintf>:
    6d08:	ae e0       	ldi	r26, 0x0E	; 14
    6d0a:	b0 e0       	ldi	r27, 0x00	; 0
    6d0c:	ea e8       	ldi	r30, 0x8A	; 138
    6d0e:	f6 e3       	ldi	r31, 0x36	; 54
    6d10:	0c 94 6f 3c 	jmp	0x78de	; 0x78de <__prologue_saves__+0x1c>
    6d14:	0d 89       	ldd	r16, Y+21	; 0x15
    6d16:	1e 89       	ldd	r17, Y+22	; 0x16
    6d18:	86 e0       	ldi	r24, 0x06	; 6
    6d1a:	8c 83       	std	Y+4, r24	; 0x04
    6d1c:	1a 83       	std	Y+2, r17	; 0x02
    6d1e:	09 83       	std	Y+1, r16	; 0x01
    6d20:	8f ef       	ldi	r24, 0xFF	; 255
    6d22:	9f e7       	ldi	r25, 0x7F	; 127
    6d24:	9e 83       	std	Y+6, r25	; 0x06
    6d26:	8d 83       	std	Y+5, r24	; 0x05
    6d28:	ae 01       	movw	r20, r28
    6d2a:	47 5e       	subi	r20, 0xE7	; 231
    6d2c:	5f 4f       	sbci	r21, 0xFF	; 255
    6d2e:	6f 89       	ldd	r22, Y+23	; 0x17
    6d30:	78 8d       	ldd	r23, Y+24	; 0x18
    6d32:	ce 01       	movw	r24, r28
    6d34:	01 96       	adiw	r24, 0x01	; 1
    6d36:	0e 94 bf 36 	call	0x6d7e	; 0x6d7e <vfprintf>
    6d3a:	ef 81       	ldd	r30, Y+7	; 0x07
    6d3c:	f8 85       	ldd	r31, Y+8	; 0x08
    6d3e:	e0 0f       	add	r30, r16
    6d40:	f1 1f       	adc	r31, r17
    6d42:	10 82       	st	Z, r1
    6d44:	2e 96       	adiw	r28, 0x0e	; 14
    6d46:	e4 e0       	ldi	r30, 0x04	; 4
    6d48:	0c 94 8b 3c 	jmp	0x7916	; 0x7916 <__epilogue_restores__+0x1c>

00006d4c <sscanf>:
    6d4c:	ae e0       	ldi	r26, 0x0E	; 14
    6d4e:	b0 e0       	ldi	r27, 0x00	; 0
    6d50:	ec ea       	ldi	r30, 0xAC	; 172
    6d52:	f6 e3       	ldi	r31, 0x36	; 54
    6d54:	0c 94 71 3c 	jmp	0x78e2	; 0x78e2 <__prologue_saves__+0x20>
    6d58:	85 e0       	ldi	r24, 0x05	; 5
    6d5a:	8c 83       	std	Y+4, r24	; 0x04
    6d5c:	8b 89       	ldd	r24, Y+19	; 0x13
    6d5e:	9c 89       	ldd	r25, Y+20	; 0x14
    6d60:	9a 83       	std	Y+2, r25	; 0x02
    6d62:	89 83       	std	Y+1, r24	; 0x01
    6d64:	ae 01       	movw	r20, r28
    6d66:	49 5e       	subi	r20, 0xE9	; 233
    6d68:	5f 4f       	sbci	r21, 0xFF	; 255
    6d6a:	6d 89       	ldd	r22, Y+21	; 0x15
    6d6c:	7e 89       	ldd	r23, Y+22	; 0x16
    6d6e:	ce 01       	movw	r24, r28
    6d70:	01 96       	adiw	r24, 0x01	; 1
    6d72:	0e 94 0f 3a 	call	0x741e	; 0x741e <vfscanf>
    6d76:	2e 96       	adiw	r28, 0x0e	; 14
    6d78:	e2 e0       	ldi	r30, 0x02	; 2
    6d7a:	0c 94 8d 3c 	jmp	0x791a	; 0x791a <__epilogue_restores__+0x20>

00006d7e <vfprintf>:
    6d7e:	ac e0       	ldi	r26, 0x0C	; 12
    6d80:	b0 e0       	ldi	r27, 0x00	; 0
    6d82:	e5 ec       	ldi	r30, 0xC5	; 197
    6d84:	f6 e3       	ldi	r31, 0x36	; 54
    6d86:	0c 94 61 3c 	jmp	0x78c2	; 0x78c2 <__prologue_saves__>
    6d8a:	7c 01       	movw	r14, r24
    6d8c:	6b 01       	movw	r12, r22
    6d8e:	8a 01       	movw	r16, r20
    6d90:	fc 01       	movw	r30, r24
    6d92:	17 82       	std	Z+7, r1	; 0x07
    6d94:	16 82       	std	Z+6, r1	; 0x06
    6d96:	83 81       	ldd	r24, Z+3	; 0x03
    6d98:	81 ff       	sbrs	r24, 1
    6d9a:	bd c1       	rjmp	.+890    	; 0x7116 <vfprintf+0x398>
    6d9c:	ce 01       	movw	r24, r28
    6d9e:	01 96       	adiw	r24, 0x01	; 1
    6da0:	4c 01       	movw	r8, r24
    6da2:	f7 01       	movw	r30, r14
    6da4:	93 81       	ldd	r25, Z+3	; 0x03
    6da6:	f6 01       	movw	r30, r12
    6da8:	93 fd       	sbrc	r25, 3
    6daa:	85 91       	lpm	r24, Z+
    6dac:	93 ff       	sbrs	r25, 3
    6dae:	81 91       	ld	r24, Z+
    6db0:	6f 01       	movw	r12, r30
    6db2:	88 23       	and	r24, r24
    6db4:	09 f4       	brne	.+2      	; 0x6db8 <vfprintf+0x3a>
    6db6:	ab c1       	rjmp	.+854    	; 0x710e <vfprintf+0x390>
    6db8:	85 32       	cpi	r24, 0x25	; 37
    6dba:	39 f4       	brne	.+14     	; 0x6dca <vfprintf+0x4c>
    6dbc:	93 fd       	sbrc	r25, 3
    6dbe:	85 91       	lpm	r24, Z+
    6dc0:	93 ff       	sbrs	r25, 3
    6dc2:	81 91       	ld	r24, Z+
    6dc4:	6f 01       	movw	r12, r30
    6dc6:	85 32       	cpi	r24, 0x25	; 37
    6dc8:	29 f4       	brne	.+10     	; 0x6dd4 <vfprintf+0x56>
    6dca:	b7 01       	movw	r22, r14
    6dcc:	90 e0       	ldi	r25, 0x00	; 0
    6dce:	0e 94 ad 3b 	call	0x775a	; 0x775a <fputc>
    6dd2:	e7 cf       	rjmp	.-50     	; 0x6da2 <vfprintf+0x24>
    6dd4:	51 2c       	mov	r5, r1
    6dd6:	31 2c       	mov	r3, r1
    6dd8:	20 e0       	ldi	r18, 0x00	; 0
    6dda:	20 32       	cpi	r18, 0x20	; 32
    6ddc:	a0 f4       	brcc	.+40     	; 0x6e06 <vfprintf+0x88>
    6dde:	8b 32       	cpi	r24, 0x2B	; 43
    6de0:	69 f0       	breq	.+26     	; 0x6dfc <vfprintf+0x7e>
    6de2:	30 f4       	brcc	.+12     	; 0x6df0 <vfprintf+0x72>
    6de4:	80 32       	cpi	r24, 0x20	; 32
    6de6:	59 f0       	breq	.+22     	; 0x6dfe <vfprintf+0x80>
    6de8:	83 32       	cpi	r24, 0x23	; 35
    6dea:	69 f4       	brne	.+26     	; 0x6e06 <vfprintf+0x88>
    6dec:	20 61       	ori	r18, 0x10	; 16
    6dee:	2c c0       	rjmp	.+88     	; 0x6e48 <vfprintf+0xca>
    6df0:	8d 32       	cpi	r24, 0x2D	; 45
    6df2:	39 f0       	breq	.+14     	; 0x6e02 <vfprintf+0x84>
    6df4:	80 33       	cpi	r24, 0x30	; 48
    6df6:	39 f4       	brne	.+14     	; 0x6e06 <vfprintf+0x88>
    6df8:	21 60       	ori	r18, 0x01	; 1
    6dfa:	26 c0       	rjmp	.+76     	; 0x6e48 <vfprintf+0xca>
    6dfc:	22 60       	ori	r18, 0x02	; 2
    6dfe:	24 60       	ori	r18, 0x04	; 4
    6e00:	23 c0       	rjmp	.+70     	; 0x6e48 <vfprintf+0xca>
    6e02:	28 60       	ori	r18, 0x08	; 8
    6e04:	21 c0       	rjmp	.+66     	; 0x6e48 <vfprintf+0xca>
    6e06:	27 fd       	sbrc	r18, 7
    6e08:	27 c0       	rjmp	.+78     	; 0x6e58 <vfprintf+0xda>
    6e0a:	30 ed       	ldi	r19, 0xD0	; 208
    6e0c:	38 0f       	add	r19, r24
    6e0e:	3a 30       	cpi	r19, 0x0A	; 10
    6e10:	78 f4       	brcc	.+30     	; 0x6e30 <vfprintf+0xb2>
    6e12:	26 ff       	sbrs	r18, 6
    6e14:	06 c0       	rjmp	.+12     	; 0x6e22 <vfprintf+0xa4>
    6e16:	fa e0       	ldi	r31, 0x0A	; 10
    6e18:	5f 9e       	mul	r5, r31
    6e1a:	30 0d       	add	r19, r0
    6e1c:	11 24       	eor	r1, r1
    6e1e:	53 2e       	mov	r5, r19
    6e20:	13 c0       	rjmp	.+38     	; 0x6e48 <vfprintf+0xca>
    6e22:	8a e0       	ldi	r24, 0x0A	; 10
    6e24:	38 9e       	mul	r3, r24
    6e26:	30 0d       	add	r19, r0
    6e28:	11 24       	eor	r1, r1
    6e2a:	33 2e       	mov	r3, r19
    6e2c:	20 62       	ori	r18, 0x20	; 32
    6e2e:	0c c0       	rjmp	.+24     	; 0x6e48 <vfprintf+0xca>
    6e30:	8e 32       	cpi	r24, 0x2E	; 46
    6e32:	21 f4       	brne	.+8      	; 0x6e3c <vfprintf+0xbe>
    6e34:	26 fd       	sbrc	r18, 6
    6e36:	6b c1       	rjmp	.+726    	; 0x710e <vfprintf+0x390>
    6e38:	20 64       	ori	r18, 0x40	; 64
    6e3a:	06 c0       	rjmp	.+12     	; 0x6e48 <vfprintf+0xca>
    6e3c:	8c 36       	cpi	r24, 0x6C	; 108
    6e3e:	11 f4       	brne	.+4      	; 0x6e44 <vfprintf+0xc6>
    6e40:	20 68       	ori	r18, 0x80	; 128
    6e42:	02 c0       	rjmp	.+4      	; 0x6e48 <vfprintf+0xca>
    6e44:	88 36       	cpi	r24, 0x68	; 104
    6e46:	41 f4       	brne	.+16     	; 0x6e58 <vfprintf+0xda>
    6e48:	f6 01       	movw	r30, r12
    6e4a:	93 fd       	sbrc	r25, 3
    6e4c:	85 91       	lpm	r24, Z+
    6e4e:	93 ff       	sbrs	r25, 3
    6e50:	81 91       	ld	r24, Z+
    6e52:	6f 01       	movw	r12, r30
    6e54:	81 11       	cpse	r24, r1
    6e56:	c1 cf       	rjmp	.-126    	; 0x6dda <vfprintf+0x5c>
    6e58:	98 2f       	mov	r25, r24
    6e5a:	9f 7d       	andi	r25, 0xDF	; 223
    6e5c:	95 54       	subi	r25, 0x45	; 69
    6e5e:	93 30       	cpi	r25, 0x03	; 3
    6e60:	28 f4       	brcc	.+10     	; 0x6e6c <vfprintf+0xee>
    6e62:	0c 5f       	subi	r16, 0xFC	; 252
    6e64:	1f 4f       	sbci	r17, 0xFF	; 255
    6e66:	ff e3       	ldi	r31, 0x3F	; 63
    6e68:	f9 83       	std	Y+1, r31	; 0x01
    6e6a:	0d c0       	rjmp	.+26     	; 0x6e86 <vfprintf+0x108>
    6e6c:	83 36       	cpi	r24, 0x63	; 99
    6e6e:	31 f0       	breq	.+12     	; 0x6e7c <vfprintf+0xfe>
    6e70:	83 37       	cpi	r24, 0x73	; 115
    6e72:	71 f0       	breq	.+28     	; 0x6e90 <vfprintf+0x112>
    6e74:	83 35       	cpi	r24, 0x53	; 83
    6e76:	09 f0       	breq	.+2      	; 0x6e7a <vfprintf+0xfc>
    6e78:	5b c0       	rjmp	.+182    	; 0x6f30 <vfprintf+0x1b2>
    6e7a:	22 c0       	rjmp	.+68     	; 0x6ec0 <vfprintf+0x142>
    6e7c:	f8 01       	movw	r30, r16
    6e7e:	80 81       	ld	r24, Z
    6e80:	89 83       	std	Y+1, r24	; 0x01
    6e82:	0e 5f       	subi	r16, 0xFE	; 254
    6e84:	1f 4f       	sbci	r17, 0xFF	; 255
    6e86:	44 24       	eor	r4, r4
    6e88:	43 94       	inc	r4
    6e8a:	51 2c       	mov	r5, r1
    6e8c:	54 01       	movw	r10, r8
    6e8e:	15 c0       	rjmp	.+42     	; 0x6eba <vfprintf+0x13c>
    6e90:	38 01       	movw	r6, r16
    6e92:	f2 e0       	ldi	r31, 0x02	; 2
    6e94:	6f 0e       	add	r6, r31
    6e96:	71 1c       	adc	r7, r1
    6e98:	f8 01       	movw	r30, r16
    6e9a:	a0 80       	ld	r10, Z
    6e9c:	b1 80       	ldd	r11, Z+1	; 0x01
    6e9e:	26 ff       	sbrs	r18, 6
    6ea0:	03 c0       	rjmp	.+6      	; 0x6ea8 <vfprintf+0x12a>
    6ea2:	65 2d       	mov	r22, r5
    6ea4:	70 e0       	ldi	r23, 0x00	; 0
    6ea6:	02 c0       	rjmp	.+4      	; 0x6eac <vfprintf+0x12e>
    6ea8:	6f ef       	ldi	r22, 0xFF	; 255
    6eaa:	7f ef       	ldi	r23, 0xFF	; 255
    6eac:	c5 01       	movw	r24, r10
    6eae:	2c 87       	std	Y+12, r18	; 0x0c
    6eb0:	0e 94 64 3b 	call	0x76c8	; 0x76c8 <strnlen>
    6eb4:	2c 01       	movw	r4, r24
    6eb6:	83 01       	movw	r16, r6
    6eb8:	2c 85       	ldd	r18, Y+12	; 0x0c
    6eba:	2f 77       	andi	r18, 0x7F	; 127
    6ebc:	22 2e       	mov	r2, r18
    6ebe:	17 c0       	rjmp	.+46     	; 0x6eee <vfprintf+0x170>
    6ec0:	38 01       	movw	r6, r16
    6ec2:	f2 e0       	ldi	r31, 0x02	; 2
    6ec4:	6f 0e       	add	r6, r31
    6ec6:	71 1c       	adc	r7, r1
    6ec8:	f8 01       	movw	r30, r16
    6eca:	a0 80       	ld	r10, Z
    6ecc:	b1 80       	ldd	r11, Z+1	; 0x01
    6ece:	26 ff       	sbrs	r18, 6
    6ed0:	03 c0       	rjmp	.+6      	; 0x6ed8 <vfprintf+0x15a>
    6ed2:	65 2d       	mov	r22, r5
    6ed4:	70 e0       	ldi	r23, 0x00	; 0
    6ed6:	02 c0       	rjmp	.+4      	; 0x6edc <vfprintf+0x15e>
    6ed8:	6f ef       	ldi	r22, 0xFF	; 255
    6eda:	7f ef       	ldi	r23, 0xFF	; 255
    6edc:	c5 01       	movw	r24, r10
    6ede:	2c 87       	std	Y+12, r18	; 0x0c
    6ee0:	0e 94 59 3b 	call	0x76b2	; 0x76b2 <strnlen_P>
    6ee4:	2c 01       	movw	r4, r24
    6ee6:	2c 85       	ldd	r18, Y+12	; 0x0c
    6ee8:	20 68       	ori	r18, 0x80	; 128
    6eea:	22 2e       	mov	r2, r18
    6eec:	83 01       	movw	r16, r6
    6eee:	23 fc       	sbrc	r2, 3
    6ef0:	1b c0       	rjmp	.+54     	; 0x6f28 <vfprintf+0x1aa>
    6ef2:	83 2d       	mov	r24, r3
    6ef4:	90 e0       	ldi	r25, 0x00	; 0
    6ef6:	48 16       	cp	r4, r24
    6ef8:	59 06       	cpc	r5, r25
    6efa:	b0 f4       	brcc	.+44     	; 0x6f28 <vfprintf+0x1aa>
    6efc:	b7 01       	movw	r22, r14
    6efe:	80 e2       	ldi	r24, 0x20	; 32
    6f00:	90 e0       	ldi	r25, 0x00	; 0
    6f02:	0e 94 ad 3b 	call	0x775a	; 0x775a <fputc>
    6f06:	3a 94       	dec	r3
    6f08:	f4 cf       	rjmp	.-24     	; 0x6ef2 <vfprintf+0x174>
    6f0a:	f5 01       	movw	r30, r10
    6f0c:	27 fc       	sbrc	r2, 7
    6f0e:	85 91       	lpm	r24, Z+
    6f10:	27 fe       	sbrs	r2, 7
    6f12:	81 91       	ld	r24, Z+
    6f14:	5f 01       	movw	r10, r30
    6f16:	b7 01       	movw	r22, r14
    6f18:	90 e0       	ldi	r25, 0x00	; 0
    6f1a:	0e 94 ad 3b 	call	0x775a	; 0x775a <fputc>
    6f1e:	31 10       	cpse	r3, r1
    6f20:	3a 94       	dec	r3
    6f22:	f1 e0       	ldi	r31, 0x01	; 1
    6f24:	4f 1a       	sub	r4, r31
    6f26:	51 08       	sbc	r5, r1
    6f28:	41 14       	cp	r4, r1
    6f2a:	51 04       	cpc	r5, r1
    6f2c:	71 f7       	brne	.-36     	; 0x6f0a <vfprintf+0x18c>
    6f2e:	e5 c0       	rjmp	.+458    	; 0x70fa <vfprintf+0x37c>
    6f30:	84 36       	cpi	r24, 0x64	; 100
    6f32:	11 f0       	breq	.+4      	; 0x6f38 <vfprintf+0x1ba>
    6f34:	89 36       	cpi	r24, 0x69	; 105
    6f36:	39 f5       	brne	.+78     	; 0x6f86 <vfprintf+0x208>
    6f38:	f8 01       	movw	r30, r16
    6f3a:	27 ff       	sbrs	r18, 7
    6f3c:	07 c0       	rjmp	.+14     	; 0x6f4c <vfprintf+0x1ce>
    6f3e:	60 81       	ld	r22, Z
    6f40:	71 81       	ldd	r23, Z+1	; 0x01
    6f42:	82 81       	ldd	r24, Z+2	; 0x02
    6f44:	93 81       	ldd	r25, Z+3	; 0x03
    6f46:	0c 5f       	subi	r16, 0xFC	; 252
    6f48:	1f 4f       	sbci	r17, 0xFF	; 255
    6f4a:	08 c0       	rjmp	.+16     	; 0x6f5c <vfprintf+0x1de>
    6f4c:	60 81       	ld	r22, Z
    6f4e:	71 81       	ldd	r23, Z+1	; 0x01
    6f50:	88 27       	eor	r24, r24
    6f52:	77 fd       	sbrc	r23, 7
    6f54:	80 95       	com	r24
    6f56:	98 2f       	mov	r25, r24
    6f58:	0e 5f       	subi	r16, 0xFE	; 254
    6f5a:	1f 4f       	sbci	r17, 0xFF	; 255
    6f5c:	2f 76       	andi	r18, 0x6F	; 111
    6f5e:	b2 2e       	mov	r11, r18
    6f60:	97 ff       	sbrs	r25, 7
    6f62:	09 c0       	rjmp	.+18     	; 0x6f76 <vfprintf+0x1f8>
    6f64:	90 95       	com	r25
    6f66:	80 95       	com	r24
    6f68:	70 95       	com	r23
    6f6a:	61 95       	neg	r22
    6f6c:	7f 4f       	sbci	r23, 0xFF	; 255
    6f6e:	8f 4f       	sbci	r24, 0xFF	; 255
    6f70:	9f 4f       	sbci	r25, 0xFF	; 255
    6f72:	20 68       	ori	r18, 0x80	; 128
    6f74:	b2 2e       	mov	r11, r18
    6f76:	2a e0       	ldi	r18, 0x0A	; 10
    6f78:	30 e0       	ldi	r19, 0x00	; 0
    6f7a:	a4 01       	movw	r20, r8
    6f7c:	0e 94 f8 3b 	call	0x77f0	; 0x77f0 <__ultoa_invert>
    6f80:	a8 2e       	mov	r10, r24
    6f82:	a8 18       	sub	r10, r8
    6f84:	44 c0       	rjmp	.+136    	; 0x700e <vfprintf+0x290>
    6f86:	85 37       	cpi	r24, 0x75	; 117
    6f88:	29 f4       	brne	.+10     	; 0x6f94 <vfprintf+0x216>
    6f8a:	2f 7e       	andi	r18, 0xEF	; 239
    6f8c:	b2 2e       	mov	r11, r18
    6f8e:	2a e0       	ldi	r18, 0x0A	; 10
    6f90:	30 e0       	ldi	r19, 0x00	; 0
    6f92:	25 c0       	rjmp	.+74     	; 0x6fde <vfprintf+0x260>
    6f94:	f2 2f       	mov	r31, r18
    6f96:	f9 7f       	andi	r31, 0xF9	; 249
    6f98:	bf 2e       	mov	r11, r31
    6f9a:	8f 36       	cpi	r24, 0x6F	; 111
    6f9c:	c1 f0       	breq	.+48     	; 0x6fce <vfprintf+0x250>
    6f9e:	18 f4       	brcc	.+6      	; 0x6fa6 <vfprintf+0x228>
    6fa0:	88 35       	cpi	r24, 0x58	; 88
    6fa2:	79 f0       	breq	.+30     	; 0x6fc2 <vfprintf+0x244>
    6fa4:	b4 c0       	rjmp	.+360    	; 0x710e <vfprintf+0x390>
    6fa6:	80 37       	cpi	r24, 0x70	; 112
    6fa8:	19 f0       	breq	.+6      	; 0x6fb0 <vfprintf+0x232>
    6faa:	88 37       	cpi	r24, 0x78	; 120
    6fac:	21 f0       	breq	.+8      	; 0x6fb6 <vfprintf+0x238>
    6fae:	af c0       	rjmp	.+350    	; 0x710e <vfprintf+0x390>
    6fb0:	2f 2f       	mov	r18, r31
    6fb2:	20 61       	ori	r18, 0x10	; 16
    6fb4:	b2 2e       	mov	r11, r18
    6fb6:	b4 fe       	sbrs	r11, 4
    6fb8:	0d c0       	rjmp	.+26     	; 0x6fd4 <vfprintf+0x256>
    6fba:	8b 2d       	mov	r24, r11
    6fbc:	84 60       	ori	r24, 0x04	; 4
    6fbe:	b8 2e       	mov	r11, r24
    6fc0:	09 c0       	rjmp	.+18     	; 0x6fd4 <vfprintf+0x256>
    6fc2:	24 ff       	sbrs	r18, 4
    6fc4:	0a c0       	rjmp	.+20     	; 0x6fda <vfprintf+0x25c>
    6fc6:	9f 2f       	mov	r25, r31
    6fc8:	96 60       	ori	r25, 0x06	; 6
    6fca:	b9 2e       	mov	r11, r25
    6fcc:	06 c0       	rjmp	.+12     	; 0x6fda <vfprintf+0x25c>
    6fce:	28 e0       	ldi	r18, 0x08	; 8
    6fd0:	30 e0       	ldi	r19, 0x00	; 0
    6fd2:	05 c0       	rjmp	.+10     	; 0x6fde <vfprintf+0x260>
    6fd4:	20 e1       	ldi	r18, 0x10	; 16
    6fd6:	30 e0       	ldi	r19, 0x00	; 0
    6fd8:	02 c0       	rjmp	.+4      	; 0x6fde <vfprintf+0x260>
    6fda:	20 e1       	ldi	r18, 0x10	; 16
    6fdc:	32 e0       	ldi	r19, 0x02	; 2
    6fde:	f8 01       	movw	r30, r16
    6fe0:	b7 fe       	sbrs	r11, 7
    6fe2:	07 c0       	rjmp	.+14     	; 0x6ff2 <vfprintf+0x274>
    6fe4:	60 81       	ld	r22, Z
    6fe6:	71 81       	ldd	r23, Z+1	; 0x01
    6fe8:	82 81       	ldd	r24, Z+2	; 0x02
    6fea:	93 81       	ldd	r25, Z+3	; 0x03
    6fec:	0c 5f       	subi	r16, 0xFC	; 252
    6fee:	1f 4f       	sbci	r17, 0xFF	; 255
    6ff0:	06 c0       	rjmp	.+12     	; 0x6ffe <vfprintf+0x280>
    6ff2:	60 81       	ld	r22, Z
    6ff4:	71 81       	ldd	r23, Z+1	; 0x01
    6ff6:	80 e0       	ldi	r24, 0x00	; 0
    6ff8:	90 e0       	ldi	r25, 0x00	; 0
    6ffa:	0e 5f       	subi	r16, 0xFE	; 254
    6ffc:	1f 4f       	sbci	r17, 0xFF	; 255
    6ffe:	a4 01       	movw	r20, r8
    7000:	0e 94 f8 3b 	call	0x77f0	; 0x77f0 <__ultoa_invert>
    7004:	a8 2e       	mov	r10, r24
    7006:	a8 18       	sub	r10, r8
    7008:	fb 2d       	mov	r31, r11
    700a:	ff 77       	andi	r31, 0x7F	; 127
    700c:	bf 2e       	mov	r11, r31
    700e:	b6 fe       	sbrs	r11, 6
    7010:	0b c0       	rjmp	.+22     	; 0x7028 <vfprintf+0x2aa>
    7012:	2b 2d       	mov	r18, r11
    7014:	2e 7f       	andi	r18, 0xFE	; 254
    7016:	a5 14       	cp	r10, r5
    7018:	50 f4       	brcc	.+20     	; 0x702e <vfprintf+0x2b0>
    701a:	b4 fe       	sbrs	r11, 4
    701c:	0a c0       	rjmp	.+20     	; 0x7032 <vfprintf+0x2b4>
    701e:	b2 fc       	sbrc	r11, 2
    7020:	08 c0       	rjmp	.+16     	; 0x7032 <vfprintf+0x2b4>
    7022:	2b 2d       	mov	r18, r11
    7024:	2e 7e       	andi	r18, 0xEE	; 238
    7026:	05 c0       	rjmp	.+10     	; 0x7032 <vfprintf+0x2b4>
    7028:	7a 2c       	mov	r7, r10
    702a:	2b 2d       	mov	r18, r11
    702c:	03 c0       	rjmp	.+6      	; 0x7034 <vfprintf+0x2b6>
    702e:	7a 2c       	mov	r7, r10
    7030:	01 c0       	rjmp	.+2      	; 0x7034 <vfprintf+0x2b6>
    7032:	75 2c       	mov	r7, r5
    7034:	24 ff       	sbrs	r18, 4
    7036:	0d c0       	rjmp	.+26     	; 0x7052 <vfprintf+0x2d4>
    7038:	fe 01       	movw	r30, r28
    703a:	ea 0d       	add	r30, r10
    703c:	f1 1d       	adc	r31, r1
    703e:	80 81       	ld	r24, Z
    7040:	80 33       	cpi	r24, 0x30	; 48
    7042:	11 f4       	brne	.+4      	; 0x7048 <vfprintf+0x2ca>
    7044:	29 7e       	andi	r18, 0xE9	; 233
    7046:	09 c0       	rjmp	.+18     	; 0x705a <vfprintf+0x2dc>
    7048:	22 ff       	sbrs	r18, 2
    704a:	06 c0       	rjmp	.+12     	; 0x7058 <vfprintf+0x2da>
    704c:	73 94       	inc	r7
    704e:	73 94       	inc	r7
    7050:	04 c0       	rjmp	.+8      	; 0x705a <vfprintf+0x2dc>
    7052:	82 2f       	mov	r24, r18
    7054:	86 78       	andi	r24, 0x86	; 134
    7056:	09 f0       	breq	.+2      	; 0x705a <vfprintf+0x2dc>
    7058:	73 94       	inc	r7
    705a:	23 fd       	sbrc	r18, 3
    705c:	13 c0       	rjmp	.+38     	; 0x7084 <vfprintf+0x306>
    705e:	20 ff       	sbrs	r18, 0
    7060:	06 c0       	rjmp	.+12     	; 0x706e <vfprintf+0x2f0>
    7062:	5a 2c       	mov	r5, r10
    7064:	73 14       	cp	r7, r3
    7066:	18 f4       	brcc	.+6      	; 0x706e <vfprintf+0x2f0>
    7068:	53 0c       	add	r5, r3
    706a:	57 18       	sub	r5, r7
    706c:	73 2c       	mov	r7, r3
    706e:	73 14       	cp	r7, r3
    7070:	68 f4       	brcc	.+26     	; 0x708c <vfprintf+0x30e>
    7072:	b7 01       	movw	r22, r14
    7074:	80 e2       	ldi	r24, 0x20	; 32
    7076:	90 e0       	ldi	r25, 0x00	; 0
    7078:	2c 87       	std	Y+12, r18	; 0x0c
    707a:	0e 94 ad 3b 	call	0x775a	; 0x775a <fputc>
    707e:	73 94       	inc	r7
    7080:	2c 85       	ldd	r18, Y+12	; 0x0c
    7082:	f5 cf       	rjmp	.-22     	; 0x706e <vfprintf+0x2f0>
    7084:	73 14       	cp	r7, r3
    7086:	10 f4       	brcc	.+4      	; 0x708c <vfprintf+0x30e>
    7088:	37 18       	sub	r3, r7
    708a:	01 c0       	rjmp	.+2      	; 0x708e <vfprintf+0x310>
    708c:	31 2c       	mov	r3, r1
    708e:	24 ff       	sbrs	r18, 4
    7090:	12 c0       	rjmp	.+36     	; 0x70b6 <vfprintf+0x338>
    7092:	b7 01       	movw	r22, r14
    7094:	80 e3       	ldi	r24, 0x30	; 48
    7096:	90 e0       	ldi	r25, 0x00	; 0
    7098:	2c 87       	std	Y+12, r18	; 0x0c
    709a:	0e 94 ad 3b 	call	0x775a	; 0x775a <fputc>
    709e:	2c 85       	ldd	r18, Y+12	; 0x0c
    70a0:	22 ff       	sbrs	r18, 2
    70a2:	17 c0       	rjmp	.+46     	; 0x70d2 <vfprintf+0x354>
    70a4:	21 ff       	sbrs	r18, 1
    70a6:	03 c0       	rjmp	.+6      	; 0x70ae <vfprintf+0x330>
    70a8:	88 e5       	ldi	r24, 0x58	; 88
    70aa:	90 e0       	ldi	r25, 0x00	; 0
    70ac:	02 c0       	rjmp	.+4      	; 0x70b2 <vfprintf+0x334>
    70ae:	88 e7       	ldi	r24, 0x78	; 120
    70b0:	90 e0       	ldi	r25, 0x00	; 0
    70b2:	b7 01       	movw	r22, r14
    70b4:	0c c0       	rjmp	.+24     	; 0x70ce <vfprintf+0x350>
    70b6:	82 2f       	mov	r24, r18
    70b8:	86 78       	andi	r24, 0x86	; 134
    70ba:	59 f0       	breq	.+22     	; 0x70d2 <vfprintf+0x354>
    70bc:	21 fd       	sbrc	r18, 1
    70be:	02 c0       	rjmp	.+4      	; 0x70c4 <vfprintf+0x346>
    70c0:	80 e2       	ldi	r24, 0x20	; 32
    70c2:	01 c0       	rjmp	.+2      	; 0x70c6 <vfprintf+0x348>
    70c4:	8b e2       	ldi	r24, 0x2B	; 43
    70c6:	27 fd       	sbrc	r18, 7
    70c8:	8d e2       	ldi	r24, 0x2D	; 45
    70ca:	b7 01       	movw	r22, r14
    70cc:	90 e0       	ldi	r25, 0x00	; 0
    70ce:	0e 94 ad 3b 	call	0x775a	; 0x775a <fputc>
    70d2:	a5 14       	cp	r10, r5
    70d4:	38 f4       	brcc	.+14     	; 0x70e4 <vfprintf+0x366>
    70d6:	b7 01       	movw	r22, r14
    70d8:	80 e3       	ldi	r24, 0x30	; 48
    70da:	90 e0       	ldi	r25, 0x00	; 0
    70dc:	0e 94 ad 3b 	call	0x775a	; 0x775a <fputc>
    70e0:	5a 94       	dec	r5
    70e2:	f7 cf       	rjmp	.-18     	; 0x70d2 <vfprintf+0x354>
    70e4:	aa 94       	dec	r10
    70e6:	f4 01       	movw	r30, r8
    70e8:	ea 0d       	add	r30, r10
    70ea:	f1 1d       	adc	r31, r1
    70ec:	80 81       	ld	r24, Z
    70ee:	b7 01       	movw	r22, r14
    70f0:	90 e0       	ldi	r25, 0x00	; 0
    70f2:	0e 94 ad 3b 	call	0x775a	; 0x775a <fputc>
    70f6:	a1 10       	cpse	r10, r1
    70f8:	f5 cf       	rjmp	.-22     	; 0x70e4 <vfprintf+0x366>
    70fa:	33 20       	and	r3, r3
    70fc:	09 f4       	brne	.+2      	; 0x7100 <vfprintf+0x382>
    70fe:	51 ce       	rjmp	.-862    	; 0x6da2 <vfprintf+0x24>
    7100:	b7 01       	movw	r22, r14
    7102:	80 e2       	ldi	r24, 0x20	; 32
    7104:	90 e0       	ldi	r25, 0x00	; 0
    7106:	0e 94 ad 3b 	call	0x775a	; 0x775a <fputc>
    710a:	3a 94       	dec	r3
    710c:	f6 cf       	rjmp	.-20     	; 0x70fa <vfprintf+0x37c>
    710e:	f7 01       	movw	r30, r14
    7110:	86 81       	ldd	r24, Z+6	; 0x06
    7112:	97 81       	ldd	r25, Z+7	; 0x07
    7114:	02 c0       	rjmp	.+4      	; 0x711a <vfprintf+0x39c>
    7116:	8f ef       	ldi	r24, 0xFF	; 255
    7118:	9f ef       	ldi	r25, 0xFF	; 255
    711a:	2c 96       	adiw	r28, 0x0c	; 12
    711c:	e2 e1       	ldi	r30, 0x12	; 18
    711e:	0c 94 7d 3c 	jmp	0x78fa	; 0x78fa <__epilogue_restores__>

00007122 <putval>:
    7122:	20 fd       	sbrc	r18, 0
    7124:	09 c0       	rjmp	.+18     	; 0x7138 <putval+0x16>
    7126:	fc 01       	movw	r30, r24
    7128:	23 fd       	sbrc	r18, 3
    712a:	05 c0       	rjmp	.+10     	; 0x7136 <putval+0x14>
    712c:	22 ff       	sbrs	r18, 2
    712e:	02 c0       	rjmp	.+4      	; 0x7134 <putval+0x12>
    7130:	73 83       	std	Z+3, r23	; 0x03
    7132:	62 83       	std	Z+2, r22	; 0x02
    7134:	51 83       	std	Z+1, r21	; 0x01
    7136:	40 83       	st	Z, r20
    7138:	08 95       	ret

0000713a <mulacc>:
    713a:	44 fd       	sbrc	r20, 4
    713c:	10 c0       	rjmp	.+32     	; 0x715e <mulacc+0x24>
    713e:	46 fd       	sbrc	r20, 6
    7140:	10 c0       	rjmp	.+32     	; 0x7162 <mulacc+0x28>
    7142:	db 01       	movw	r26, r22
    7144:	fc 01       	movw	r30, r24
    7146:	aa 0f       	add	r26, r26
    7148:	bb 1f       	adc	r27, r27
    714a:	ee 1f       	adc	r30, r30
    714c:	ff 1f       	adc	r31, r31
    714e:	10 94       	com	r1
    7150:	d1 f7       	brne	.-12     	; 0x7146 <mulacc+0xc>
    7152:	6a 0f       	add	r22, r26
    7154:	7b 1f       	adc	r23, r27
    7156:	8e 1f       	adc	r24, r30
    7158:	9f 1f       	adc	r25, r31
    715a:	31 e0       	ldi	r19, 0x01	; 1
    715c:	03 c0       	rjmp	.+6      	; 0x7164 <mulacc+0x2a>
    715e:	33 e0       	ldi	r19, 0x03	; 3
    7160:	01 c0       	rjmp	.+2      	; 0x7164 <mulacc+0x2a>
    7162:	34 e0       	ldi	r19, 0x04	; 4
    7164:	66 0f       	add	r22, r22
    7166:	77 1f       	adc	r23, r23
    7168:	88 1f       	adc	r24, r24
    716a:	99 1f       	adc	r25, r25
    716c:	31 50       	subi	r19, 0x01	; 1
    716e:	d1 f7       	brne	.-12     	; 0x7164 <mulacc+0x2a>
    7170:	62 0f       	add	r22, r18
    7172:	71 1d       	adc	r23, r1
    7174:	81 1d       	adc	r24, r1
    7176:	91 1d       	adc	r25, r1
    7178:	08 95       	ret

0000717a <skip_spaces>:
    717a:	0f 93       	push	r16
    717c:	1f 93       	push	r17
    717e:	cf 93       	push	r28
    7180:	df 93       	push	r29
    7182:	8c 01       	movw	r16, r24
    7184:	c8 01       	movw	r24, r16
    7186:	0e 94 6f 3b 	call	0x76de	; 0x76de <fgetc>
    718a:	ec 01       	movw	r28, r24
    718c:	97 fd       	sbrc	r25, 7
    718e:	08 c0       	rjmp	.+16     	; 0x71a0 <skip_spaces+0x26>
    7190:	0e 94 46 3b 	call	0x768c	; 0x768c <isspace>
    7194:	89 2b       	or	r24, r25
    7196:	b1 f7       	brne	.-20     	; 0x7184 <skip_spaces+0xa>
    7198:	b8 01       	movw	r22, r16
    719a:	ce 01       	movw	r24, r28
    719c:	0e 94 df 3b 	call	0x77be	; 0x77be <ungetc>
    71a0:	ce 01       	movw	r24, r28
    71a2:	df 91       	pop	r29
    71a4:	cf 91       	pop	r28
    71a6:	1f 91       	pop	r17
    71a8:	0f 91       	pop	r16
    71aa:	08 95       	ret

000071ac <conv_int>:
    71ac:	8f 92       	push	r8
    71ae:	9f 92       	push	r9
    71b0:	af 92       	push	r10
    71b2:	cf 92       	push	r12
    71b4:	df 92       	push	r13
    71b6:	ef 92       	push	r14
    71b8:	ff 92       	push	r15
    71ba:	0f 93       	push	r16
    71bc:	1f 93       	push	r17
    71be:	cf 93       	push	r28
    71c0:	df 93       	push	r29
    71c2:	ec 01       	movw	r28, r24
    71c4:	a6 2e       	mov	r10, r22
    71c6:	4a 01       	movw	r8, r20
    71c8:	02 2f       	mov	r16, r18
    71ca:	0e 94 6f 3b 	call	0x76de	; 0x76de <fgetc>
    71ce:	ac 01       	movw	r20, r24
    71d0:	55 27       	eor	r21, r21
    71d2:	4b 32       	cpi	r20, 0x2B	; 43
    71d4:	51 05       	cpc	r21, r1
    71d6:	21 f0       	breq	.+8      	; 0x71e0 <conv_int+0x34>
    71d8:	4d 32       	cpi	r20, 0x2D	; 45
    71da:	51 05       	cpc	r21, r1
    71dc:	51 f4       	brne	.+20     	; 0x71f2 <conv_int+0x46>
    71de:	00 68       	ori	r16, 0x80	; 128
    71e0:	aa 94       	dec	r10
    71e2:	11 f4       	brne	.+4      	; 0x71e8 <conv_int+0x3c>
    71e4:	80 e0       	ldi	r24, 0x00	; 0
    71e6:	67 c0       	rjmp	.+206    	; 0x72b6 <conv_int+0x10a>
    71e8:	ce 01       	movw	r24, r28
    71ea:	0e 94 6f 3b 	call	0x76de	; 0x76de <fgetc>
    71ee:	97 fd       	sbrc	r25, 7
    71f0:	f9 cf       	rjmp	.-14     	; 0x71e4 <conv_int+0x38>
    71f2:	10 2f       	mov	r17, r16
    71f4:	1d 7f       	andi	r17, 0xFD	; 253
    71f6:	30 2f       	mov	r19, r16
    71f8:	30 73       	andi	r19, 0x30	; 48
    71fa:	01 f5       	brne	.+64     	; 0x723c <conv_int+0x90>
    71fc:	80 33       	cpi	r24, 0x30	; 48
    71fe:	f1 f4       	brne	.+60     	; 0x723c <conv_int+0x90>
    7200:	ff 24       	eor	r15, r15
    7202:	fa 94       	dec	r15
    7204:	fa 0c       	add	r15, r10
    7206:	09 f4       	brne	.+2      	; 0x720a <conv_int+0x5e>
    7208:	42 c0       	rjmp	.+132    	; 0x728e <conv_int+0xe2>
    720a:	ce 01       	movw	r24, r28
    720c:	0e 94 6f 3b 	call	0x76de	; 0x76de <fgetc>
    7210:	97 fd       	sbrc	r25, 7
    7212:	3d c0       	rjmp	.+122    	; 0x728e <conv_int+0xe2>
    7214:	38 2f       	mov	r19, r24
    7216:	3f 7d       	andi	r19, 0xDF	; 223
    7218:	38 35       	cpi	r19, 0x58	; 88
    721a:	51 f4       	brne	.+20     	; 0x7230 <conv_int+0x84>
    721c:	12 64       	ori	r17, 0x42	; 66
    721e:	aa 94       	dec	r10
    7220:	aa 94       	dec	r10
    7222:	a9 f1       	breq	.+106    	; 0x728e <conv_int+0xe2>
    7224:	ce 01       	movw	r24, r28
    7226:	0e 94 6f 3b 	call	0x76de	; 0x76de <fgetc>
    722a:	97 ff       	sbrs	r25, 7
    722c:	07 c0       	rjmp	.+14     	; 0x723c <conv_int+0x90>
    722e:	2f c0       	rjmp	.+94     	; 0x728e <conv_int+0xe2>
    7230:	06 ff       	sbrs	r16, 6
    7232:	02 c0       	rjmp	.+4      	; 0x7238 <conv_int+0x8c>
    7234:	12 60       	ori	r17, 0x02	; 2
    7236:	01 c0       	rjmp	.+2      	; 0x723a <conv_int+0x8e>
    7238:	12 61       	ori	r17, 0x12	; 18
    723a:	af 2c       	mov	r10, r15
    723c:	c1 2c       	mov	r12, r1
    723e:	d1 2c       	mov	r13, r1
    7240:	76 01       	movw	r14, r12
    7242:	20 ed       	ldi	r18, 0xD0	; 208
    7244:	28 0f       	add	r18, r24
    7246:	28 30       	cpi	r18, 0x08	; 8
    7248:	80 f0       	brcs	.+32     	; 0x726a <conv_int+0xbe>
    724a:	14 ff       	sbrs	r17, 4
    724c:	04 c0       	rjmp	.+8      	; 0x7256 <conv_int+0xaa>
    724e:	be 01       	movw	r22, r28
    7250:	0e 94 df 3b 	call	0x77be	; 0x77be <ungetc>
    7254:	19 c0       	rjmp	.+50     	; 0x7288 <conv_int+0xdc>
    7256:	2a 30       	cpi	r18, 0x0A	; 10
    7258:	40 f0       	brcs	.+16     	; 0x726a <conv_int+0xbe>
    725a:	16 ff       	sbrs	r17, 6
    725c:	f8 cf       	rjmp	.-16     	; 0x724e <conv_int+0xa2>
    725e:	2f 7d       	andi	r18, 0xDF	; 223
    7260:	3f ee       	ldi	r19, 0xEF	; 239
    7262:	32 0f       	add	r19, r18
    7264:	36 30       	cpi	r19, 0x06	; 6
    7266:	98 f7       	brcc	.-26     	; 0x724e <conv_int+0xa2>
    7268:	27 50       	subi	r18, 0x07	; 7
    726a:	41 2f       	mov	r20, r17
    726c:	c7 01       	movw	r24, r14
    726e:	b6 01       	movw	r22, r12
    7270:	0e 94 9d 38 	call	0x713a	; 0x713a <mulacc>
    7274:	6b 01       	movw	r12, r22
    7276:	7c 01       	movw	r14, r24
    7278:	12 60       	ori	r17, 0x02	; 2
    727a:	aa 94       	dec	r10
    727c:	59 f0       	breq	.+22     	; 0x7294 <conv_int+0xe8>
    727e:	ce 01       	movw	r24, r28
    7280:	0e 94 6f 3b 	call	0x76de	; 0x76de <fgetc>
    7284:	97 ff       	sbrs	r25, 7
    7286:	dd cf       	rjmp	.-70     	; 0x7242 <conv_int+0x96>
    7288:	11 fd       	sbrc	r17, 1
    728a:	04 c0       	rjmp	.+8      	; 0x7294 <conv_int+0xe8>
    728c:	ab cf       	rjmp	.-170    	; 0x71e4 <conv_int+0x38>
    728e:	c1 2c       	mov	r12, r1
    7290:	d1 2c       	mov	r13, r1
    7292:	76 01       	movw	r14, r12
    7294:	17 ff       	sbrs	r17, 7
    7296:	08 c0       	rjmp	.+16     	; 0x72a8 <conv_int+0xfc>
    7298:	f0 94       	com	r15
    729a:	e0 94       	com	r14
    729c:	d0 94       	com	r13
    729e:	c0 94       	com	r12
    72a0:	c1 1c       	adc	r12, r1
    72a2:	d1 1c       	adc	r13, r1
    72a4:	e1 1c       	adc	r14, r1
    72a6:	f1 1c       	adc	r15, r1
    72a8:	21 2f       	mov	r18, r17
    72aa:	b7 01       	movw	r22, r14
    72ac:	a6 01       	movw	r20, r12
    72ae:	c4 01       	movw	r24, r8
    72b0:	0e 94 91 38 	call	0x7122	; 0x7122 <putval>
    72b4:	81 e0       	ldi	r24, 0x01	; 1
    72b6:	df 91       	pop	r29
    72b8:	cf 91       	pop	r28
    72ba:	1f 91       	pop	r17
    72bc:	0f 91       	pop	r16
    72be:	ff 90       	pop	r15
    72c0:	ef 90       	pop	r14
    72c2:	df 90       	pop	r13
    72c4:	cf 90       	pop	r12
    72c6:	af 90       	pop	r10
    72c8:	9f 90       	pop	r9
    72ca:	8f 90       	pop	r8
    72cc:	08 95       	ret

000072ce <conv_brk>:
    72ce:	a1 e2       	ldi	r26, 0x21	; 33
    72d0:	b0 e0       	ldi	r27, 0x00	; 0
    72d2:	ed e6       	ldi	r30, 0x6D	; 109
    72d4:	f9 e3       	ldi	r31, 0x39	; 57
    72d6:	0c 94 66 3c 	jmp	0x78cc	; 0x78cc <__prologue_saves__+0xa>
    72da:	5c 01       	movw	r10, r24
    72dc:	7a 01       	movw	r14, r20
    72de:	8e 01       	movw	r16, r28
    72e0:	0f 5f       	subi	r16, 0xFF	; 255
    72e2:	1f 4f       	sbci	r17, 0xFF	; 255
    72e4:	68 01       	movw	r12, r16
    72e6:	80 e2       	ldi	r24, 0x20	; 32
    72e8:	d8 01       	movw	r26, r16
    72ea:	1d 92       	st	X+, r1
    72ec:	8a 95       	dec	r24
    72ee:	e9 f7       	brne	.-6      	; 0x72ea <conv_brk+0x1c>
    72f0:	f5 01       	movw	r30, r10
    72f2:	73 80       	ldd	r7, Z+3	; 0x03
    72f4:	40 e0       	ldi	r20, 0x00	; 0
    72f6:	50 e0       	ldi	r21, 0x00	; 0
    72f8:	81 2c       	mov	r8, r1
    72fa:	b0 e0       	ldi	r27, 0x00	; 0
    72fc:	91 2c       	mov	r9, r1
    72fe:	81 e0       	ldi	r24, 0x01	; 1
    7300:	90 e0       	ldi	r25, 0x00	; 0
    7302:	f9 01       	movw	r30, r18
    7304:	73 fc       	sbrc	r7, 3
    7306:	a5 91       	lpm	r26, Z+
    7308:	73 fe       	sbrs	r7, 3
    730a:	a1 91       	ld	r26, Z+
    730c:	8f 01       	movw	r16, r30
    730e:	7a 2f       	mov	r23, r26
    7310:	9f 01       	movw	r18, r30
    7312:	a1 11       	cpse	r26, r1
    7314:	03 c0       	rjmp	.+6      	; 0x731c <conv_brk+0x4e>
    7316:	80 e0       	ldi	r24, 0x00	; 0
    7318:	90 e0       	ldi	r25, 0x00	; 0
    731a:	7d c0       	rjmp	.+250    	; 0x7416 <conv_brk+0x148>
    731c:	ae 35       	cpi	r26, 0x5E	; 94
    731e:	19 f4       	brne	.+6      	; 0x7326 <conv_brk+0x58>
    7320:	41 15       	cp	r20, r1
    7322:	51 05       	cpc	r21, r1
    7324:	59 f1       	breq	.+86     	; 0x737c <conv_brk+0xae>
    7326:	e9 2d       	mov	r30, r9
    7328:	f0 e0       	ldi	r31, 0x00	; 0
    732a:	e4 17       	cp	r30, r20
    732c:	f5 07       	cpc	r31, r21
    732e:	3c f4       	brge	.+14     	; 0x733e <conv_brk+0x70>
    7330:	ad 35       	cpi	r26, 0x5D	; 93
    7332:	69 f1       	breq	.+90     	; 0x738e <conv_brk+0xc0>
    7334:	ad 32       	cpi	r26, 0x2D	; 45
    7336:	19 f4       	brne	.+6      	; 0x733e <conv_brk+0x70>
    7338:	bb 23       	and	r27, r27
    733a:	19 f1       	breq	.+70     	; 0x7382 <conv_brk+0xb4>
    733c:	03 c0       	rjmp	.+6      	; 0x7344 <conv_brk+0x76>
    733e:	b1 11       	cpse	r27, r1
    7340:	01 c0       	rjmp	.+2      	; 0x7344 <conv_brk+0x76>
    7342:	8a 2e       	mov	r8, r26
    7344:	e7 2f       	mov	r30, r23
    7346:	e6 95       	lsr	r30
    7348:	e6 95       	lsr	r30
    734a:	e6 95       	lsr	r30
    734c:	86 01       	movw	r16, r12
    734e:	0e 0f       	add	r16, r30
    7350:	11 1d       	adc	r17, r1
    7352:	f8 01       	movw	r30, r16
    7354:	a7 2f       	mov	r26, r23
    7356:	a7 70       	andi	r26, 0x07	; 7
    7358:	8c 01       	movw	r16, r24
    735a:	02 c0       	rjmp	.+4      	; 0x7360 <conv_brk+0x92>
    735c:	00 0f       	add	r16, r16
    735e:	11 1f       	adc	r17, r17
    7360:	aa 95       	dec	r26
    7362:	e2 f7       	brpl	.-8      	; 0x735c <conv_brk+0x8e>
    7364:	d8 01       	movw	r26, r16
    7366:	b0 81       	ld	r27, Z
    7368:	ba 2b       	or	r27, r26
    736a:	b0 83       	st	Z, r27
    736c:	78 15       	cp	r23, r8
    736e:	59 f0       	breq	.+22     	; 0x7386 <conv_brk+0xb8>
    7370:	78 15       	cp	r23, r8
    7372:	10 f4       	brcc	.+4      	; 0x7378 <conv_brk+0xaa>
    7374:	7f 5f       	subi	r23, 0xFF	; 255
    7376:	e6 cf       	rjmp	.-52     	; 0x7344 <conv_brk+0x76>
    7378:	71 50       	subi	r23, 0x01	; 1
    737a:	e4 cf       	rjmp	.-56     	; 0x7344 <conv_brk+0x76>
    737c:	99 24       	eor	r9, r9
    737e:	93 94       	inc	r9
    7380:	03 c0       	rjmp	.+6      	; 0x7388 <conv_brk+0xba>
    7382:	b1 e0       	ldi	r27, 0x01	; 1
    7384:	01 c0       	rjmp	.+2      	; 0x7388 <conv_brk+0xba>
    7386:	b0 e0       	ldi	r27, 0x00	; 0
    7388:	4f 5f       	subi	r20, 0xFF	; 255
    738a:	5f 4f       	sbci	r21, 0xFF	; 255
    738c:	ba cf       	rjmp	.-140    	; 0x7302 <conv_brk+0x34>
    738e:	bb 23       	and	r27, r27
    7390:	19 f0       	breq	.+6      	; 0x7398 <conv_brk+0xca>
    7392:	8e 81       	ldd	r24, Y+6	; 0x06
    7394:	80 62       	ori	r24, 0x20	; 32
    7396:	8e 83       	std	Y+6, r24	; 0x06
    7398:	91 10       	cpse	r9, r1
    739a:	03 c0       	rjmp	.+6      	; 0x73a2 <conv_brk+0xd4>
    739c:	99 24       	eor	r9, r9
    739e:	93 94       	inc	r9
    73a0:	15 c0       	rjmp	.+42     	; 0x73cc <conv_brk+0xfe>
    73a2:	f6 01       	movw	r30, r12
    73a4:	ce 01       	movw	r24, r28
    73a6:	81 96       	adiw	r24, 0x21	; 33
    73a8:	20 81       	ld	r18, Z
    73aa:	20 95       	com	r18
    73ac:	21 93       	st	Z+, r18
    73ae:	e8 17       	cp	r30, r24
    73b0:	f9 07       	cpc	r31, r25
    73b2:	d1 f7       	brne	.-12     	; 0x73a8 <conv_brk+0xda>
    73b4:	f3 cf       	rjmp	.-26     	; 0x739c <conv_brk+0xce>
    73b6:	e1 14       	cp	r14, r1
    73b8:	f1 04       	cpc	r15, r1
    73ba:	29 f0       	breq	.+10     	; 0x73c6 <conv_brk+0xf8>
    73bc:	d7 01       	movw	r26, r14
    73be:	8c 93       	st	X, r24
    73c0:	f7 01       	movw	r30, r14
    73c2:	31 96       	adiw	r30, 0x01	; 1
    73c4:	7f 01       	movw	r14, r30
    73c6:	61 50       	subi	r22, 0x01	; 1
    73c8:	01 f1       	breq	.+64     	; 0x740a <conv_brk+0x13c>
    73ca:	91 2c       	mov	r9, r1
    73cc:	c5 01       	movw	r24, r10
    73ce:	69 a3       	std	Y+33, r22	; 0x21
    73d0:	0e 94 6f 3b 	call	0x76de	; 0x76de <fgetc>
    73d4:	69 a1       	ldd	r22, Y+33	; 0x21
    73d6:	97 fd       	sbrc	r25, 7
    73d8:	16 c0       	rjmp	.+44     	; 0x7406 <conv_brk+0x138>
    73da:	28 2f       	mov	r18, r24
    73dc:	26 95       	lsr	r18
    73de:	26 95       	lsr	r18
    73e0:	26 95       	lsr	r18
    73e2:	f6 01       	movw	r30, r12
    73e4:	e2 0f       	add	r30, r18
    73e6:	f1 1d       	adc	r31, r1
    73e8:	20 81       	ld	r18, Z
    73ea:	30 e0       	ldi	r19, 0x00	; 0
    73ec:	ac 01       	movw	r20, r24
    73ee:	47 70       	andi	r20, 0x07	; 7
    73f0:	55 27       	eor	r21, r21
    73f2:	02 c0       	rjmp	.+4      	; 0x73f8 <conv_brk+0x12a>
    73f4:	35 95       	asr	r19
    73f6:	27 95       	ror	r18
    73f8:	4a 95       	dec	r20
    73fa:	e2 f7       	brpl	.-8      	; 0x73f4 <conv_brk+0x126>
    73fc:	20 fd       	sbrc	r18, 0
    73fe:	db cf       	rjmp	.-74     	; 0x73b6 <conv_brk+0xe8>
    7400:	b5 01       	movw	r22, r10
    7402:	0e 94 df 3b 	call	0x77be	; 0x77be <ungetc>
    7406:	91 10       	cpse	r9, r1
    7408:	86 cf       	rjmp	.-244    	; 0x7316 <conv_brk+0x48>
    740a:	e1 14       	cp	r14, r1
    740c:	f1 04       	cpc	r15, r1
    740e:	11 f0       	breq	.+4      	; 0x7414 <conv_brk+0x146>
    7410:	d7 01       	movw	r26, r14
    7412:	1c 92       	st	X, r1
    7414:	c8 01       	movw	r24, r16
    7416:	a1 96       	adiw	r28, 0x21	; 33
    7418:	ed e0       	ldi	r30, 0x0D	; 13
    741a:	0c 94 82 3c 	jmp	0x7904	; 0x7904 <__epilogue_restores__+0xa>

0000741e <vfscanf>:
    741e:	4f 92       	push	r4
    7420:	5f 92       	push	r5
    7422:	7f 92       	push	r7
    7424:	8f 92       	push	r8
    7426:	9f 92       	push	r9
    7428:	af 92       	push	r10
    742a:	bf 92       	push	r11
    742c:	cf 92       	push	r12
    742e:	df 92       	push	r13
    7430:	ef 92       	push	r14
    7432:	ff 92       	push	r15
    7434:	0f 93       	push	r16
    7436:	1f 93       	push	r17
    7438:	cf 93       	push	r28
    743a:	df 93       	push	r29
    743c:	1f 92       	push	r1
    743e:	cd b7       	in	r28, 0x3d	; 61
    7440:	de b7       	in	r29, 0x3e	; 62
    7442:	8c 01       	movw	r16, r24
    7444:	2b 01       	movw	r4, r22
    7446:	7a 01       	movw	r14, r20
    7448:	fc 01       	movw	r30, r24
    744a:	17 82       	std	Z+7, r1	; 0x07
    744c:	16 82       	std	Z+6, r1	; 0x06
    744e:	a1 2c       	mov	r10, r1
    7450:	f8 01       	movw	r30, r16
    7452:	d3 80       	ldd	r13, Z+3	; 0x03
    7454:	f2 01       	movw	r30, r4
    7456:	d3 fc       	sbrc	r13, 3
    7458:	85 91       	lpm	r24, Z+
    745a:	d3 fe       	sbrs	r13, 3
    745c:	81 91       	ld	r24, Z+
    745e:	38 2f       	mov	r19, r24
    7460:	2f 01       	movw	r4, r30
    7462:	88 23       	and	r24, r24
    7464:	09 f4       	brne	.+2      	; 0x7468 <vfscanf+0x4a>
    7466:	fc c0       	rjmp	.+504    	; 0x7660 <vfscanf+0x242>
    7468:	90 e0       	ldi	r25, 0x00	; 0
    746a:	39 83       	std	Y+1, r19	; 0x01
    746c:	0e 94 46 3b 	call	0x768c	; 0x768c <isspace>
    7470:	39 81       	ldd	r19, Y+1	; 0x01
    7472:	89 2b       	or	r24, r25
    7474:	21 f0       	breq	.+8      	; 0x747e <vfscanf+0x60>
    7476:	c8 01       	movw	r24, r16
    7478:	0e 94 bd 38 	call	0x717a	; 0x717a <skip_spaces>
    747c:	e9 cf       	rjmp	.-46     	; 0x7450 <vfscanf+0x32>
    747e:	35 32       	cpi	r19, 0x25	; 37
    7480:	41 f4       	brne	.+16     	; 0x7492 <vfscanf+0x74>
    7482:	f2 01       	movw	r30, r4
    7484:	d3 fc       	sbrc	r13, 3
    7486:	35 91       	lpm	r19, Z+
    7488:	d3 fe       	sbrs	r13, 3
    748a:	31 91       	ld	r19, Z+
    748c:	2f 01       	movw	r4, r30
    748e:	35 32       	cpi	r19, 0x25	; 37
    7490:	69 f4       	brne	.+26     	; 0x74ac <vfscanf+0x8e>
    7492:	c8 01       	movw	r24, r16
    7494:	39 83       	std	Y+1, r19	; 0x01
    7496:	0e 94 6f 3b 	call	0x76de	; 0x76de <fgetc>
    749a:	39 81       	ldd	r19, Y+1	; 0x01
    749c:	97 fd       	sbrc	r25, 7
    749e:	de c0       	rjmp	.+444    	; 0x765c <vfscanf+0x23e>
    74a0:	38 17       	cp	r19, r24
    74a2:	b1 f2       	breq	.-84     	; 0x7450 <vfscanf+0x32>
    74a4:	b8 01       	movw	r22, r16
    74a6:	0e 94 df 3b 	call	0x77be	; 0x77be <ungetc>
    74aa:	da c0       	rjmp	.+436    	; 0x7660 <vfscanf+0x242>
    74ac:	3a 32       	cpi	r19, 0x2A	; 42
    74ae:	41 f4       	brne	.+16     	; 0x74c0 <vfscanf+0xa2>
    74b0:	d3 fc       	sbrc	r13, 3
    74b2:	35 91       	lpm	r19, Z+
    74b4:	d3 fe       	sbrs	r13, 3
    74b6:	31 91       	ld	r19, Z+
    74b8:	2f 01       	movw	r4, r30
    74ba:	bb 24       	eor	r11, r11
    74bc:	b3 94       	inc	r11
    74be:	01 c0       	rjmp	.+2      	; 0x74c2 <vfscanf+0xa4>
    74c0:	b1 2c       	mov	r11, r1
    74c2:	71 2c       	mov	r7, r1
    74c4:	20 ed       	ldi	r18, 0xD0	; 208
    74c6:	23 0f       	add	r18, r19
    74c8:	2a 30       	cpi	r18, 0x0A	; 10
    74ca:	90 f4       	brcc	.+36     	; 0x74f0 <vfscanf+0xd2>
    74cc:	fb 2d       	mov	r31, r11
    74ce:	f2 60       	ori	r31, 0x02	; 2
    74d0:	bf 2e       	mov	r11, r31
    74d2:	67 2d       	mov	r22, r7
    74d4:	70 e0       	ldi	r23, 0x00	; 0
    74d6:	80 e0       	ldi	r24, 0x00	; 0
    74d8:	90 e0       	ldi	r25, 0x00	; 0
    74da:	40 e2       	ldi	r20, 0x20	; 32
    74dc:	0e 94 9d 38 	call	0x713a	; 0x713a <mulacc>
    74e0:	76 2e       	mov	r7, r22
    74e2:	f2 01       	movw	r30, r4
    74e4:	d3 fc       	sbrc	r13, 3
    74e6:	35 91       	lpm	r19, Z+
    74e8:	d3 fe       	sbrs	r13, 3
    74ea:	31 91       	ld	r19, Z+
    74ec:	2f 01       	movw	r4, r30
    74ee:	ea cf       	rjmp	.-44     	; 0x74c4 <vfscanf+0xa6>
    74f0:	b1 fe       	sbrs	r11, 1
    74f2:	03 c0       	rjmp	.+6      	; 0x74fa <vfscanf+0xdc>
    74f4:	71 10       	cpse	r7, r1
    74f6:	03 c0       	rjmp	.+6      	; 0x74fe <vfscanf+0xe0>
    74f8:	b3 c0       	rjmp	.+358    	; 0x7660 <vfscanf+0x242>
    74fa:	77 24       	eor	r7, r7
    74fc:	7a 94       	dec	r7
    74fe:	38 36       	cpi	r19, 0x68	; 104
    7500:	19 f0       	breq	.+6      	; 0x7508 <vfscanf+0xea>
    7502:	3c 36       	cpi	r19, 0x6C	; 108
    7504:	61 f0       	breq	.+24     	; 0x751e <vfscanf+0x100>
    7506:	14 c0       	rjmp	.+40     	; 0x7530 <vfscanf+0x112>
    7508:	f2 01       	movw	r30, r4
    750a:	d3 fc       	sbrc	r13, 3
    750c:	35 91       	lpm	r19, Z+
    750e:	d3 fe       	sbrs	r13, 3
    7510:	31 91       	ld	r19, Z+
    7512:	2f 01       	movw	r4, r30
    7514:	38 36       	cpi	r19, 0x68	; 104
    7516:	61 f4       	brne	.+24     	; 0x7530 <vfscanf+0x112>
    7518:	fb 2d       	mov	r31, r11
    751a:	f8 60       	ori	r31, 0x08	; 8
    751c:	bf 2e       	mov	r11, r31
    751e:	8b 2d       	mov	r24, r11
    7520:	84 60       	ori	r24, 0x04	; 4
    7522:	b8 2e       	mov	r11, r24
    7524:	f2 01       	movw	r30, r4
    7526:	d3 fc       	sbrc	r13, 3
    7528:	35 91       	lpm	r19, Z+
    752a:	d3 fe       	sbrs	r13, 3
    752c:	31 91       	ld	r19, Z+
    752e:	2f 01       	movw	r4, r30
    7530:	33 23       	and	r19, r19
    7532:	09 f4       	brne	.+2      	; 0x7536 <vfscanf+0x118>
    7534:	95 c0       	rjmp	.+298    	; 0x7660 <vfscanf+0x242>
    7536:	63 2f       	mov	r22, r19
    7538:	70 e0       	ldi	r23, 0x00	; 0
    753a:	88 e6       	ldi	r24, 0x68	; 104
    753c:	99 e1       	ldi	r25, 0x19	; 25
    753e:	39 83       	std	Y+1, r19	; 0x01
    7540:	0e 94 4e 3b 	call	0x769c	; 0x769c <strchr_P>
    7544:	39 81       	ldd	r19, Y+1	; 0x01
    7546:	89 2b       	or	r24, r25
    7548:	09 f4       	brne	.+2      	; 0x754c <vfscanf+0x12e>
    754a:	8a c0       	rjmp	.+276    	; 0x7660 <vfscanf+0x242>
    754c:	b0 fc       	sbrc	r11, 0
    754e:	07 c0       	rjmp	.+14     	; 0x755e <vfscanf+0x140>
    7550:	f7 01       	movw	r30, r14
    7552:	c0 80       	ld	r12, Z
    7554:	d1 80       	ldd	r13, Z+1	; 0x01
    7556:	c7 01       	movw	r24, r14
    7558:	02 96       	adiw	r24, 0x02	; 2
    755a:	7c 01       	movw	r14, r24
    755c:	02 c0       	rjmp	.+4      	; 0x7562 <vfscanf+0x144>
    755e:	c1 2c       	mov	r12, r1
    7560:	d1 2c       	mov	r13, r1
    7562:	3e 36       	cpi	r19, 0x6E	; 110
    7564:	51 f4       	brne	.+20     	; 0x757a <vfscanf+0x15c>
    7566:	f8 01       	movw	r30, r16
    7568:	46 81       	ldd	r20, Z+6	; 0x06
    756a:	57 81       	ldd	r21, Z+7	; 0x07
    756c:	60 e0       	ldi	r22, 0x00	; 0
    756e:	70 e0       	ldi	r23, 0x00	; 0
    7570:	2b 2d       	mov	r18, r11
    7572:	c6 01       	movw	r24, r12
    7574:	0e 94 91 38 	call	0x7122	; 0x7122 <putval>
    7578:	6b cf       	rjmp	.-298    	; 0x7450 <vfscanf+0x32>
    757a:	33 36       	cpi	r19, 0x63	; 99
    757c:	a1 f4       	brne	.+40     	; 0x75a6 <vfscanf+0x188>
    757e:	b1 fc       	sbrc	r11, 1
    7580:	02 c0       	rjmp	.+4      	; 0x7586 <vfscanf+0x168>
    7582:	77 24       	eor	r7, r7
    7584:	73 94       	inc	r7
    7586:	c8 01       	movw	r24, r16
    7588:	0e 94 6f 3b 	call	0x76de	; 0x76de <fgetc>
    758c:	97 fd       	sbrc	r25, 7
    758e:	66 c0       	rjmp	.+204    	; 0x765c <vfscanf+0x23e>
    7590:	c1 14       	cp	r12, r1
    7592:	d1 04       	cpc	r13, r1
    7594:	29 f0       	breq	.+10     	; 0x75a0 <vfscanf+0x182>
    7596:	f6 01       	movw	r30, r12
    7598:	80 83       	st	Z, r24
    759a:	c6 01       	movw	r24, r12
    759c:	01 96       	adiw	r24, 0x01	; 1
    759e:	6c 01       	movw	r12, r24
    75a0:	7a 94       	dec	r7
    75a2:	89 f7       	brne	.-30     	; 0x7586 <vfscanf+0x168>
    75a4:	57 c0       	rjmp	.+174    	; 0x7654 <vfscanf+0x236>
    75a6:	3b 35       	cpi	r19, 0x5B	; 91
    75a8:	59 f4       	brne	.+22     	; 0x75c0 <vfscanf+0x1a2>
    75aa:	92 01       	movw	r18, r4
    75ac:	a6 01       	movw	r20, r12
    75ae:	67 2d       	mov	r22, r7
    75b0:	c8 01       	movw	r24, r16
    75b2:	0e 94 67 39 	call	0x72ce	; 0x72ce <conv_brk>
    75b6:	2c 01       	movw	r4, r24
    75b8:	00 97       	sbiw	r24, 0x00	; 0
    75ba:	09 f0       	breq	.+2      	; 0x75be <vfscanf+0x1a0>
    75bc:	4b c0       	rjmp	.+150    	; 0x7654 <vfscanf+0x236>
    75be:	45 c0       	rjmp	.+138    	; 0x764a <vfscanf+0x22c>
    75c0:	c8 01       	movw	r24, r16
    75c2:	39 83       	std	Y+1, r19	; 0x01
    75c4:	0e 94 bd 38 	call	0x717a	; 0x717a <skip_spaces>
    75c8:	39 81       	ldd	r19, Y+1	; 0x01
    75ca:	97 fd       	sbrc	r25, 7
    75cc:	47 c0       	rjmp	.+142    	; 0x765c <vfscanf+0x23e>
    75ce:	3f 36       	cpi	r19, 0x6F	; 111
    75d0:	69 f1       	breq	.+90     	; 0x762c <vfscanf+0x20e>
    75d2:	28 f4       	brcc	.+10     	; 0x75de <vfscanf+0x1c0>
    75d4:	34 36       	cpi	r19, 0x64	; 100
    75d6:	31 f1       	breq	.+76     	; 0x7624 <vfscanf+0x206>
    75d8:	39 36       	cpi	r19, 0x69	; 105
    75da:	79 f1       	breq	.+94     	; 0x763a <vfscanf+0x21c>
    75dc:	2b c0       	rjmp	.+86     	; 0x7634 <vfscanf+0x216>
    75de:	33 37       	cpi	r19, 0x73	; 115
    75e0:	69 f0       	breq	.+26     	; 0x75fc <vfscanf+0x1de>
    75e2:	35 37       	cpi	r19, 0x75	; 117
    75e4:	f9 f0       	breq	.+62     	; 0x7624 <vfscanf+0x206>
    75e6:	26 c0       	rjmp	.+76     	; 0x7634 <vfscanf+0x216>
    75e8:	c1 14       	cp	r12, r1
    75ea:	d1 04       	cpc	r13, r1
    75ec:	29 f0       	breq	.+10     	; 0x75f8 <vfscanf+0x1da>
    75ee:	f6 01       	movw	r30, r12
    75f0:	80 82       	st	Z, r8
    75f2:	c6 01       	movw	r24, r12
    75f4:	01 96       	adiw	r24, 0x01	; 1
    75f6:	6c 01       	movw	r12, r24
    75f8:	7a 94       	dec	r7
    75fa:	71 f0       	breq	.+28     	; 0x7618 <vfscanf+0x1fa>
    75fc:	c8 01       	movw	r24, r16
    75fe:	0e 94 6f 3b 	call	0x76de	; 0x76de <fgetc>
    7602:	4c 01       	movw	r8, r24
    7604:	97 fd       	sbrc	r25, 7
    7606:	08 c0       	rjmp	.+16     	; 0x7618 <vfscanf+0x1fa>
    7608:	0e 94 46 3b 	call	0x768c	; 0x768c <isspace>
    760c:	89 2b       	or	r24, r25
    760e:	61 f3       	breq	.-40     	; 0x75e8 <vfscanf+0x1ca>
    7610:	b8 01       	movw	r22, r16
    7612:	c4 01       	movw	r24, r8
    7614:	0e 94 df 3b 	call	0x77be	; 0x77be <ungetc>
    7618:	c1 14       	cp	r12, r1
    761a:	d1 04       	cpc	r13, r1
    761c:	d9 f0       	breq	.+54     	; 0x7654 <vfscanf+0x236>
    761e:	f6 01       	movw	r30, r12
    7620:	10 82       	st	Z, r1
    7622:	18 c0       	rjmp	.+48     	; 0x7654 <vfscanf+0x236>
    7624:	fb 2d       	mov	r31, r11
    7626:	f0 62       	ori	r31, 0x20	; 32
    7628:	bf 2e       	mov	r11, r31
    762a:	07 c0       	rjmp	.+14     	; 0x763a <vfscanf+0x21c>
    762c:	8b 2d       	mov	r24, r11
    762e:	80 61       	ori	r24, 0x10	; 16
    7630:	b8 2e       	mov	r11, r24
    7632:	03 c0       	rjmp	.+6      	; 0x763a <vfscanf+0x21c>
    7634:	9b 2d       	mov	r25, r11
    7636:	90 64       	ori	r25, 0x40	; 64
    7638:	b9 2e       	mov	r11, r25
    763a:	2b 2d       	mov	r18, r11
    763c:	a6 01       	movw	r20, r12
    763e:	67 2d       	mov	r22, r7
    7640:	c8 01       	movw	r24, r16
    7642:	0e 94 d6 38 	call	0x71ac	; 0x71ac <conv_int>
    7646:	81 11       	cpse	r24, r1
    7648:	05 c0       	rjmp	.+10     	; 0x7654 <vfscanf+0x236>
    764a:	f8 01       	movw	r30, r16
    764c:	83 81       	ldd	r24, Z+3	; 0x03
    764e:	80 73       	andi	r24, 0x30	; 48
    7650:	29 f4       	brne	.+10     	; 0x765c <vfscanf+0x23e>
    7652:	06 c0       	rjmp	.+12     	; 0x7660 <vfscanf+0x242>
    7654:	b0 fc       	sbrc	r11, 0
    7656:	fc ce       	rjmp	.-520    	; 0x7450 <vfscanf+0x32>
    7658:	a3 94       	inc	r10
    765a:	fa ce       	rjmp	.-524    	; 0x7450 <vfscanf+0x32>
    765c:	aa 20       	and	r10, r10
    765e:	19 f0       	breq	.+6      	; 0x7666 <vfscanf+0x248>
    7660:	8a 2d       	mov	r24, r10
    7662:	90 e0       	ldi	r25, 0x00	; 0
    7664:	02 c0       	rjmp	.+4      	; 0x766a <vfscanf+0x24c>
    7666:	8f ef       	ldi	r24, 0xFF	; 255
    7668:	9f ef       	ldi	r25, 0xFF	; 255
    766a:	0f 90       	pop	r0
    766c:	df 91       	pop	r29
    766e:	cf 91       	pop	r28
    7670:	1f 91       	pop	r17
    7672:	0f 91       	pop	r16
    7674:	ff 90       	pop	r15
    7676:	ef 90       	pop	r14
    7678:	df 90       	pop	r13
    767a:	cf 90       	pop	r12
    767c:	bf 90       	pop	r11
    767e:	af 90       	pop	r10
    7680:	9f 90       	pop	r9
    7682:	8f 90       	pop	r8
    7684:	7f 90       	pop	r7
    7686:	5f 90       	pop	r5
    7688:	4f 90       	pop	r4
    768a:	08 95       	ret

0000768c <isspace>:
    768c:	91 11       	cpse	r25, r1
    768e:	0e c1       	rjmp	.+540    	; 0x78ac <__ctype_isfalse>
    7690:	80 32       	cpi	r24, 0x20	; 32
    7692:	19 f0       	breq	.+6      	; 0x769a <isspace+0xe>
    7694:	89 50       	subi	r24, 0x09	; 9
    7696:	85 50       	subi	r24, 0x05	; 5
    7698:	d0 f7       	brcc	.-12     	; 0x768e <isspace+0x2>
    769a:	08 95       	ret

0000769c <strchr_P>:
    769c:	fc 01       	movw	r30, r24
    769e:	05 90       	lpm	r0, Z+
    76a0:	06 16       	cp	r0, r22
    76a2:	21 f0       	breq	.+8      	; 0x76ac <strchr_P+0x10>
    76a4:	00 20       	and	r0, r0
    76a6:	d9 f7       	brne	.-10     	; 0x769e <strchr_P+0x2>
    76a8:	c0 01       	movw	r24, r0
    76aa:	08 95       	ret
    76ac:	31 97       	sbiw	r30, 0x01	; 1
    76ae:	cf 01       	movw	r24, r30
    76b0:	08 95       	ret

000076b2 <strnlen_P>:
    76b2:	fc 01       	movw	r30, r24
    76b4:	05 90       	lpm	r0, Z+
    76b6:	61 50       	subi	r22, 0x01	; 1
    76b8:	70 40       	sbci	r23, 0x00	; 0
    76ba:	01 10       	cpse	r0, r1
    76bc:	d8 f7       	brcc	.-10     	; 0x76b4 <strnlen_P+0x2>
    76be:	80 95       	com	r24
    76c0:	90 95       	com	r25
    76c2:	8e 0f       	add	r24, r30
    76c4:	9f 1f       	adc	r25, r31
    76c6:	08 95       	ret

000076c8 <strnlen>:
    76c8:	fc 01       	movw	r30, r24
    76ca:	61 50       	subi	r22, 0x01	; 1
    76cc:	70 40       	sbci	r23, 0x00	; 0
    76ce:	01 90       	ld	r0, Z+
    76d0:	01 10       	cpse	r0, r1
    76d2:	d8 f7       	brcc	.-10     	; 0x76ca <strnlen+0x2>
    76d4:	80 95       	com	r24
    76d6:	90 95       	com	r25
    76d8:	8e 0f       	add	r24, r30
    76da:	9f 1f       	adc	r25, r31
    76dc:	08 95       	ret

000076de <fgetc>:
    76de:	cf 93       	push	r28
    76e0:	df 93       	push	r29
    76e2:	ec 01       	movw	r28, r24
    76e4:	2b 81       	ldd	r18, Y+3	; 0x03
    76e6:	20 ff       	sbrs	r18, 0
    76e8:	33 c0       	rjmp	.+102    	; 0x7750 <fgetc+0x72>
    76ea:	26 ff       	sbrs	r18, 6
    76ec:	0a c0       	rjmp	.+20     	; 0x7702 <fgetc+0x24>
    76ee:	2f 7b       	andi	r18, 0xBF	; 191
    76f0:	2b 83       	std	Y+3, r18	; 0x03
    76f2:	8e 81       	ldd	r24, Y+6	; 0x06
    76f4:	9f 81       	ldd	r25, Y+7	; 0x07
    76f6:	01 96       	adiw	r24, 0x01	; 1
    76f8:	9f 83       	std	Y+7, r25	; 0x07
    76fa:	8e 83       	std	Y+6, r24	; 0x06
    76fc:	8a 81       	ldd	r24, Y+2	; 0x02
    76fe:	90 e0       	ldi	r25, 0x00	; 0
    7700:	29 c0       	rjmp	.+82     	; 0x7754 <fgetc+0x76>
    7702:	22 ff       	sbrs	r18, 2
    7704:	0f c0       	rjmp	.+30     	; 0x7724 <fgetc+0x46>
    7706:	e8 81       	ld	r30, Y
    7708:	f9 81       	ldd	r31, Y+1	; 0x01
    770a:	80 81       	ld	r24, Z
    770c:	99 27       	eor	r25, r25
    770e:	87 fd       	sbrc	r24, 7
    7710:	90 95       	com	r25
    7712:	00 97       	sbiw	r24, 0x00	; 0
    7714:	19 f4       	brne	.+6      	; 0x771c <fgetc+0x3e>
    7716:	20 62       	ori	r18, 0x20	; 32
    7718:	2b 83       	std	Y+3, r18	; 0x03
    771a:	1a c0       	rjmp	.+52     	; 0x7750 <fgetc+0x72>
    771c:	31 96       	adiw	r30, 0x01	; 1
    771e:	f9 83       	std	Y+1, r31	; 0x01
    7720:	e8 83       	st	Y, r30
    7722:	0e c0       	rjmp	.+28     	; 0x7740 <fgetc+0x62>
    7724:	ea 85       	ldd	r30, Y+10	; 0x0a
    7726:	fb 85       	ldd	r31, Y+11	; 0x0b
    7728:	09 95       	icall
    772a:	97 ff       	sbrs	r25, 7
    772c:	09 c0       	rjmp	.+18     	; 0x7740 <fgetc+0x62>
    772e:	2b 81       	ldd	r18, Y+3	; 0x03
    7730:	01 96       	adiw	r24, 0x01	; 1
    7732:	11 f4       	brne	.+4      	; 0x7738 <fgetc+0x5a>
    7734:	80 e1       	ldi	r24, 0x10	; 16
    7736:	01 c0       	rjmp	.+2      	; 0x773a <fgetc+0x5c>
    7738:	80 e2       	ldi	r24, 0x20	; 32
    773a:	82 2b       	or	r24, r18
    773c:	8b 83       	std	Y+3, r24	; 0x03
    773e:	08 c0       	rjmp	.+16     	; 0x7750 <fgetc+0x72>
    7740:	2e 81       	ldd	r18, Y+6	; 0x06
    7742:	3f 81       	ldd	r19, Y+7	; 0x07
    7744:	2f 5f       	subi	r18, 0xFF	; 255
    7746:	3f 4f       	sbci	r19, 0xFF	; 255
    7748:	3f 83       	std	Y+7, r19	; 0x07
    774a:	2e 83       	std	Y+6, r18	; 0x06
    774c:	99 27       	eor	r25, r25
    774e:	02 c0       	rjmp	.+4      	; 0x7754 <fgetc+0x76>
    7750:	8f ef       	ldi	r24, 0xFF	; 255
    7752:	9f ef       	ldi	r25, 0xFF	; 255
    7754:	df 91       	pop	r29
    7756:	cf 91       	pop	r28
    7758:	08 95       	ret

0000775a <fputc>:
    775a:	0f 93       	push	r16
    775c:	1f 93       	push	r17
    775e:	cf 93       	push	r28
    7760:	df 93       	push	r29
    7762:	18 2f       	mov	r17, r24
    7764:	09 2f       	mov	r16, r25
    7766:	eb 01       	movw	r28, r22
    7768:	8b 81       	ldd	r24, Y+3	; 0x03
    776a:	81 fd       	sbrc	r24, 1
    776c:	03 c0       	rjmp	.+6      	; 0x7774 <fputc+0x1a>
    776e:	8f ef       	ldi	r24, 0xFF	; 255
    7770:	9f ef       	ldi	r25, 0xFF	; 255
    7772:	20 c0       	rjmp	.+64     	; 0x77b4 <fputc+0x5a>
    7774:	82 ff       	sbrs	r24, 2
    7776:	10 c0       	rjmp	.+32     	; 0x7798 <fputc+0x3e>
    7778:	4e 81       	ldd	r20, Y+6	; 0x06
    777a:	5f 81       	ldd	r21, Y+7	; 0x07
    777c:	2c 81       	ldd	r18, Y+4	; 0x04
    777e:	3d 81       	ldd	r19, Y+5	; 0x05
    7780:	42 17       	cp	r20, r18
    7782:	53 07       	cpc	r21, r19
    7784:	7c f4       	brge	.+30     	; 0x77a4 <fputc+0x4a>
    7786:	e8 81       	ld	r30, Y
    7788:	f9 81       	ldd	r31, Y+1	; 0x01
    778a:	9f 01       	movw	r18, r30
    778c:	2f 5f       	subi	r18, 0xFF	; 255
    778e:	3f 4f       	sbci	r19, 0xFF	; 255
    7790:	39 83       	std	Y+1, r19	; 0x01
    7792:	28 83       	st	Y, r18
    7794:	10 83       	st	Z, r17
    7796:	06 c0       	rjmp	.+12     	; 0x77a4 <fputc+0x4a>
    7798:	e8 85       	ldd	r30, Y+8	; 0x08
    779a:	f9 85       	ldd	r31, Y+9	; 0x09
    779c:	81 2f       	mov	r24, r17
    779e:	09 95       	icall
    77a0:	89 2b       	or	r24, r25
    77a2:	29 f7       	brne	.-54     	; 0x776e <fputc+0x14>
    77a4:	2e 81       	ldd	r18, Y+6	; 0x06
    77a6:	3f 81       	ldd	r19, Y+7	; 0x07
    77a8:	2f 5f       	subi	r18, 0xFF	; 255
    77aa:	3f 4f       	sbci	r19, 0xFF	; 255
    77ac:	3f 83       	std	Y+7, r19	; 0x07
    77ae:	2e 83       	std	Y+6, r18	; 0x06
    77b0:	81 2f       	mov	r24, r17
    77b2:	90 2f       	mov	r25, r16
    77b4:	df 91       	pop	r29
    77b6:	cf 91       	pop	r28
    77b8:	1f 91       	pop	r17
    77ba:	0f 91       	pop	r16
    77bc:	08 95       	ret

000077be <ungetc>:
    77be:	fb 01       	movw	r30, r22
    77c0:	23 81       	ldd	r18, Z+3	; 0x03
    77c2:	20 ff       	sbrs	r18, 0
    77c4:	12 c0       	rjmp	.+36     	; 0x77ea <ungetc+0x2c>
    77c6:	26 fd       	sbrc	r18, 6
    77c8:	10 c0       	rjmp	.+32     	; 0x77ea <ungetc+0x2c>
    77ca:	8f 3f       	cpi	r24, 0xFF	; 255
    77cc:	3f ef       	ldi	r19, 0xFF	; 255
    77ce:	93 07       	cpc	r25, r19
    77d0:	61 f0       	breq	.+24     	; 0x77ea <ungetc+0x2c>
    77d2:	82 83       	std	Z+2, r24	; 0x02
    77d4:	2f 7d       	andi	r18, 0xDF	; 223
    77d6:	20 64       	ori	r18, 0x40	; 64
    77d8:	23 83       	std	Z+3, r18	; 0x03
    77da:	26 81       	ldd	r18, Z+6	; 0x06
    77dc:	37 81       	ldd	r19, Z+7	; 0x07
    77de:	21 50       	subi	r18, 0x01	; 1
    77e0:	31 09       	sbc	r19, r1
    77e2:	37 83       	std	Z+7, r19	; 0x07
    77e4:	26 83       	std	Z+6, r18	; 0x06
    77e6:	99 27       	eor	r25, r25
    77e8:	08 95       	ret
    77ea:	8f ef       	ldi	r24, 0xFF	; 255
    77ec:	9f ef       	ldi	r25, 0xFF	; 255
    77ee:	08 95       	ret

000077f0 <__ultoa_invert>:
    77f0:	fa 01       	movw	r30, r20
    77f2:	aa 27       	eor	r26, r26
    77f4:	28 30       	cpi	r18, 0x08	; 8
    77f6:	51 f1       	breq	.+84     	; 0x784c <__ultoa_invert+0x5c>
    77f8:	20 31       	cpi	r18, 0x10	; 16
    77fa:	81 f1       	breq	.+96     	; 0x785c <__ultoa_invert+0x6c>
    77fc:	e8 94       	clt
    77fe:	6f 93       	push	r22
    7800:	6e 7f       	andi	r22, 0xFE	; 254
    7802:	6e 5f       	subi	r22, 0xFE	; 254
    7804:	7f 4f       	sbci	r23, 0xFF	; 255
    7806:	8f 4f       	sbci	r24, 0xFF	; 255
    7808:	9f 4f       	sbci	r25, 0xFF	; 255
    780a:	af 4f       	sbci	r26, 0xFF	; 255
    780c:	b1 e0       	ldi	r27, 0x01	; 1
    780e:	3e d0       	rcall	.+124    	; 0x788c <__ultoa_invert+0x9c>
    7810:	b4 e0       	ldi	r27, 0x04	; 4
    7812:	3c d0       	rcall	.+120    	; 0x788c <__ultoa_invert+0x9c>
    7814:	67 0f       	add	r22, r23
    7816:	78 1f       	adc	r23, r24
    7818:	89 1f       	adc	r24, r25
    781a:	9a 1f       	adc	r25, r26
    781c:	a1 1d       	adc	r26, r1
    781e:	68 0f       	add	r22, r24
    7820:	79 1f       	adc	r23, r25
    7822:	8a 1f       	adc	r24, r26
    7824:	91 1d       	adc	r25, r1
    7826:	a1 1d       	adc	r26, r1
    7828:	6a 0f       	add	r22, r26
    782a:	71 1d       	adc	r23, r1
    782c:	81 1d       	adc	r24, r1
    782e:	91 1d       	adc	r25, r1
    7830:	a1 1d       	adc	r26, r1
    7832:	20 d0       	rcall	.+64     	; 0x7874 <__ultoa_invert+0x84>
    7834:	09 f4       	brne	.+2      	; 0x7838 <__ultoa_invert+0x48>
    7836:	68 94       	set
    7838:	3f 91       	pop	r19
    783a:	2a e0       	ldi	r18, 0x0A	; 10
    783c:	26 9f       	mul	r18, r22
    783e:	11 24       	eor	r1, r1
    7840:	30 19       	sub	r19, r0
    7842:	30 5d       	subi	r19, 0xD0	; 208
    7844:	31 93       	st	Z+, r19
    7846:	de f6       	brtc	.-74     	; 0x77fe <__ultoa_invert+0xe>
    7848:	cf 01       	movw	r24, r30
    784a:	08 95       	ret
    784c:	46 2f       	mov	r20, r22
    784e:	47 70       	andi	r20, 0x07	; 7
    7850:	40 5d       	subi	r20, 0xD0	; 208
    7852:	41 93       	st	Z+, r20
    7854:	b3 e0       	ldi	r27, 0x03	; 3
    7856:	0f d0       	rcall	.+30     	; 0x7876 <__ultoa_invert+0x86>
    7858:	c9 f7       	brne	.-14     	; 0x784c <__ultoa_invert+0x5c>
    785a:	f6 cf       	rjmp	.-20     	; 0x7848 <__ultoa_invert+0x58>
    785c:	46 2f       	mov	r20, r22
    785e:	4f 70       	andi	r20, 0x0F	; 15
    7860:	40 5d       	subi	r20, 0xD0	; 208
    7862:	4a 33       	cpi	r20, 0x3A	; 58
    7864:	18 f0       	brcs	.+6      	; 0x786c <__ultoa_invert+0x7c>
    7866:	49 5d       	subi	r20, 0xD9	; 217
    7868:	31 fd       	sbrc	r19, 1
    786a:	40 52       	subi	r20, 0x20	; 32
    786c:	41 93       	st	Z+, r20
    786e:	02 d0       	rcall	.+4      	; 0x7874 <__ultoa_invert+0x84>
    7870:	a9 f7       	brne	.-22     	; 0x785c <__ultoa_invert+0x6c>
    7872:	ea cf       	rjmp	.-44     	; 0x7848 <__ultoa_invert+0x58>
    7874:	b4 e0       	ldi	r27, 0x04	; 4
    7876:	a6 95       	lsr	r26
    7878:	97 95       	ror	r25
    787a:	87 95       	ror	r24
    787c:	77 95       	ror	r23
    787e:	67 95       	ror	r22
    7880:	ba 95       	dec	r27
    7882:	c9 f7       	brne	.-14     	; 0x7876 <__ultoa_invert+0x86>
    7884:	00 97       	sbiw	r24, 0x00	; 0
    7886:	61 05       	cpc	r22, r1
    7888:	71 05       	cpc	r23, r1
    788a:	08 95       	ret
    788c:	9b 01       	movw	r18, r22
    788e:	ac 01       	movw	r20, r24
    7890:	0a 2e       	mov	r0, r26
    7892:	06 94       	lsr	r0
    7894:	57 95       	ror	r21
    7896:	47 95       	ror	r20
    7898:	37 95       	ror	r19
    789a:	27 95       	ror	r18
    789c:	ba 95       	dec	r27
    789e:	c9 f7       	brne	.-14     	; 0x7892 <__ultoa_invert+0xa2>
    78a0:	62 0f       	add	r22, r18
    78a2:	73 1f       	adc	r23, r19
    78a4:	84 1f       	adc	r24, r20
    78a6:	95 1f       	adc	r25, r21
    78a8:	a0 1d       	adc	r26, r0
    78aa:	08 95       	ret

000078ac <__ctype_isfalse>:
    78ac:	99 27       	eor	r25, r25
    78ae:	88 27       	eor	r24, r24

000078b0 <__ctype_istrue>:
    78b0:	08 95       	ret

000078b2 <__mulshisi3>:
    78b2:	b7 ff       	sbrs	r27, 7
    78b4:	0c 94 32 35 	jmp	0x6a64	; 0x6a64 <__muluhisi3>

000078b8 <__mulohisi3>:
    78b8:	0e 94 32 35 	call	0x6a64	; 0x6a64 <__muluhisi3>
    78bc:	82 1b       	sub	r24, r18
    78be:	93 0b       	sbc	r25, r19
    78c0:	08 95       	ret

000078c2 <__prologue_saves__>:
    78c2:	2f 92       	push	r2
    78c4:	3f 92       	push	r3
    78c6:	4f 92       	push	r4
    78c8:	5f 92       	push	r5
    78ca:	6f 92       	push	r6
    78cc:	7f 92       	push	r7
    78ce:	8f 92       	push	r8
    78d0:	9f 92       	push	r9
    78d2:	af 92       	push	r10
    78d4:	bf 92       	push	r11
    78d6:	cf 92       	push	r12
    78d8:	df 92       	push	r13
    78da:	ef 92       	push	r14
    78dc:	ff 92       	push	r15
    78de:	0f 93       	push	r16
    78e0:	1f 93       	push	r17
    78e2:	cf 93       	push	r28
    78e4:	df 93       	push	r29
    78e6:	cd b7       	in	r28, 0x3d	; 61
    78e8:	de b7       	in	r29, 0x3e	; 62
    78ea:	ca 1b       	sub	r28, r26
    78ec:	db 0b       	sbc	r29, r27
    78ee:	0f b6       	in	r0, 0x3f	; 63
    78f0:	f8 94       	cli
    78f2:	de bf       	out	0x3e, r29	; 62
    78f4:	0f be       	out	0x3f, r0	; 63
    78f6:	cd bf       	out	0x3d, r28	; 61
    78f8:	09 94       	ijmp

000078fa <__epilogue_restores__>:
    78fa:	2a 88       	ldd	r2, Y+18	; 0x12
    78fc:	39 88       	ldd	r3, Y+17	; 0x11
    78fe:	48 88       	ldd	r4, Y+16	; 0x10
    7900:	5f 84       	ldd	r5, Y+15	; 0x0f
    7902:	6e 84       	ldd	r6, Y+14	; 0x0e
    7904:	7d 84       	ldd	r7, Y+13	; 0x0d
    7906:	8c 84       	ldd	r8, Y+12	; 0x0c
    7908:	9b 84       	ldd	r9, Y+11	; 0x0b
    790a:	aa 84       	ldd	r10, Y+10	; 0x0a
    790c:	b9 84       	ldd	r11, Y+9	; 0x09
    790e:	c8 84       	ldd	r12, Y+8	; 0x08
    7910:	df 80       	ldd	r13, Y+7	; 0x07
    7912:	ee 80       	ldd	r14, Y+6	; 0x06
    7914:	fd 80       	ldd	r15, Y+5	; 0x05
    7916:	0c 81       	ldd	r16, Y+4	; 0x04
    7918:	1b 81       	ldd	r17, Y+3	; 0x03
    791a:	aa 81       	ldd	r26, Y+2	; 0x02
    791c:	b9 81       	ldd	r27, Y+1	; 0x01
    791e:	ce 0f       	add	r28, r30
    7920:	d1 1d       	adc	r29, r1
    7922:	0f b6       	in	r0, 0x3f	; 63
    7924:	f8 94       	cli
    7926:	de bf       	out	0x3e, r29	; 62
    7928:	0f be       	out	0x3f, r0	; 63
    792a:	cd bf       	out	0x3d, r28	; 61
    792c:	ed 01       	movw	r28, r26
    792e:	08 95       	ret

00007930 <_exit>:
    7930:	f8 94       	cli

00007932 <__stop_program>:
    7932:	ff cf       	rjmp	.-2      	; 0x7932 <__stop_program>
